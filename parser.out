Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> VAR FUNC M
Rule 2     VAR -> TIPO DECLARE SEMICOLON
Rule 3     VAR -> TIPO MAT SEMICOLON
Rule 4     VAR -> VAR TIPO DECLARE SEMICOLON
Rule 5     VAR -> VAR TIPO MAT SEMICOLON
Rule 6     VAR -> <empty>
Rule 7     DECLARE -> ID
Rule 8     DECLARE -> DECLARE COMA ID
Rule 9     DECLARE -> ASSIGN
Rule 10    DECLARE -> DECLARE COMA ASSIGN
Rule 11    ASSIGN -> ID EQUAL EA
Rule 12    FUNC -> FUNCTION AUX_FUNC ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3
Rule 13    FUNC -> FUNC AUX_FUNC FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3
Rule 14    FUNC -> <empty>
Rule 15    RETURN -> empty
Rule 16    AUX_FUNC -> empty
Rule 17    M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES
Rule 18    TIPO -> INT
Rule 19    TIPO -> DOUBLE
Rule 20    S -> STATEMENTS
Rule 21    S -> S STATEMENTS
Rule 22    S -> <empty>
Rule 23    STATEMENTS -> VAR
Rule 24    STATEMENTS -> IDSTAT
Rule 25    STATEMENTS -> PRINTSTAT
Rule 26    STATEMENTS -> READSTAT
Rule 27    STATEMENTS -> IFSTAT
Rule 28    STATEMENTS -> WHILESTAT
Rule 29    STATEMENTS -> DOSTAT
Rule 30    STATEMENTS -> FORSTAT
Rule 31    STATEMENTS -> FUNCSTAT
Rule 32    STATEMENTS -> INC_STAT
Rule 33    STATEMENTS -> <empty>
Rule 34    IDSTAT -> ASSIGN SEMICOLON
Rule 35    PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
Rule 36    PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
Rule 37    READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
Rule 38    IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
Rule 39    IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
Rule 40    IF_AUX1 -> empty
Rule 41    IF_AUX2 -> empty
Rule 42    IF_AUX3 -> empty
Rule 43    empty -> <empty>
Rule 44    WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
Rule 45    WHILE_AUX_1 -> empty
Rule 46    WHILE_AUX_2 -> empty
Rule 47    DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
Rule 48    FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
Rule 49    FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
Rule 50    INC_STAT -> ID PLUSPLUS SEMICOLON
Rule 51    INC_STAT -> ID MINUSMINUS SEMICOLON
Rule 52    IN_S -> OPEN_BRACES S CLOSING_BRACES
Rule 53    EA -> TA
Rule 54    EA -> EA PLUS TA
Rule 55    EA -> EA MINUS TA
Rule 56    FA -> CONSTANT
Rule 57    FA -> ID
Rule 58    FA -> MAT
Rule 59    FA -> OPEN_PARENTH EA CLOSING_PARENTH
Rule 60    TA -> FA
Rule 61    TA -> TA MULTIPLY FA
Rule 62    TA -> TA DIVISION FA
Rule 63    EL -> TL
Rule 64    EL -> EL OR TL
Rule 65    TL -> FL
Rule 66    TL -> TL AND FL
Rule 67    FL -> NL OPERATORS NL
Rule 68    FL -> EA OPERATORS EA
Rule 69    FL -> NL
Rule 70    FL -> OPEN_PARENTH EL CLOSING_PARENTH
Rule 71    NL -> NOT EL
Rule 72    OPERATORS -> NOT_EQUAL
Rule 73    OPERATORS -> LOWER_THAN
Rule 74    OPERATORS -> BIGGER_THAN
Rule 75    OPERATORS -> EQUAL_EQUAL
Rule 76    MAT -> ID MAT_BRACKET
Rule 77    MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET
Rule 78    MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET
Rule 79    MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET
Rule 80    MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET

Terminals, with rules where they appear

AND                  : 66
BIGGER_THAN          : 74
CLOSING_BRACES       : 12 13 17 52
CLOSING_BRACKET      : 77 78 79 80
CLOSING_PARENTH      : 12 13 17 35 36 37 38 39 44 47 48 49 59 70
COMA                 : 8 10
COMMENT              : 
CONSTANT             : 56 77 78
DIVISION             : 62
DO                   : 47
DOUBLE               : 19
ELSE                 : 39
EQUAL                : 11
EQUAL_EQUAL          : 75
FOR                  : 48
FUNCTION             : 12 13
ID                   : 7 8 11 12 13 49 50 51 57 76 79 80
IF                   : 38 39
INT                  : 18
LOWER_THAN           : 73
MAIN                 : 17
MINUS                : 55
MINUSMINUS           : 51
MULTIPLY             : 61
NOT                  : 71
NOT_EQUAL            : 72
OPEN_BRACES          : 12 13 17 52
OPEN_BRACKET         : 77 78 79 80
OPEN_PARENTH         : 12 13 17 35 36 37 38 39 44 47 48 49 59 70
OR                   : 64
PLUS                 : 54
PLUSPLUS             : 50
PRINT                : 35 36
READ                 : 37
SEMICOLON            : 2 3 4 5 34 35 36 37 47 48 48 49 50 51
STRING               : 36
WHILE                : 44 47
error                : 

Nonterminals, with rules where they appear

ASSIGN               : 9 10 34 48 48
AUX_FUNC             : 12 13
DECLARE              : 2 4 8 10
DOSTAT               : 29
EA                   : 11 35 37 54 55 59 68 68
EL                   : 38 39 44 47 48 64 70 71
FA                   : 60 61 62
FL                   : 65 66
FORSTAT              : 30
FUNC                 : 1 13
FUNCSTAT             : 31
IDSTAT               : 24
IFSTAT               : 27
IF_AUX1              : 38 39
IF_AUX2              : 39
IF_AUX3              : 12 13 38 39
INC_STAT             : 32
IN_S                 : 38 39 39 44 47 48
M                    : 1
MAT                  : 3 5 58
MAT_BRACKET          : 76 78 80
NL                   : 67 67 69
OPERATORS            : 67 68
PRINTSTAT            : 25
PROGRAMA             : 0
READSTAT             : 26
RETURN               : 12 13
S                    : 12 13 17 21 52
STATEMENTS           : 20 21
TA                   : 53 54 55 61 62
TIPO                 : 2 3 4 5
TL                   : 63 64 66
VAR                  : 1 4 5 23
WHILESTAT            : 28
WHILE_AUX_1          : 44 47 48
WHILE_AUX_2          : 44 48
empty                : 15 16 40 41 42 45 46

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . VAR FUNC M
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (18) TIPO -> . INT
    (19) TIPO -> . DOUBLE

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    FUNCTION        reduce using rule 6 (VAR -> .)
    MAIN            reduce using rule 6 (VAR -> .)
    INT             shift and go to state 5
    DOUBLE          shift and go to state 2

  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]

    PROGRAMA                       shift and go to state 1
    VAR                            shift and go to state 3
    TIPO                           shift and go to state 4

state 1

    (0) S' -> PROGRAMA .



state 2

    (19) TIPO -> DOUBLE .

    ID              reduce using rule 19 (TIPO -> DOUBLE .)


state 3

    (1) PROGRAMA -> VAR . FUNC M
    (4) VAR -> VAR . TIPO DECLARE SEMICOLON
    (5) VAR -> VAR . TIPO MAT SEMICOLON
    (12) FUNC -> . FUNCTION AUX_FUNC ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3
    (13) FUNC -> . FUNC AUX_FUNC FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3
    (14) FUNC -> .
    (18) TIPO -> . INT
    (19) TIPO -> . DOUBLE

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 6
    MAIN            reduce using rule 14 (FUNC -> .)
    INT             shift and go to state 5
    DOUBLE          shift and go to state 2

  ! FUNCTION        [ reduce using rule 14 (FUNC -> .) ]

    FUNC                           shift and go to state 7
    TIPO                           shift and go to state 8

state 4

    (2) VAR -> TIPO . DECLARE SEMICOLON
    (3) VAR -> TIPO . MAT SEMICOLON
    (7) DECLARE -> . ID
    (8) DECLARE -> . DECLARE COMA ID
    (9) DECLARE -> . ASSIGN
    (10) DECLARE -> . DECLARE COMA ASSIGN
    (76) MAT -> . ID MAT_BRACKET
    (11) ASSIGN -> . ID EQUAL EA

    ID              shift and go to state 12

    MAT                            shift and go to state 9
    DECLARE                        shift and go to state 10
    ASSIGN                         shift and go to state 11

state 5

    (18) TIPO -> INT .

    ID              reduce using rule 18 (TIPO -> INT .)


state 6

    (12) FUNC -> FUNCTION . AUX_FUNC ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3
    (16) AUX_FUNC -> . empty
    (43) empty -> .

    ID              reduce using rule 43 (empty -> .)

    AUX_FUNC                       shift and go to state 13
    empty                          shift and go to state 14

state 7

    (1) PROGRAMA -> VAR FUNC . M
    (13) FUNC -> FUNC . AUX_FUNC FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3
    (17) M -> . MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES
    (16) AUX_FUNC -> . empty
    (43) empty -> .

    MAIN            shift and go to state 17
    FUNCTION        reduce using rule 43 (empty -> .)

    AUX_FUNC                       shift and go to state 16
    empty                          shift and go to state 14
    M                              shift and go to state 15

state 8

    (4) VAR -> VAR TIPO . DECLARE SEMICOLON
    (5) VAR -> VAR TIPO . MAT SEMICOLON
    (7) DECLARE -> . ID
    (8) DECLARE -> . DECLARE COMA ID
    (9) DECLARE -> . ASSIGN
    (10) DECLARE -> . DECLARE COMA ASSIGN
    (76) MAT -> . ID MAT_BRACKET
    (11) ASSIGN -> . ID EQUAL EA

    ID              shift and go to state 12

    MAT                            shift and go to state 18
    DECLARE                        shift and go to state 19
    ASSIGN                         shift and go to state 11

state 9

    (3) VAR -> TIPO MAT . SEMICOLON

    SEMICOLON       shift and go to state 20


state 10

    (2) VAR -> TIPO DECLARE . SEMICOLON
    (8) DECLARE -> DECLARE . COMA ID
    (10) DECLARE -> DECLARE . COMA ASSIGN

    SEMICOLON       shift and go to state 22
    COMA            shift and go to state 21


state 11

    (9) DECLARE -> ASSIGN .

    SEMICOLON       reduce using rule 9 (DECLARE -> ASSIGN .)
    COMA            reduce using rule 9 (DECLARE -> ASSIGN .)


state 12

    (7) DECLARE -> ID .
    (76) MAT -> ID . MAT_BRACKET
    (11) ASSIGN -> ID . EQUAL EA
    (77) MAT_BRACKET -> . OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (78) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (79) MAT_BRACKET -> . OPEN_BRACKET ID CLOSING_BRACKET
    (80) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET

    SEMICOLON       reduce using rule 7 (DECLARE -> ID .)
    COMA            reduce using rule 7 (DECLARE -> ID .)
    EQUAL           shift and go to state 24
    OPEN_BRACKET    shift and go to state 23

    MAT_BRACKET                    shift and go to state 25

state 13

    (12) FUNC -> FUNCTION AUX_FUNC . ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3

    ID              shift and go to state 26


state 14

    (16) AUX_FUNC -> empty .

    FUNCTION        reduce using rule 16 (AUX_FUNC -> empty .)
    ID              reduce using rule 16 (AUX_FUNC -> empty .)


state 15

    (1) PROGRAMA -> VAR FUNC M .

    $end            reduce using rule 1 (PROGRAMA -> VAR FUNC M .)


state 16

    (13) FUNC -> FUNC AUX_FUNC . FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3

    FUNCTION        shift and go to state 27


state 17

    (17) M -> MAIN . OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES

    OPEN_PARENTH    shift and go to state 28


state 18

    (5) VAR -> VAR TIPO MAT . SEMICOLON

    SEMICOLON       shift and go to state 29


state 19

    (4) VAR -> VAR TIPO DECLARE . SEMICOLON
    (8) DECLARE -> DECLARE . COMA ID
    (10) DECLARE -> DECLARE . COMA ASSIGN

    SEMICOLON       shift and go to state 30
    COMA            shift and go to state 21


state 20

    (3) VAR -> TIPO MAT SEMICOLON .

    INT             reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    DOUBLE          reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    CLOSING_BRACES  reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    PRINT           reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    READ            reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    IF              reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    WHILE           reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    DO              reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    FOR             reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    ID              reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    FUNCTION        reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    MAIN            reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)


state 21

    (8) DECLARE -> DECLARE COMA . ID
    (10) DECLARE -> DECLARE COMA . ASSIGN
    (11) ASSIGN -> . ID EQUAL EA

    ID              shift and go to state 32

    ASSIGN                         shift and go to state 31

state 22

    (2) VAR -> TIPO DECLARE SEMICOLON .

    INT             reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    DOUBLE          reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    CLOSING_BRACES  reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    PRINT           reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    READ            reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    IF              reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    WHILE           reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    DO              reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    FOR             reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    ID              reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    FUNCTION        reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    MAIN            reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)


state 23

    (77) MAT_BRACKET -> OPEN_BRACKET . CONSTANT CLOSING_BRACKET
    (79) MAT_BRACKET -> OPEN_BRACKET . ID CLOSING_BRACKET

    CONSTANT        shift and go to state 33
    ID              shift and go to state 34


state 24

    (11) ASSIGN -> ID EQUAL . EA
    (53) EA -> . TA
    (54) EA -> . EA PLUS TA
    (55) EA -> . EA MINUS TA
    (60) TA -> . FA
    (61) TA -> . TA MULTIPLY FA
    (62) TA -> . TA DIVISION FA
    (56) FA -> . CONSTANT
    (57) FA -> . ID
    (58) FA -> . MAT
    (59) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (76) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 41
    ID              shift and go to state 38
    OPEN_PARENTH    shift and go to state 39

    FA                             shift and go to state 36
    EA                             shift and go to state 37
    TA                             shift and go to state 35
    MAT                            shift and go to state 40

state 25

    (76) MAT -> ID MAT_BRACKET .
    (78) MAT_BRACKET -> MAT_BRACKET . OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (80) MAT_BRACKET -> MAT_BRACKET . OPEN_BRACKET ID CLOSING_BRACKET

    MULTIPLY        reduce using rule 76 (MAT -> ID MAT_BRACKET .)
    DIVISION        reduce using rule 76 (MAT -> ID MAT_BRACKET .)
    PLUS            reduce using rule 76 (MAT -> ID MAT_BRACKET .)
    MINUS           reduce using rule 76 (MAT -> ID MAT_BRACKET .)
    SEMICOLON       reduce using rule 76 (MAT -> ID MAT_BRACKET .)
    COMA            reduce using rule 76 (MAT -> ID MAT_BRACKET .)
    CLOSING_PARENTH reduce using rule 76 (MAT -> ID MAT_BRACKET .)
    NOT_EQUAL       reduce using rule 76 (MAT -> ID MAT_BRACKET .)
    LOWER_THAN      reduce using rule 76 (MAT -> ID MAT_BRACKET .)
    BIGGER_THAN     reduce using rule 76 (MAT -> ID MAT_BRACKET .)
    EQUAL_EQUAL     reduce using rule 76 (MAT -> ID MAT_BRACKET .)
    AND             reduce using rule 76 (MAT -> ID MAT_BRACKET .)
    OR              reduce using rule 76 (MAT -> ID MAT_BRACKET .)
    OPEN_BRACKET    shift and go to state 42


state 26

    (12) FUNC -> FUNCTION AUX_FUNC ID . OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3

    OPEN_PARENTH    shift and go to state 43


state 27

    (13) FUNC -> FUNC AUX_FUNC FUNCTION . ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3

    ID              shift and go to state 44


state 28

    (17) M -> MAIN OPEN_PARENTH . CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES

    CLOSING_PARENTH shift and go to state 45


state 29

    (5) VAR -> VAR TIPO MAT SEMICOLON .

    INT             reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    DOUBLE          reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    CLOSING_BRACES  reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    PRINT           reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    READ            reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    IF              reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    WHILE           reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    DO              reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    FOR             reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    ID              reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    FUNCTION        reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    MAIN            reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)


state 30

    (4) VAR -> VAR TIPO DECLARE SEMICOLON .

    INT             reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    DOUBLE          reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    CLOSING_BRACES  reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    PRINT           reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    READ            reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    IF              reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    WHILE           reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    DO              reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    FOR             reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    ID              reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    FUNCTION        reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    MAIN            reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)


state 31

    (10) DECLARE -> DECLARE COMA ASSIGN .

    SEMICOLON       reduce using rule 10 (DECLARE -> DECLARE COMA ASSIGN .)
    COMA            reduce using rule 10 (DECLARE -> DECLARE COMA ASSIGN .)


state 32

    (8) DECLARE -> DECLARE COMA ID .
    (11) ASSIGN -> ID . EQUAL EA

    SEMICOLON       reduce using rule 8 (DECLARE -> DECLARE COMA ID .)
    COMA            reduce using rule 8 (DECLARE -> DECLARE COMA ID .)
    EQUAL           shift and go to state 24


state 33

    (77) MAT_BRACKET -> OPEN_BRACKET CONSTANT . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 46


state 34

    (79) MAT_BRACKET -> OPEN_BRACKET ID . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 47


state 35

    (53) EA -> TA .
    (61) TA -> TA . MULTIPLY FA
    (62) TA -> TA . DIVISION FA

    CLOSING_PARENTH reduce using rule 53 (EA -> TA .)
    PLUS            reduce using rule 53 (EA -> TA .)
    MINUS           reduce using rule 53 (EA -> TA .)
    NOT_EQUAL       reduce using rule 53 (EA -> TA .)
    LOWER_THAN      reduce using rule 53 (EA -> TA .)
    BIGGER_THAN     reduce using rule 53 (EA -> TA .)
    EQUAL_EQUAL     reduce using rule 53 (EA -> TA .)
    SEMICOLON       reduce using rule 53 (EA -> TA .)
    COMA            reduce using rule 53 (EA -> TA .)
    AND             reduce using rule 53 (EA -> TA .)
    OR              reduce using rule 53 (EA -> TA .)
    MULTIPLY        shift and go to state 48
    DIVISION        shift and go to state 49


state 36

    (60) TA -> FA .

    MULTIPLY        reduce using rule 60 (TA -> FA .)
    DIVISION        reduce using rule 60 (TA -> FA .)
    PLUS            reduce using rule 60 (TA -> FA .)
    MINUS           reduce using rule 60 (TA -> FA .)
    NOT_EQUAL       reduce using rule 60 (TA -> FA .)
    LOWER_THAN      reduce using rule 60 (TA -> FA .)
    BIGGER_THAN     reduce using rule 60 (TA -> FA .)
    EQUAL_EQUAL     reduce using rule 60 (TA -> FA .)
    SEMICOLON       reduce using rule 60 (TA -> FA .)
    COMA            reduce using rule 60 (TA -> FA .)
    CLOSING_PARENTH reduce using rule 60 (TA -> FA .)
    AND             reduce using rule 60 (TA -> FA .)
    OR              reduce using rule 60 (TA -> FA .)


state 37

    (11) ASSIGN -> ID EQUAL EA .
    (54) EA -> EA . PLUS TA
    (55) EA -> EA . MINUS TA

    SEMICOLON       reduce using rule 11 (ASSIGN -> ID EQUAL EA .)
    COMA            reduce using rule 11 (ASSIGN -> ID EQUAL EA .)
    CLOSING_PARENTH reduce using rule 11 (ASSIGN -> ID EQUAL EA .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51


state 38

    (57) FA -> ID .
    (76) MAT -> ID . MAT_BRACKET
    (77) MAT_BRACKET -> . OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (78) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (79) MAT_BRACKET -> . OPEN_BRACKET ID CLOSING_BRACKET
    (80) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET

    MULTIPLY        reduce using rule 57 (FA -> ID .)
    DIVISION        reduce using rule 57 (FA -> ID .)
    CLOSING_PARENTH reduce using rule 57 (FA -> ID .)
    PLUS            reduce using rule 57 (FA -> ID .)
    MINUS           reduce using rule 57 (FA -> ID .)
    NOT_EQUAL       reduce using rule 57 (FA -> ID .)
    LOWER_THAN      reduce using rule 57 (FA -> ID .)
    BIGGER_THAN     reduce using rule 57 (FA -> ID .)
    EQUAL_EQUAL     reduce using rule 57 (FA -> ID .)
    SEMICOLON       reduce using rule 57 (FA -> ID .)
    COMA            reduce using rule 57 (FA -> ID .)
    AND             reduce using rule 57 (FA -> ID .)
    OR              reduce using rule 57 (FA -> ID .)
    OPEN_BRACKET    shift and go to state 23

    MAT_BRACKET                    shift and go to state 25

state 39

    (59) FA -> OPEN_PARENTH . EA CLOSING_PARENTH
    (53) EA -> . TA
    (54) EA -> . EA PLUS TA
    (55) EA -> . EA MINUS TA
    (60) TA -> . FA
    (61) TA -> . TA MULTIPLY FA
    (62) TA -> . TA DIVISION FA
    (56) FA -> . CONSTANT
    (57) FA -> . ID
    (58) FA -> . MAT
    (59) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (76) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 41
    ID              shift and go to state 38
    OPEN_PARENTH    shift and go to state 39

    FA                             shift and go to state 36
    EA                             shift and go to state 52
    TA                             shift and go to state 35
    MAT                            shift and go to state 40

state 40

    (58) FA -> MAT .

    MULTIPLY        reduce using rule 58 (FA -> MAT .)
    DIVISION        reduce using rule 58 (FA -> MAT .)
    CLOSING_PARENTH reduce using rule 58 (FA -> MAT .)
    PLUS            reduce using rule 58 (FA -> MAT .)
    MINUS           reduce using rule 58 (FA -> MAT .)
    NOT_EQUAL       reduce using rule 58 (FA -> MAT .)
    LOWER_THAN      reduce using rule 58 (FA -> MAT .)
    BIGGER_THAN     reduce using rule 58 (FA -> MAT .)
    EQUAL_EQUAL     reduce using rule 58 (FA -> MAT .)
    SEMICOLON       reduce using rule 58 (FA -> MAT .)
    COMA            reduce using rule 58 (FA -> MAT .)
    AND             reduce using rule 58 (FA -> MAT .)
    OR              reduce using rule 58 (FA -> MAT .)


state 41

    (56) FA -> CONSTANT .

    MULTIPLY        reduce using rule 56 (FA -> CONSTANT .)
    DIVISION        reduce using rule 56 (FA -> CONSTANT .)
    CLOSING_PARENTH reduce using rule 56 (FA -> CONSTANT .)
    PLUS            reduce using rule 56 (FA -> CONSTANT .)
    MINUS           reduce using rule 56 (FA -> CONSTANT .)
    NOT_EQUAL       reduce using rule 56 (FA -> CONSTANT .)
    LOWER_THAN      reduce using rule 56 (FA -> CONSTANT .)
    BIGGER_THAN     reduce using rule 56 (FA -> CONSTANT .)
    EQUAL_EQUAL     reduce using rule 56 (FA -> CONSTANT .)
    SEMICOLON       reduce using rule 56 (FA -> CONSTANT .)
    COMA            reduce using rule 56 (FA -> CONSTANT .)
    AND             reduce using rule 56 (FA -> CONSTANT .)
    OR              reduce using rule 56 (FA -> CONSTANT .)


state 42

    (78) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET . CONSTANT CLOSING_BRACKET
    (80) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET . ID CLOSING_BRACKET

    CONSTANT        shift and go to state 53
    ID              shift and go to state 54


state 43

    (12) FUNC -> FUNCTION AUX_FUNC ID OPEN_PARENTH . CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3

    CLOSING_PARENTH shift and go to state 55


state 44

    (13) FUNC -> FUNC AUX_FUNC FUNCTION ID . OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3

    OPEN_PARENTH    shift and go to state 56


state 45

    (17) M -> MAIN OPEN_PARENTH CLOSING_PARENTH . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 57


state 46

    (77) MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .

    OPEN_BRACKET    reduce using rule 77 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 77 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    MULTIPLY        reduce using rule 77 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    DIVISION        reduce using rule 77 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    PLUS            reduce using rule 77 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    MINUS           reduce using rule 77 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    COMA            reduce using rule 77 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    CLOSING_PARENTH reduce using rule 77 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    NOT_EQUAL       reduce using rule 77 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    LOWER_THAN      reduce using rule 77 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    BIGGER_THAN     reduce using rule 77 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    EQUAL_EQUAL     reduce using rule 77 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    AND             reduce using rule 77 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    OR              reduce using rule 77 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)


state 47

    (79) MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .

    OPEN_BRACKET    reduce using rule 79 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 79 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    MULTIPLY        reduce using rule 79 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    DIVISION        reduce using rule 79 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    PLUS            reduce using rule 79 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    MINUS           reduce using rule 79 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    COMA            reduce using rule 79 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    CLOSING_PARENTH reduce using rule 79 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    NOT_EQUAL       reduce using rule 79 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    LOWER_THAN      reduce using rule 79 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    BIGGER_THAN     reduce using rule 79 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    EQUAL_EQUAL     reduce using rule 79 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    AND             reduce using rule 79 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    OR              reduce using rule 79 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)


state 48

    (61) TA -> TA MULTIPLY . FA
    (56) FA -> . CONSTANT
    (57) FA -> . ID
    (58) FA -> . MAT
    (59) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (76) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 41
    ID              shift and go to state 38
    OPEN_PARENTH    shift and go to state 39

    FA                             shift and go to state 58
    MAT                            shift and go to state 40

state 49

    (62) TA -> TA DIVISION . FA
    (56) FA -> . CONSTANT
    (57) FA -> . ID
    (58) FA -> . MAT
    (59) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (76) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 41
    ID              shift and go to state 38
    OPEN_PARENTH    shift and go to state 39

    FA                             shift and go to state 59
    MAT                            shift and go to state 40

state 50

    (54) EA -> EA PLUS . TA
    (60) TA -> . FA
    (61) TA -> . TA MULTIPLY FA
    (62) TA -> . TA DIVISION FA
    (56) FA -> . CONSTANT
    (57) FA -> . ID
    (58) FA -> . MAT
    (59) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (76) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 41
    ID              shift and go to state 38
    OPEN_PARENTH    shift and go to state 39

    FA                             shift and go to state 36
    TA                             shift and go to state 60
    MAT                            shift and go to state 40

state 51

    (55) EA -> EA MINUS . TA
    (60) TA -> . FA
    (61) TA -> . TA MULTIPLY FA
    (62) TA -> . TA DIVISION FA
    (56) FA -> . CONSTANT
    (57) FA -> . ID
    (58) FA -> . MAT
    (59) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (76) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 41
    ID              shift and go to state 38
    OPEN_PARENTH    shift and go to state 39

    FA                             shift and go to state 36
    TA                             shift and go to state 61
    MAT                            shift and go to state 40

state 52

    (59) FA -> OPEN_PARENTH EA . CLOSING_PARENTH
    (54) EA -> EA . PLUS TA
    (55) EA -> EA . MINUS TA

    CLOSING_PARENTH shift and go to state 62
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51


state 53

    (78) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 63


state 54

    (80) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 64


state 55

    (12) FUNC -> FUNCTION AUX_FUNC ID OPEN_PARENTH CLOSING_PARENTH . OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3

    OPEN_BRACES     shift and go to state 65


state 56

    (13) FUNC -> FUNC AUX_FUNC FUNCTION ID OPEN_PARENTH . CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3

    CLOSING_PARENTH shift and go to state 66


state 57

    (17) M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES . S CLOSING_BRACES
    (20) S -> . STATEMENTS
    (21) S -> . S STATEMENTS
    (22) S -> .
    (23) STATEMENTS -> . VAR
    (24) STATEMENTS -> . IDSTAT
    (25) STATEMENTS -> . PRINTSTAT
    (26) STATEMENTS -> . READSTAT
    (27) STATEMENTS -> . IFSTAT
    (28) STATEMENTS -> . WHILESTAT
    (29) STATEMENTS -> . DOSTAT
    (30) STATEMENTS -> . FORSTAT
    (31) STATEMENTS -> . FUNCSTAT
    (32) STATEMENTS -> . INC_STAT
    (33) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (34) IDSTAT -> . ASSIGN SEMICOLON
    (35) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (36) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (37) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (38) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (39) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (44) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (47) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (48) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (49) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (50) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (51) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (18) TIPO -> . INT
    (19) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for READ resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for IF resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for DO resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for FOR resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for ID resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 6 (VAR -> .)
    PRINT           shift and go to state 71
    READ            shift and go to state 79
    IF              shift and go to state 72
    WHILE           shift and go to state 68
    DO              shift and go to state 77
    FOR             shift and go to state 76
    ID              shift and go to state 69
    INT             shift and go to state 5
    DOUBLE          shift and go to state 2

  ! CLOSING_BRACES  [ reduce using rule 22 (S -> .) ]
  ! PRINT           [ reduce using rule 22 (S -> .) ]
  ! READ            [ reduce using rule 22 (S -> .) ]
  ! IF              [ reduce using rule 22 (S -> .) ]
  ! WHILE           [ reduce using rule 22 (S -> .) ]
  ! DO              [ reduce using rule 22 (S -> .) ]
  ! FOR             [ reduce using rule 22 (S -> .) ]
  ! ID              [ reduce using rule 22 (S -> .) ]
  ! INT             [ reduce using rule 22 (S -> .) ]
  ! DOUBLE          [ reduce using rule 22 (S -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 33 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 33 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 33 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 33 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 33 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 33 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 33 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 33 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 33 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 33 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    DOSTAT                         shift and go to state 75
    PRINTSTAT                      shift and go to state 67
    FUNCSTAT                       shift and go to state 74
    VAR                            shift and go to state 78
    READSTAT                       shift and go to state 70
    S                              shift and go to state 80
    WHILESTAT                      shift and go to state 81
    INC_STAT                       shift and go to state 83
    STATEMENTS                     shift and go to state 73
    IFSTAT                         shift and go to state 84
    IDSTAT                         shift and go to state 85
    FORSTAT                        shift and go to state 82
    TIPO                           shift and go to state 4
    ASSIGN                         shift and go to state 86

state 58

    (61) TA -> TA MULTIPLY FA .

    MULTIPLY        reduce using rule 61 (TA -> TA MULTIPLY FA .)
    DIVISION        reduce using rule 61 (TA -> TA MULTIPLY FA .)
    PLUS            reduce using rule 61 (TA -> TA MULTIPLY FA .)
    MINUS           reduce using rule 61 (TA -> TA MULTIPLY FA .)
    NOT_EQUAL       reduce using rule 61 (TA -> TA MULTIPLY FA .)
    LOWER_THAN      reduce using rule 61 (TA -> TA MULTIPLY FA .)
    BIGGER_THAN     reduce using rule 61 (TA -> TA MULTIPLY FA .)
    EQUAL_EQUAL     reduce using rule 61 (TA -> TA MULTIPLY FA .)
    SEMICOLON       reduce using rule 61 (TA -> TA MULTIPLY FA .)
    COMA            reduce using rule 61 (TA -> TA MULTIPLY FA .)
    CLOSING_PARENTH reduce using rule 61 (TA -> TA MULTIPLY FA .)
    AND             reduce using rule 61 (TA -> TA MULTIPLY FA .)
    OR              reduce using rule 61 (TA -> TA MULTIPLY FA .)


state 59

    (62) TA -> TA DIVISION FA .

    MULTIPLY        reduce using rule 62 (TA -> TA DIVISION FA .)
    DIVISION        reduce using rule 62 (TA -> TA DIVISION FA .)
    PLUS            reduce using rule 62 (TA -> TA DIVISION FA .)
    MINUS           reduce using rule 62 (TA -> TA DIVISION FA .)
    NOT_EQUAL       reduce using rule 62 (TA -> TA DIVISION FA .)
    LOWER_THAN      reduce using rule 62 (TA -> TA DIVISION FA .)
    BIGGER_THAN     reduce using rule 62 (TA -> TA DIVISION FA .)
    EQUAL_EQUAL     reduce using rule 62 (TA -> TA DIVISION FA .)
    SEMICOLON       reduce using rule 62 (TA -> TA DIVISION FA .)
    COMA            reduce using rule 62 (TA -> TA DIVISION FA .)
    CLOSING_PARENTH reduce using rule 62 (TA -> TA DIVISION FA .)
    AND             reduce using rule 62 (TA -> TA DIVISION FA .)
    OR              reduce using rule 62 (TA -> TA DIVISION FA .)


state 60

    (54) EA -> EA PLUS TA .
    (61) TA -> TA . MULTIPLY FA
    (62) TA -> TA . DIVISION FA

    CLOSING_PARENTH reduce using rule 54 (EA -> EA PLUS TA .)
    PLUS            reduce using rule 54 (EA -> EA PLUS TA .)
    MINUS           reduce using rule 54 (EA -> EA PLUS TA .)
    NOT_EQUAL       reduce using rule 54 (EA -> EA PLUS TA .)
    LOWER_THAN      reduce using rule 54 (EA -> EA PLUS TA .)
    BIGGER_THAN     reduce using rule 54 (EA -> EA PLUS TA .)
    EQUAL_EQUAL     reduce using rule 54 (EA -> EA PLUS TA .)
    SEMICOLON       reduce using rule 54 (EA -> EA PLUS TA .)
    COMA            reduce using rule 54 (EA -> EA PLUS TA .)
    AND             reduce using rule 54 (EA -> EA PLUS TA .)
    OR              reduce using rule 54 (EA -> EA PLUS TA .)
    MULTIPLY        shift and go to state 48
    DIVISION        shift and go to state 49


state 61

    (55) EA -> EA MINUS TA .
    (61) TA -> TA . MULTIPLY FA
    (62) TA -> TA . DIVISION FA

    CLOSING_PARENTH reduce using rule 55 (EA -> EA MINUS TA .)
    PLUS            reduce using rule 55 (EA -> EA MINUS TA .)
    MINUS           reduce using rule 55 (EA -> EA MINUS TA .)
    NOT_EQUAL       reduce using rule 55 (EA -> EA MINUS TA .)
    LOWER_THAN      reduce using rule 55 (EA -> EA MINUS TA .)
    BIGGER_THAN     reduce using rule 55 (EA -> EA MINUS TA .)
    EQUAL_EQUAL     reduce using rule 55 (EA -> EA MINUS TA .)
    SEMICOLON       reduce using rule 55 (EA -> EA MINUS TA .)
    COMA            reduce using rule 55 (EA -> EA MINUS TA .)
    AND             reduce using rule 55 (EA -> EA MINUS TA .)
    OR              reduce using rule 55 (EA -> EA MINUS TA .)
    MULTIPLY        shift and go to state 48
    DIVISION        shift and go to state 49


state 62

    (59) FA -> OPEN_PARENTH EA CLOSING_PARENTH .

    MULTIPLY        reduce using rule 59 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    DIVISION        reduce using rule 59 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    CLOSING_PARENTH reduce using rule 59 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    PLUS            reduce using rule 59 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    MINUS           reduce using rule 59 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    NOT_EQUAL       reduce using rule 59 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    LOWER_THAN      reduce using rule 59 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    BIGGER_THAN     reduce using rule 59 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    EQUAL_EQUAL     reduce using rule 59 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    SEMICOLON       reduce using rule 59 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    COMA            reduce using rule 59 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    AND             reduce using rule 59 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    OR              reduce using rule 59 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)


state 63

    (78) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .

    OPEN_BRACKET    reduce using rule 78 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 78 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    MULTIPLY        reduce using rule 78 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    DIVISION        reduce using rule 78 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    PLUS            reduce using rule 78 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    MINUS           reduce using rule 78 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    COMA            reduce using rule 78 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    CLOSING_PARENTH reduce using rule 78 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    NOT_EQUAL       reduce using rule 78 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    LOWER_THAN      reduce using rule 78 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    BIGGER_THAN     reduce using rule 78 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    EQUAL_EQUAL     reduce using rule 78 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    AND             reduce using rule 78 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    OR              reduce using rule 78 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)


state 64

    (80) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .

    OPEN_BRACKET    reduce using rule 80 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 80 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    MULTIPLY        reduce using rule 80 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    DIVISION        reduce using rule 80 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    PLUS            reduce using rule 80 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    MINUS           reduce using rule 80 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    COMA            reduce using rule 80 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    CLOSING_PARENTH reduce using rule 80 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    NOT_EQUAL       reduce using rule 80 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    LOWER_THAN      reduce using rule 80 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    BIGGER_THAN     reduce using rule 80 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    EQUAL_EQUAL     reduce using rule 80 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    AND             reduce using rule 80 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    OR              reduce using rule 80 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)


state 65

    (12) FUNC -> FUNCTION AUX_FUNC ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES . S CLOSING_BRACES RETURN IF_AUX3
    (20) S -> . STATEMENTS
    (21) S -> . S STATEMENTS
    (22) S -> .
    (23) STATEMENTS -> . VAR
    (24) STATEMENTS -> . IDSTAT
    (25) STATEMENTS -> . PRINTSTAT
    (26) STATEMENTS -> . READSTAT
    (27) STATEMENTS -> . IFSTAT
    (28) STATEMENTS -> . WHILESTAT
    (29) STATEMENTS -> . DOSTAT
    (30) STATEMENTS -> . FORSTAT
    (31) STATEMENTS -> . FUNCSTAT
    (32) STATEMENTS -> . INC_STAT
    (33) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (34) IDSTAT -> . ASSIGN SEMICOLON
    (35) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (36) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (37) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (38) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (39) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (44) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (47) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (48) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (49) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (50) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (51) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (18) TIPO -> . INT
    (19) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for READ resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for IF resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for DO resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for FOR resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for ID resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 6 (VAR -> .)
    PRINT           shift and go to state 71
    READ            shift and go to state 79
    IF              shift and go to state 72
    WHILE           shift and go to state 68
    DO              shift and go to state 77
    FOR             shift and go to state 76
    ID              shift and go to state 69
    INT             shift and go to state 5
    DOUBLE          shift and go to state 2

  ! CLOSING_BRACES  [ reduce using rule 22 (S -> .) ]
  ! PRINT           [ reduce using rule 22 (S -> .) ]
  ! READ            [ reduce using rule 22 (S -> .) ]
  ! IF              [ reduce using rule 22 (S -> .) ]
  ! WHILE           [ reduce using rule 22 (S -> .) ]
  ! DO              [ reduce using rule 22 (S -> .) ]
  ! FOR             [ reduce using rule 22 (S -> .) ]
  ! ID              [ reduce using rule 22 (S -> .) ]
  ! INT             [ reduce using rule 22 (S -> .) ]
  ! DOUBLE          [ reduce using rule 22 (S -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 33 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 33 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 33 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 33 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 33 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 33 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 33 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 33 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 33 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 33 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    DOSTAT                         shift and go to state 75
    PRINTSTAT                      shift and go to state 67
    FUNCSTAT                       shift and go to state 74
    VAR                            shift and go to state 78
    READSTAT                       shift and go to state 70
    S                              shift and go to state 87
    WHILESTAT                      shift and go to state 81
    INC_STAT                       shift and go to state 83
    STATEMENTS                     shift and go to state 73
    IFSTAT                         shift and go to state 84
    IDSTAT                         shift and go to state 85
    FORSTAT                        shift and go to state 82
    TIPO                           shift and go to state 4
    ASSIGN                         shift and go to state 86

state 66

    (13) FUNC -> FUNC AUX_FUNC FUNCTION ID OPEN_PARENTH CLOSING_PARENTH . OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3

    OPEN_BRACES     shift and go to state 88


state 67

    (25) STATEMENTS -> PRINTSTAT .

    CLOSING_BRACES  reduce using rule 25 (STATEMENTS -> PRINTSTAT .)
    PRINT           reduce using rule 25 (STATEMENTS -> PRINTSTAT .)
    READ            reduce using rule 25 (STATEMENTS -> PRINTSTAT .)
    IF              reduce using rule 25 (STATEMENTS -> PRINTSTAT .)
    WHILE           reduce using rule 25 (STATEMENTS -> PRINTSTAT .)
    DO              reduce using rule 25 (STATEMENTS -> PRINTSTAT .)
    FOR             reduce using rule 25 (STATEMENTS -> PRINTSTAT .)
    ID              reduce using rule 25 (STATEMENTS -> PRINTSTAT .)
    INT             reduce using rule 25 (STATEMENTS -> PRINTSTAT .)
    DOUBLE          reduce using rule 25 (STATEMENTS -> PRINTSTAT .)


state 68

    (44) WHILESTAT -> WHILE . WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (45) WHILE_AUX_1 -> . empty
    (43) empty -> .

    OPEN_PARENTH    reduce using rule 43 (empty -> .)

    WHILE_AUX_1                    shift and go to state 90
    empty                          shift and go to state 89

state 69

    (49) FUNCSTAT -> ID . OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (50) INC_STAT -> ID . PLUSPLUS SEMICOLON
    (51) INC_STAT -> ID . MINUSMINUS SEMICOLON
    (11) ASSIGN -> ID . EQUAL EA

    OPEN_PARENTH    shift and go to state 91
    PLUSPLUS        shift and go to state 92
    MINUSMINUS      shift and go to state 93
    EQUAL           shift and go to state 24


state 70

    (26) STATEMENTS -> READSTAT .

    CLOSING_BRACES  reduce using rule 26 (STATEMENTS -> READSTAT .)
    PRINT           reduce using rule 26 (STATEMENTS -> READSTAT .)
    READ            reduce using rule 26 (STATEMENTS -> READSTAT .)
    IF              reduce using rule 26 (STATEMENTS -> READSTAT .)
    WHILE           reduce using rule 26 (STATEMENTS -> READSTAT .)
    DO              reduce using rule 26 (STATEMENTS -> READSTAT .)
    FOR             reduce using rule 26 (STATEMENTS -> READSTAT .)
    ID              reduce using rule 26 (STATEMENTS -> READSTAT .)
    INT             reduce using rule 26 (STATEMENTS -> READSTAT .)
    DOUBLE          reduce using rule 26 (STATEMENTS -> READSTAT .)


state 71

    (35) PRINTSTAT -> PRINT . OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (36) PRINTSTAT -> PRINT . OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON

    OPEN_PARENTH    shift and go to state 94


state 72

    (38) IFSTAT -> IF . OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (39) IFSTAT -> IF . OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3

    OPEN_PARENTH    shift and go to state 95


state 73

    (20) S -> STATEMENTS .

    CLOSING_BRACES  reduce using rule 20 (S -> STATEMENTS .)
    PRINT           reduce using rule 20 (S -> STATEMENTS .)
    READ            reduce using rule 20 (S -> STATEMENTS .)
    IF              reduce using rule 20 (S -> STATEMENTS .)
    WHILE           reduce using rule 20 (S -> STATEMENTS .)
    DO              reduce using rule 20 (S -> STATEMENTS .)
    FOR             reduce using rule 20 (S -> STATEMENTS .)
    ID              reduce using rule 20 (S -> STATEMENTS .)
    INT             reduce using rule 20 (S -> STATEMENTS .)
    DOUBLE          reduce using rule 20 (S -> STATEMENTS .)


state 74

    (31) STATEMENTS -> FUNCSTAT .

    CLOSING_BRACES  reduce using rule 31 (STATEMENTS -> FUNCSTAT .)
    PRINT           reduce using rule 31 (STATEMENTS -> FUNCSTAT .)
    READ            reduce using rule 31 (STATEMENTS -> FUNCSTAT .)
    IF              reduce using rule 31 (STATEMENTS -> FUNCSTAT .)
    WHILE           reduce using rule 31 (STATEMENTS -> FUNCSTAT .)
    DO              reduce using rule 31 (STATEMENTS -> FUNCSTAT .)
    FOR             reduce using rule 31 (STATEMENTS -> FUNCSTAT .)
    ID              reduce using rule 31 (STATEMENTS -> FUNCSTAT .)
    INT             reduce using rule 31 (STATEMENTS -> FUNCSTAT .)
    DOUBLE          reduce using rule 31 (STATEMENTS -> FUNCSTAT .)


state 75

    (29) STATEMENTS -> DOSTAT .

    CLOSING_BRACES  reduce using rule 29 (STATEMENTS -> DOSTAT .)
    PRINT           reduce using rule 29 (STATEMENTS -> DOSTAT .)
    READ            reduce using rule 29 (STATEMENTS -> DOSTAT .)
    IF              reduce using rule 29 (STATEMENTS -> DOSTAT .)
    WHILE           reduce using rule 29 (STATEMENTS -> DOSTAT .)
    DO              reduce using rule 29 (STATEMENTS -> DOSTAT .)
    FOR             reduce using rule 29 (STATEMENTS -> DOSTAT .)
    ID              reduce using rule 29 (STATEMENTS -> DOSTAT .)
    INT             reduce using rule 29 (STATEMENTS -> DOSTAT .)
    DOUBLE          reduce using rule 29 (STATEMENTS -> DOSTAT .)


state 76

    (48) FORSTAT -> FOR . OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S

    OPEN_PARENTH    shift and go to state 96


state 77

    (47) DOSTAT -> DO . WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (45) WHILE_AUX_1 -> . empty
    (43) empty -> .

    OPEN_BRACES     reduce using rule 43 (empty -> .)

    empty                          shift and go to state 89
    WHILE_AUX_1                    shift and go to state 97

state 78

    (23) STATEMENTS -> VAR .
    (4) VAR -> VAR . TIPO DECLARE SEMICOLON
    (5) VAR -> VAR . TIPO MAT SEMICOLON
    (18) TIPO -> . INT
    (19) TIPO -> . DOUBLE

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 23 (STATEMENTS -> VAR .)
    PRINT           reduce using rule 23 (STATEMENTS -> VAR .)
    READ            reduce using rule 23 (STATEMENTS -> VAR .)
    IF              reduce using rule 23 (STATEMENTS -> VAR .)
    WHILE           reduce using rule 23 (STATEMENTS -> VAR .)
    DO              reduce using rule 23 (STATEMENTS -> VAR .)
    FOR             reduce using rule 23 (STATEMENTS -> VAR .)
    ID              reduce using rule 23 (STATEMENTS -> VAR .)
    INT             shift and go to state 5
    DOUBLE          shift and go to state 2

  ! INT             [ reduce using rule 23 (STATEMENTS -> VAR .) ]
  ! DOUBLE          [ reduce using rule 23 (STATEMENTS -> VAR .) ]

    TIPO                           shift and go to state 8

state 79

    (37) READSTAT -> READ . OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON

    OPEN_PARENTH    shift and go to state 98


state 80

    (17) M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S . CLOSING_BRACES
    (21) S -> S . STATEMENTS
    (23) STATEMENTS -> . VAR
    (24) STATEMENTS -> . IDSTAT
    (25) STATEMENTS -> . PRINTSTAT
    (26) STATEMENTS -> . READSTAT
    (27) STATEMENTS -> . IFSTAT
    (28) STATEMENTS -> . WHILESTAT
    (29) STATEMENTS -> . DOSTAT
    (30) STATEMENTS -> . FORSTAT
    (31) STATEMENTS -> . FUNCSTAT
    (32) STATEMENTS -> . INC_STAT
    (33) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (34) IDSTAT -> . ASSIGN SEMICOLON
    (35) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (36) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (37) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (38) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (39) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (44) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (47) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (48) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (49) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (50) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (51) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (18) TIPO -> . INT
    (19) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  shift and go to state 100
    PRINT           shift and go to state 71
    READ            shift and go to state 79
    IF              shift and go to state 72
    WHILE           shift and go to state 68
    DO              shift and go to state 77
    FOR             shift and go to state 76
    ID              shift and go to state 69
    INT             shift and go to state 5
    DOUBLE          shift and go to state 2

  ! CLOSING_BRACES  [ reduce using rule 33 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 33 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 33 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 33 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 33 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 33 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 33 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 33 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 33 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 33 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    DOSTAT                         shift and go to state 75
    PRINTSTAT                      shift and go to state 67
    FUNCSTAT                       shift and go to state 74
    VAR                            shift and go to state 78
    READSTAT                       shift and go to state 70
    WHILESTAT                      shift and go to state 81
    INC_STAT                       shift and go to state 83
    STATEMENTS                     shift and go to state 99
    IFSTAT                         shift and go to state 84
    IDSTAT                         shift and go to state 85
    FORSTAT                        shift and go to state 82
    TIPO                           shift and go to state 4
    ASSIGN                         shift and go to state 86

state 81

    (28) STATEMENTS -> WHILESTAT .

    CLOSING_BRACES  reduce using rule 28 (STATEMENTS -> WHILESTAT .)
    PRINT           reduce using rule 28 (STATEMENTS -> WHILESTAT .)
    READ            reduce using rule 28 (STATEMENTS -> WHILESTAT .)
    IF              reduce using rule 28 (STATEMENTS -> WHILESTAT .)
    WHILE           reduce using rule 28 (STATEMENTS -> WHILESTAT .)
    DO              reduce using rule 28 (STATEMENTS -> WHILESTAT .)
    FOR             reduce using rule 28 (STATEMENTS -> WHILESTAT .)
    ID              reduce using rule 28 (STATEMENTS -> WHILESTAT .)
    INT             reduce using rule 28 (STATEMENTS -> WHILESTAT .)
    DOUBLE          reduce using rule 28 (STATEMENTS -> WHILESTAT .)


state 82

    (30) STATEMENTS -> FORSTAT .

    CLOSING_BRACES  reduce using rule 30 (STATEMENTS -> FORSTAT .)
    PRINT           reduce using rule 30 (STATEMENTS -> FORSTAT .)
    READ            reduce using rule 30 (STATEMENTS -> FORSTAT .)
    IF              reduce using rule 30 (STATEMENTS -> FORSTAT .)
    WHILE           reduce using rule 30 (STATEMENTS -> FORSTAT .)
    DO              reduce using rule 30 (STATEMENTS -> FORSTAT .)
    FOR             reduce using rule 30 (STATEMENTS -> FORSTAT .)
    ID              reduce using rule 30 (STATEMENTS -> FORSTAT .)
    INT             reduce using rule 30 (STATEMENTS -> FORSTAT .)
    DOUBLE          reduce using rule 30 (STATEMENTS -> FORSTAT .)


state 83

    (32) STATEMENTS -> INC_STAT .

    CLOSING_BRACES  reduce using rule 32 (STATEMENTS -> INC_STAT .)
    PRINT           reduce using rule 32 (STATEMENTS -> INC_STAT .)
    READ            reduce using rule 32 (STATEMENTS -> INC_STAT .)
    IF              reduce using rule 32 (STATEMENTS -> INC_STAT .)
    WHILE           reduce using rule 32 (STATEMENTS -> INC_STAT .)
    DO              reduce using rule 32 (STATEMENTS -> INC_STAT .)
    FOR             reduce using rule 32 (STATEMENTS -> INC_STAT .)
    ID              reduce using rule 32 (STATEMENTS -> INC_STAT .)
    INT             reduce using rule 32 (STATEMENTS -> INC_STAT .)
    DOUBLE          reduce using rule 32 (STATEMENTS -> INC_STAT .)


state 84

    (27) STATEMENTS -> IFSTAT .

    CLOSING_BRACES  reduce using rule 27 (STATEMENTS -> IFSTAT .)
    PRINT           reduce using rule 27 (STATEMENTS -> IFSTAT .)
    READ            reduce using rule 27 (STATEMENTS -> IFSTAT .)
    IF              reduce using rule 27 (STATEMENTS -> IFSTAT .)
    WHILE           reduce using rule 27 (STATEMENTS -> IFSTAT .)
    DO              reduce using rule 27 (STATEMENTS -> IFSTAT .)
    FOR             reduce using rule 27 (STATEMENTS -> IFSTAT .)
    ID              reduce using rule 27 (STATEMENTS -> IFSTAT .)
    INT             reduce using rule 27 (STATEMENTS -> IFSTAT .)
    DOUBLE          reduce using rule 27 (STATEMENTS -> IFSTAT .)


state 85

    (24) STATEMENTS -> IDSTAT .

    CLOSING_BRACES  reduce using rule 24 (STATEMENTS -> IDSTAT .)
    PRINT           reduce using rule 24 (STATEMENTS -> IDSTAT .)
    READ            reduce using rule 24 (STATEMENTS -> IDSTAT .)
    IF              reduce using rule 24 (STATEMENTS -> IDSTAT .)
    WHILE           reduce using rule 24 (STATEMENTS -> IDSTAT .)
    DO              reduce using rule 24 (STATEMENTS -> IDSTAT .)
    FOR             reduce using rule 24 (STATEMENTS -> IDSTAT .)
    ID              reduce using rule 24 (STATEMENTS -> IDSTAT .)
    INT             reduce using rule 24 (STATEMENTS -> IDSTAT .)
    DOUBLE          reduce using rule 24 (STATEMENTS -> IDSTAT .)


state 86

    (34) IDSTAT -> ASSIGN . SEMICOLON

    SEMICOLON       shift and go to state 101


state 87

    (12) FUNC -> FUNCTION AUX_FUNC ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S . CLOSING_BRACES RETURN IF_AUX3
    (21) S -> S . STATEMENTS
    (23) STATEMENTS -> . VAR
    (24) STATEMENTS -> . IDSTAT
    (25) STATEMENTS -> . PRINTSTAT
    (26) STATEMENTS -> . READSTAT
    (27) STATEMENTS -> . IFSTAT
    (28) STATEMENTS -> . WHILESTAT
    (29) STATEMENTS -> . DOSTAT
    (30) STATEMENTS -> . FORSTAT
    (31) STATEMENTS -> . FUNCSTAT
    (32) STATEMENTS -> . INC_STAT
    (33) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (34) IDSTAT -> . ASSIGN SEMICOLON
    (35) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (36) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (37) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (38) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (39) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (44) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (47) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (48) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (49) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (50) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (51) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (18) TIPO -> . INT
    (19) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  shift and go to state 102
    PRINT           shift and go to state 71
    READ            shift and go to state 79
    IF              shift and go to state 72
    WHILE           shift and go to state 68
    DO              shift and go to state 77
    FOR             shift and go to state 76
    ID              shift and go to state 69
    INT             shift and go to state 5
    DOUBLE          shift and go to state 2

  ! CLOSING_BRACES  [ reduce using rule 33 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 33 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 33 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 33 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 33 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 33 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 33 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 33 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 33 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 33 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    DOSTAT                         shift and go to state 75
    PRINTSTAT                      shift and go to state 67
    FUNCSTAT                       shift and go to state 74
    VAR                            shift and go to state 78
    READSTAT                       shift and go to state 70
    WHILESTAT                      shift and go to state 81
    INC_STAT                       shift and go to state 83
    STATEMENTS                     shift and go to state 99
    IFSTAT                         shift and go to state 84
    IDSTAT                         shift and go to state 85
    FORSTAT                        shift and go to state 82
    TIPO                           shift and go to state 4
    ASSIGN                         shift and go to state 86

state 88

    (13) FUNC -> FUNC AUX_FUNC FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES . S CLOSING_BRACES RETURN IF_AUX3
    (20) S -> . STATEMENTS
    (21) S -> . S STATEMENTS
    (22) S -> .
    (23) STATEMENTS -> . VAR
    (24) STATEMENTS -> . IDSTAT
    (25) STATEMENTS -> . PRINTSTAT
    (26) STATEMENTS -> . READSTAT
    (27) STATEMENTS -> . IFSTAT
    (28) STATEMENTS -> . WHILESTAT
    (29) STATEMENTS -> . DOSTAT
    (30) STATEMENTS -> . FORSTAT
    (31) STATEMENTS -> . FUNCSTAT
    (32) STATEMENTS -> . INC_STAT
    (33) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (34) IDSTAT -> . ASSIGN SEMICOLON
    (35) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (36) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (37) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (38) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (39) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (44) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (47) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (48) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (49) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (50) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (51) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (18) TIPO -> . INT
    (19) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for READ resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for IF resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for DO resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for FOR resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for ID resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 6 (VAR -> .)
    PRINT           shift and go to state 71
    READ            shift and go to state 79
    IF              shift and go to state 72
    WHILE           shift and go to state 68
    DO              shift and go to state 77
    FOR             shift and go to state 76
    ID              shift and go to state 69
    INT             shift and go to state 5
    DOUBLE          shift and go to state 2

  ! CLOSING_BRACES  [ reduce using rule 22 (S -> .) ]
  ! PRINT           [ reduce using rule 22 (S -> .) ]
  ! READ            [ reduce using rule 22 (S -> .) ]
  ! IF              [ reduce using rule 22 (S -> .) ]
  ! WHILE           [ reduce using rule 22 (S -> .) ]
  ! DO              [ reduce using rule 22 (S -> .) ]
  ! FOR             [ reduce using rule 22 (S -> .) ]
  ! ID              [ reduce using rule 22 (S -> .) ]
  ! INT             [ reduce using rule 22 (S -> .) ]
  ! DOUBLE          [ reduce using rule 22 (S -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 33 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 33 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 33 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 33 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 33 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 33 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 33 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 33 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 33 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 33 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    DOSTAT                         shift and go to state 75
    PRINTSTAT                      shift and go to state 67
    FUNCSTAT                       shift and go to state 74
    VAR                            shift and go to state 78
    READSTAT                       shift and go to state 70
    S                              shift and go to state 103
    WHILESTAT                      shift and go to state 81
    INC_STAT                       shift and go to state 83
    STATEMENTS                     shift and go to state 73
    IFSTAT                         shift and go to state 84
    IDSTAT                         shift and go to state 85
    FORSTAT                        shift and go to state 82
    TIPO                           shift and go to state 4
    ASSIGN                         shift and go to state 86

state 89

    (45) WHILE_AUX_1 -> empty .

    OPEN_BRACES     reduce using rule 45 (WHILE_AUX_1 -> empty .)
    OPEN_PARENTH    reduce using rule 45 (WHILE_AUX_1 -> empty .)
    NOT             reduce using rule 45 (WHILE_AUX_1 -> empty .)
    CONSTANT        reduce using rule 45 (WHILE_AUX_1 -> empty .)
    ID              reduce using rule 45 (WHILE_AUX_1 -> empty .)


state 90

    (44) WHILESTAT -> WHILE WHILE_AUX_1 . OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S

    OPEN_PARENTH    shift and go to state 104


state 91

    (49) FUNCSTAT -> ID OPEN_PARENTH . CLOSING_PARENTH SEMICOLON

    CLOSING_PARENTH shift and go to state 105


state 92

    (50) INC_STAT -> ID PLUSPLUS . SEMICOLON

    SEMICOLON       shift and go to state 106


state 93

    (51) INC_STAT -> ID MINUSMINUS . SEMICOLON

    SEMICOLON       shift and go to state 107


state 94

    (35) PRINTSTAT -> PRINT OPEN_PARENTH . EA CLOSING_PARENTH SEMICOLON
    (36) PRINTSTAT -> PRINT OPEN_PARENTH . STRING CLOSING_PARENTH SEMICOLON
    (53) EA -> . TA
    (54) EA -> . EA PLUS TA
    (55) EA -> . EA MINUS TA
    (60) TA -> . FA
    (61) TA -> . TA MULTIPLY FA
    (62) TA -> . TA DIVISION FA
    (56) FA -> . CONSTANT
    (57) FA -> . ID
    (58) FA -> . MAT
    (59) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (76) MAT -> . ID MAT_BRACKET

    STRING          shift and go to state 108
    CONSTANT        shift and go to state 41
    ID              shift and go to state 38
    OPEN_PARENTH    shift and go to state 39

    FA                             shift and go to state 36
    EA                             shift and go to state 109
    TA                             shift and go to state 35
    MAT                            shift and go to state 40

state 95

    (38) IFSTAT -> IF OPEN_PARENTH . EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (39) IFSTAT -> IF OPEN_PARENTH . EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (63) EL -> . TL
    (64) EL -> . EL OR TL
    (65) TL -> . FL
    (66) TL -> . TL AND FL
    (67) FL -> . NL OPERATORS NL
    (68) FL -> . EA OPERATORS EA
    (69) FL -> . NL
    (70) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (71) NL -> . NOT EL
    (53) EA -> . TA
    (54) EA -> . EA PLUS TA
    (55) EA -> . EA MINUS TA
    (60) TA -> . FA
    (61) TA -> . TA MULTIPLY FA
    (62) TA -> . TA DIVISION FA
    (56) FA -> . CONSTANT
    (57) FA -> . ID
    (58) FA -> . MAT
    (59) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (76) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 115
    NOT             shift and go to state 113
    CONSTANT        shift and go to state 41
    ID              shift and go to state 38

    TL                             shift and go to state 116
    EL                             shift and go to state 110
    EA                             shift and go to state 111
    MAT                            shift and go to state 40
    FA                             shift and go to state 36
    NL                             shift and go to state 112
    TA                             shift and go to state 35
    FL                             shift and go to state 114

state 96

    (48) FORSTAT -> FOR OPEN_PARENTH . ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (11) ASSIGN -> . ID EQUAL EA

    ID              shift and go to state 117

    ASSIGN                         shift and go to state 118

state 97

    (47) DOSTAT -> DO WHILE_AUX_1 . IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (52) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 120

    IN_S                           shift and go to state 119

state 98

    (37) READSTAT -> READ OPEN_PARENTH . EA CLOSING_PARENTH SEMICOLON
    (53) EA -> . TA
    (54) EA -> . EA PLUS TA
    (55) EA -> . EA MINUS TA
    (60) TA -> . FA
    (61) TA -> . TA MULTIPLY FA
    (62) TA -> . TA DIVISION FA
    (56) FA -> . CONSTANT
    (57) FA -> . ID
    (58) FA -> . MAT
    (59) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (76) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 41
    ID              shift and go to state 38
    OPEN_PARENTH    shift and go to state 39

    FA                             shift and go to state 36
    EA                             shift and go to state 121
    TA                             shift and go to state 35
    MAT                            shift and go to state 40

state 99

    (21) S -> S STATEMENTS .

    CLOSING_BRACES  reduce using rule 21 (S -> S STATEMENTS .)
    PRINT           reduce using rule 21 (S -> S STATEMENTS .)
    READ            reduce using rule 21 (S -> S STATEMENTS .)
    IF              reduce using rule 21 (S -> S STATEMENTS .)
    WHILE           reduce using rule 21 (S -> S STATEMENTS .)
    DO              reduce using rule 21 (S -> S STATEMENTS .)
    FOR             reduce using rule 21 (S -> S STATEMENTS .)
    ID              reduce using rule 21 (S -> S STATEMENTS .)
    INT             reduce using rule 21 (S -> S STATEMENTS .)
    DOUBLE          reduce using rule 21 (S -> S STATEMENTS .)


state 100

    (17) M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES .

    $end            reduce using rule 17 (M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES .)


state 101

    (34) IDSTAT -> ASSIGN SEMICOLON .

    CLOSING_BRACES  reduce using rule 34 (IDSTAT -> ASSIGN SEMICOLON .)
    PRINT           reduce using rule 34 (IDSTAT -> ASSIGN SEMICOLON .)
    READ            reduce using rule 34 (IDSTAT -> ASSIGN SEMICOLON .)
    IF              reduce using rule 34 (IDSTAT -> ASSIGN SEMICOLON .)
    WHILE           reduce using rule 34 (IDSTAT -> ASSIGN SEMICOLON .)
    DO              reduce using rule 34 (IDSTAT -> ASSIGN SEMICOLON .)
    FOR             reduce using rule 34 (IDSTAT -> ASSIGN SEMICOLON .)
    ID              reduce using rule 34 (IDSTAT -> ASSIGN SEMICOLON .)
    INT             reduce using rule 34 (IDSTAT -> ASSIGN SEMICOLON .)
    DOUBLE          reduce using rule 34 (IDSTAT -> ASSIGN SEMICOLON .)


state 102

    (12) FUNC -> FUNCTION AUX_FUNC ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES . RETURN IF_AUX3
    (15) RETURN -> . empty
    (43) empty -> .

    MAIN            reduce using rule 43 (empty -> .)
    FUNCTION        reduce using rule 43 (empty -> .)

    empty                          shift and go to state 123
    RETURN                         shift and go to state 122

state 103

    (13) FUNC -> FUNC AUX_FUNC FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S . CLOSING_BRACES RETURN IF_AUX3
    (21) S -> S . STATEMENTS
    (23) STATEMENTS -> . VAR
    (24) STATEMENTS -> . IDSTAT
    (25) STATEMENTS -> . PRINTSTAT
    (26) STATEMENTS -> . READSTAT
    (27) STATEMENTS -> . IFSTAT
    (28) STATEMENTS -> . WHILESTAT
    (29) STATEMENTS -> . DOSTAT
    (30) STATEMENTS -> . FORSTAT
    (31) STATEMENTS -> . FUNCSTAT
    (32) STATEMENTS -> . INC_STAT
    (33) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (34) IDSTAT -> . ASSIGN SEMICOLON
    (35) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (36) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (37) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (38) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (39) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (44) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (47) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (48) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (49) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (50) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (51) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (18) TIPO -> . INT
    (19) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  shift and go to state 124
    PRINT           shift and go to state 71
    READ            shift and go to state 79
    IF              shift and go to state 72
    WHILE           shift and go to state 68
    DO              shift and go to state 77
    FOR             shift and go to state 76
    ID              shift and go to state 69
    INT             shift and go to state 5
    DOUBLE          shift and go to state 2

  ! CLOSING_BRACES  [ reduce using rule 33 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 33 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 33 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 33 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 33 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 33 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 33 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 33 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 33 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 33 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    DOSTAT                         shift and go to state 75
    PRINTSTAT                      shift and go to state 67
    FUNCSTAT                       shift and go to state 74
    VAR                            shift and go to state 78
    READSTAT                       shift and go to state 70
    WHILESTAT                      shift and go to state 81
    INC_STAT                       shift and go to state 83
    STATEMENTS                     shift and go to state 99
    IFSTAT                         shift and go to state 84
    IDSTAT                         shift and go to state 85
    FORSTAT                        shift and go to state 82
    TIPO                           shift and go to state 4
    ASSIGN                         shift and go to state 86

state 104

    (44) WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH . EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (63) EL -> . TL
    (64) EL -> . EL OR TL
    (65) TL -> . FL
    (66) TL -> . TL AND FL
    (67) FL -> . NL OPERATORS NL
    (68) FL -> . EA OPERATORS EA
    (69) FL -> . NL
    (70) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (71) NL -> . NOT EL
    (53) EA -> . TA
    (54) EA -> . EA PLUS TA
    (55) EA -> . EA MINUS TA
    (60) TA -> . FA
    (61) TA -> . TA MULTIPLY FA
    (62) TA -> . TA DIVISION FA
    (56) FA -> . CONSTANT
    (57) FA -> . ID
    (58) FA -> . MAT
    (59) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (76) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 115
    NOT             shift and go to state 113
    CONSTANT        shift and go to state 41
    ID              shift and go to state 38

    TL                             shift and go to state 116
    FA                             shift and go to state 36
    EA                             shift and go to state 111
    EL                             shift and go to state 125
    MAT                            shift and go to state 40
    NL                             shift and go to state 112
    TA                             shift and go to state 35
    FL                             shift and go to state 114

state 105

    (49) FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 126


state 106

    (50) INC_STAT -> ID PLUSPLUS SEMICOLON .

    CLOSING_BRACES  reduce using rule 50 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    PRINT           reduce using rule 50 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    READ            reduce using rule 50 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    IF              reduce using rule 50 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    WHILE           reduce using rule 50 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    DO              reduce using rule 50 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    FOR             reduce using rule 50 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    ID              reduce using rule 50 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    INT             reduce using rule 50 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    DOUBLE          reduce using rule 50 (INC_STAT -> ID PLUSPLUS SEMICOLON .)


state 107

    (51) INC_STAT -> ID MINUSMINUS SEMICOLON .

    CLOSING_BRACES  reduce using rule 51 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    PRINT           reduce using rule 51 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    READ            reduce using rule 51 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    IF              reduce using rule 51 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    WHILE           reduce using rule 51 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    DO              reduce using rule 51 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    FOR             reduce using rule 51 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    ID              reduce using rule 51 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    INT             reduce using rule 51 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    DOUBLE          reduce using rule 51 (INC_STAT -> ID MINUSMINUS SEMICOLON .)


state 108

    (36) PRINTSTAT -> PRINT OPEN_PARENTH STRING . CLOSING_PARENTH SEMICOLON

    CLOSING_PARENTH shift and go to state 127


state 109

    (35) PRINTSTAT -> PRINT OPEN_PARENTH EA . CLOSING_PARENTH SEMICOLON
    (54) EA -> EA . PLUS TA
    (55) EA -> EA . MINUS TA

    CLOSING_PARENTH shift and go to state 128
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51


state 110

    (38) IFSTAT -> IF OPEN_PARENTH EL . CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (39) IFSTAT -> IF OPEN_PARENTH EL . CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (64) EL -> EL . OR TL

    CLOSING_PARENTH shift and go to state 129
    OR              shift and go to state 130


state 111

    (68) FL -> EA . OPERATORS EA
    (54) EA -> EA . PLUS TA
    (55) EA -> EA . MINUS TA
    (72) OPERATORS -> . NOT_EQUAL
    (73) OPERATORS -> . LOWER_THAN
    (74) OPERATORS -> . BIGGER_THAN
    (75) OPERATORS -> . EQUAL_EQUAL

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    NOT_EQUAL       shift and go to state 131
    LOWER_THAN      shift and go to state 134
    BIGGER_THAN     shift and go to state 133
    EQUAL_EQUAL     shift and go to state 135

    OPERATORS                      shift and go to state 132

state 112

    (67) FL -> NL . OPERATORS NL
    (69) FL -> NL .
    (72) OPERATORS -> . NOT_EQUAL
    (73) OPERATORS -> . LOWER_THAN
    (74) OPERATORS -> . BIGGER_THAN
    (75) OPERATORS -> . EQUAL_EQUAL

  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LOWER_THAN resolved as shift
  ! shift/reduce conflict for BIGGER_THAN resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
    AND             reduce using rule 69 (FL -> NL .)
    OR              reduce using rule 69 (FL -> NL .)
    CLOSING_PARENTH reduce using rule 69 (FL -> NL .)
    SEMICOLON       reduce using rule 69 (FL -> NL .)
    NOT_EQUAL       shift and go to state 131
    LOWER_THAN      shift and go to state 134
    BIGGER_THAN     shift and go to state 133
    EQUAL_EQUAL     shift and go to state 135

  ! NOT_EQUAL       [ reduce using rule 69 (FL -> NL .) ]
  ! LOWER_THAN      [ reduce using rule 69 (FL -> NL .) ]
  ! BIGGER_THAN     [ reduce using rule 69 (FL -> NL .) ]
  ! EQUAL_EQUAL     [ reduce using rule 69 (FL -> NL .) ]

    OPERATORS                      shift and go to state 136

state 113

    (71) NL -> NOT . EL
    (63) EL -> . TL
    (64) EL -> . EL OR TL
    (65) TL -> . FL
    (66) TL -> . TL AND FL
    (67) FL -> . NL OPERATORS NL
    (68) FL -> . EA OPERATORS EA
    (69) FL -> . NL
    (70) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (71) NL -> . NOT EL
    (53) EA -> . TA
    (54) EA -> . EA PLUS TA
    (55) EA -> . EA MINUS TA
    (60) TA -> . FA
    (61) TA -> . TA MULTIPLY FA
    (62) TA -> . TA DIVISION FA
    (56) FA -> . CONSTANT
    (57) FA -> . ID
    (58) FA -> . MAT
    (59) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (76) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 115
    NOT             shift and go to state 113
    CONSTANT        shift and go to state 41
    ID              shift and go to state 38

    TL                             shift and go to state 116
    FA                             shift and go to state 36
    NL                             shift and go to state 112
    TA                             shift and go to state 35
    EL                             shift and go to state 137
    FL                             shift and go to state 114
    EA                             shift and go to state 111
    MAT                            shift and go to state 40

state 114

    (65) TL -> FL .

    AND             reduce using rule 65 (TL -> FL .)
    CLOSING_PARENTH reduce using rule 65 (TL -> FL .)
    OR              reduce using rule 65 (TL -> FL .)
    NOT_EQUAL       reduce using rule 65 (TL -> FL .)
    LOWER_THAN      reduce using rule 65 (TL -> FL .)
    BIGGER_THAN     reduce using rule 65 (TL -> FL .)
    EQUAL_EQUAL     reduce using rule 65 (TL -> FL .)
    SEMICOLON       reduce using rule 65 (TL -> FL .)


state 115

    (70) FL -> OPEN_PARENTH . EL CLOSING_PARENTH
    (59) FA -> OPEN_PARENTH . EA CLOSING_PARENTH
    (63) EL -> . TL
    (64) EL -> . EL OR TL
    (53) EA -> . TA
    (54) EA -> . EA PLUS TA
    (55) EA -> . EA MINUS TA
    (65) TL -> . FL
    (66) TL -> . TL AND FL
    (60) TA -> . FA
    (61) TA -> . TA MULTIPLY FA
    (62) TA -> . TA DIVISION FA
    (67) FL -> . NL OPERATORS NL
    (68) FL -> . EA OPERATORS EA
    (69) FL -> . NL
    (70) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (56) FA -> . CONSTANT
    (57) FA -> . ID
    (58) FA -> . MAT
    (59) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (71) NL -> . NOT EL
    (76) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 115
    CONSTANT        shift and go to state 41
    ID              shift and go to state 38
    NOT             shift and go to state 113

    TL                             shift and go to state 116
    FA                             shift and go to state 36
    NL                             shift and go to state 112
    TA                             shift and go to state 35
    EL                             shift and go to state 139
    FL                             shift and go to state 114
    EA                             shift and go to state 138
    MAT                            shift and go to state 40

state 116

    (63) EL -> TL .
    (66) TL -> TL . AND FL

  ! shift/reduce conflict for AND resolved as shift
    CLOSING_PARENTH reduce using rule 63 (EL -> TL .)
    OR              reduce using rule 63 (EL -> TL .)
    NOT_EQUAL       reduce using rule 63 (EL -> TL .)
    LOWER_THAN      reduce using rule 63 (EL -> TL .)
    BIGGER_THAN     reduce using rule 63 (EL -> TL .)
    EQUAL_EQUAL     reduce using rule 63 (EL -> TL .)
    SEMICOLON       reduce using rule 63 (EL -> TL .)
    AND             shift and go to state 140

  ! AND             [ reduce using rule 63 (EL -> TL .) ]


state 117

    (11) ASSIGN -> ID . EQUAL EA

    EQUAL           shift and go to state 24


state 118

    (48) FORSTAT -> FOR OPEN_PARENTH ASSIGN . SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S

    SEMICOLON       shift and go to state 141


state 119

    (47) DOSTAT -> DO WHILE_AUX_1 IN_S . WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON

    WHILE           shift and go to state 142


state 120

    (52) IN_S -> OPEN_BRACES . S CLOSING_BRACES
    (20) S -> . STATEMENTS
    (21) S -> . S STATEMENTS
    (22) S -> .
    (23) STATEMENTS -> . VAR
    (24) STATEMENTS -> . IDSTAT
    (25) STATEMENTS -> . PRINTSTAT
    (26) STATEMENTS -> . READSTAT
    (27) STATEMENTS -> . IFSTAT
    (28) STATEMENTS -> . WHILESTAT
    (29) STATEMENTS -> . DOSTAT
    (30) STATEMENTS -> . FORSTAT
    (31) STATEMENTS -> . FUNCSTAT
    (32) STATEMENTS -> . INC_STAT
    (33) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (34) IDSTAT -> . ASSIGN SEMICOLON
    (35) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (36) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (37) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (38) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (39) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (44) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (47) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (48) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (49) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (50) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (51) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (18) TIPO -> . INT
    (19) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for READ resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for IF resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for DO resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for FOR resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for ID resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 22 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 6 (VAR -> .)
    PRINT           shift and go to state 71
    READ            shift and go to state 79
    IF              shift and go to state 72
    WHILE           shift and go to state 68
    DO              shift and go to state 77
    FOR             shift and go to state 76
    ID              shift and go to state 69
    INT             shift and go to state 5
    DOUBLE          shift and go to state 2

  ! CLOSING_BRACES  [ reduce using rule 22 (S -> .) ]
  ! PRINT           [ reduce using rule 22 (S -> .) ]
  ! READ            [ reduce using rule 22 (S -> .) ]
  ! IF              [ reduce using rule 22 (S -> .) ]
  ! WHILE           [ reduce using rule 22 (S -> .) ]
  ! DO              [ reduce using rule 22 (S -> .) ]
  ! FOR             [ reduce using rule 22 (S -> .) ]
  ! ID              [ reduce using rule 22 (S -> .) ]
  ! INT             [ reduce using rule 22 (S -> .) ]
  ! DOUBLE          [ reduce using rule 22 (S -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 33 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 33 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 33 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 33 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 33 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 33 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 33 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 33 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 33 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 33 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    DOSTAT                         shift and go to state 75
    PRINTSTAT                      shift and go to state 67
    FUNCSTAT                       shift and go to state 74
    VAR                            shift and go to state 78
    READSTAT                       shift and go to state 70
    S                              shift and go to state 143
    WHILESTAT                      shift and go to state 81
    INC_STAT                       shift and go to state 83
    STATEMENTS                     shift and go to state 73
    IFSTAT                         shift and go to state 84
    IDSTAT                         shift and go to state 85
    FORSTAT                        shift and go to state 82
    TIPO                           shift and go to state 4
    ASSIGN                         shift and go to state 86

state 121

    (37) READSTAT -> READ OPEN_PARENTH EA . CLOSING_PARENTH SEMICOLON
    (54) EA -> EA . PLUS TA
    (55) EA -> EA . MINUS TA

    CLOSING_PARENTH shift and go to state 144
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51


state 122

    (12) FUNC -> FUNCTION AUX_FUNC ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES RETURN . IF_AUX3
    (42) IF_AUX3 -> . empty
    (43) empty -> .

    MAIN            reduce using rule 43 (empty -> .)
    FUNCTION        reduce using rule 43 (empty -> .)

    empty                          shift and go to state 146
    IF_AUX3                        shift and go to state 145

state 123

    (15) RETURN -> empty .

    MAIN            reduce using rule 15 (RETURN -> empty .)
    FUNCTION        reduce using rule 15 (RETURN -> empty .)


state 124

    (13) FUNC -> FUNC AUX_FUNC FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES . RETURN IF_AUX3
    (15) RETURN -> . empty
    (43) empty -> .

    MAIN            reduce using rule 43 (empty -> .)
    FUNCTION        reduce using rule 43 (empty -> .)

    empty                          shift and go to state 123
    RETURN                         shift and go to state 147

state 125

    (44) WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL . CLOSING_PARENTH WHILE_AUX_2 IN_S
    (64) EL -> EL . OR TL

    CLOSING_PARENTH shift and go to state 148
    OR              shift and go to state 130


state 126

    (49) FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 49 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 49 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 49 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 49 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 49 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 49 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 49 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 49 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 49 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 49 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)


state 127

    (36) PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 149


state 128

    (35) PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 150


state 129

    (38) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH . IF_AUX1 IN_S IF_AUX3
    (39) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH . IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (40) IF_AUX1 -> . empty
    (43) empty -> .

    OPEN_BRACES     reduce using rule 43 (empty -> .)

    IF_AUX1                        shift and go to state 152
    empty                          shift and go to state 151

state 130

    (64) EL -> EL OR . TL
    (65) TL -> . FL
    (66) TL -> . TL AND FL
    (67) FL -> . NL OPERATORS NL
    (68) FL -> . EA OPERATORS EA
    (69) FL -> . NL
    (70) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (71) NL -> . NOT EL
    (53) EA -> . TA
    (54) EA -> . EA PLUS TA
    (55) EA -> . EA MINUS TA
    (60) TA -> . FA
    (61) TA -> . TA MULTIPLY FA
    (62) TA -> . TA DIVISION FA
    (56) FA -> . CONSTANT
    (57) FA -> . ID
    (58) FA -> . MAT
    (59) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (76) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 115
    NOT             shift and go to state 113
    CONSTANT        shift and go to state 41
    ID              shift and go to state 38

    TL                             shift and go to state 153
    FA                             shift and go to state 36
    NL                             shift and go to state 112
    TA                             shift and go to state 35
    FL                             shift and go to state 114
    EA                             shift and go to state 111
    MAT                            shift and go to state 40

state 131

    (72) OPERATORS -> NOT_EQUAL .

    CONSTANT        reduce using rule 72 (OPERATORS -> NOT_EQUAL .)
    ID              reduce using rule 72 (OPERATORS -> NOT_EQUAL .)
    OPEN_PARENTH    reduce using rule 72 (OPERATORS -> NOT_EQUAL .)
    NOT             reduce using rule 72 (OPERATORS -> NOT_EQUAL .)


state 132

    (68) FL -> EA OPERATORS . EA
    (53) EA -> . TA
    (54) EA -> . EA PLUS TA
    (55) EA -> . EA MINUS TA
    (60) TA -> . FA
    (61) TA -> . TA MULTIPLY FA
    (62) TA -> . TA DIVISION FA
    (56) FA -> . CONSTANT
    (57) FA -> . ID
    (58) FA -> . MAT
    (59) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (76) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 41
    ID              shift and go to state 38
    OPEN_PARENTH    shift and go to state 39

    TA                             shift and go to state 35
    MAT                            shift and go to state 40
    FA                             shift and go to state 36
    EA                             shift and go to state 154

state 133

    (74) OPERATORS -> BIGGER_THAN .

    CONSTANT        reduce using rule 74 (OPERATORS -> BIGGER_THAN .)
    ID              reduce using rule 74 (OPERATORS -> BIGGER_THAN .)
    OPEN_PARENTH    reduce using rule 74 (OPERATORS -> BIGGER_THAN .)
    NOT             reduce using rule 74 (OPERATORS -> BIGGER_THAN .)


state 134

    (73) OPERATORS -> LOWER_THAN .

    CONSTANT        reduce using rule 73 (OPERATORS -> LOWER_THAN .)
    ID              reduce using rule 73 (OPERATORS -> LOWER_THAN .)
    OPEN_PARENTH    reduce using rule 73 (OPERATORS -> LOWER_THAN .)
    NOT             reduce using rule 73 (OPERATORS -> LOWER_THAN .)


state 135

    (75) OPERATORS -> EQUAL_EQUAL .

    CONSTANT        reduce using rule 75 (OPERATORS -> EQUAL_EQUAL .)
    ID              reduce using rule 75 (OPERATORS -> EQUAL_EQUAL .)
    OPEN_PARENTH    reduce using rule 75 (OPERATORS -> EQUAL_EQUAL .)
    NOT             reduce using rule 75 (OPERATORS -> EQUAL_EQUAL .)


state 136

    (67) FL -> NL OPERATORS . NL
    (71) NL -> . NOT EL

    NOT             shift and go to state 113

    NL                             shift and go to state 155

state 137

    (71) NL -> NOT EL .
    (64) EL -> EL . OR TL

  ! shift/reduce conflict for OR resolved as shift
    AND             reduce using rule 71 (NL -> NOT EL .)
    NOT_EQUAL       reduce using rule 71 (NL -> NOT EL .)
    LOWER_THAN      reduce using rule 71 (NL -> NOT EL .)
    BIGGER_THAN     reduce using rule 71 (NL -> NOT EL .)
    EQUAL_EQUAL     reduce using rule 71 (NL -> NOT EL .)
    CLOSING_PARENTH reduce using rule 71 (NL -> NOT EL .)
    SEMICOLON       reduce using rule 71 (NL -> NOT EL .)
    OR              shift and go to state 130

  ! OR              [ reduce using rule 71 (NL -> NOT EL .) ]


state 138

    (59) FA -> OPEN_PARENTH EA . CLOSING_PARENTH
    (54) EA -> EA . PLUS TA
    (55) EA -> EA . MINUS TA
    (68) FL -> EA . OPERATORS EA
    (72) OPERATORS -> . NOT_EQUAL
    (73) OPERATORS -> . LOWER_THAN
    (74) OPERATORS -> . BIGGER_THAN
    (75) OPERATORS -> . EQUAL_EQUAL

    CLOSING_PARENTH shift and go to state 62
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    NOT_EQUAL       shift and go to state 131
    LOWER_THAN      shift and go to state 134
    BIGGER_THAN     shift and go to state 133
    EQUAL_EQUAL     shift and go to state 135

    OPERATORS                      shift and go to state 132

state 139

    (70) FL -> OPEN_PARENTH EL . CLOSING_PARENTH
    (64) EL -> EL . OR TL

    CLOSING_PARENTH shift and go to state 156
    OR              shift and go to state 130


state 140

    (66) TL -> TL AND . FL
    (67) FL -> . NL OPERATORS NL
    (68) FL -> . EA OPERATORS EA
    (69) FL -> . NL
    (70) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (71) NL -> . NOT EL
    (53) EA -> . TA
    (54) EA -> . EA PLUS TA
    (55) EA -> . EA MINUS TA
    (60) TA -> . FA
    (61) TA -> . TA MULTIPLY FA
    (62) TA -> . TA DIVISION FA
    (56) FA -> . CONSTANT
    (57) FA -> . ID
    (58) FA -> . MAT
    (59) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (76) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 115
    NOT             shift and go to state 113
    CONSTANT        shift and go to state 41
    ID              shift and go to state 38

    FA                             shift and go to state 36
    NL                             shift and go to state 112
    TA                             shift and go to state 35
    FL                             shift and go to state 157
    EA                             shift and go to state 111
    MAT                            shift and go to state 40

state 141

    (48) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON . WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (45) WHILE_AUX_1 -> . empty
    (43) empty -> .

    OPEN_PARENTH    reduce using rule 43 (empty -> .)
    NOT             reduce using rule 43 (empty -> .)
    CONSTANT        reduce using rule 43 (empty -> .)
    ID              reduce using rule 43 (empty -> .)

    empty                          shift and go to state 89
    WHILE_AUX_1                    shift and go to state 158

state 142

    (47) DOSTAT -> DO WHILE_AUX_1 IN_S WHILE . OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON

    OPEN_PARENTH    shift and go to state 159


state 143

    (52) IN_S -> OPEN_BRACES S . CLOSING_BRACES
    (21) S -> S . STATEMENTS
    (23) STATEMENTS -> . VAR
    (24) STATEMENTS -> . IDSTAT
    (25) STATEMENTS -> . PRINTSTAT
    (26) STATEMENTS -> . READSTAT
    (27) STATEMENTS -> . IFSTAT
    (28) STATEMENTS -> . WHILESTAT
    (29) STATEMENTS -> . DOSTAT
    (30) STATEMENTS -> . FORSTAT
    (31) STATEMENTS -> . FUNCSTAT
    (32) STATEMENTS -> . INC_STAT
    (33) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (34) IDSTAT -> . ASSIGN SEMICOLON
    (35) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (36) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (37) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (38) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (39) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (44) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (47) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (48) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (49) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (50) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (51) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (18) TIPO -> . INT
    (19) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  shift and go to state 160
    PRINT           shift and go to state 71
    READ            shift and go to state 79
    IF              shift and go to state 72
    WHILE           shift and go to state 68
    DO              shift and go to state 77
    FOR             shift and go to state 76
    ID              shift and go to state 69
    INT             shift and go to state 5
    DOUBLE          shift and go to state 2

  ! CLOSING_BRACES  [ reduce using rule 33 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 33 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 33 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 33 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 33 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 33 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 33 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 33 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 33 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 33 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    DOSTAT                         shift and go to state 75
    PRINTSTAT                      shift and go to state 67
    FUNCSTAT                       shift and go to state 74
    VAR                            shift and go to state 78
    READSTAT                       shift and go to state 70
    WHILESTAT                      shift and go to state 81
    INC_STAT                       shift and go to state 83
    STATEMENTS                     shift and go to state 99
    IFSTAT                         shift and go to state 84
    IDSTAT                         shift and go to state 85
    FORSTAT                        shift and go to state 82
    TIPO                           shift and go to state 4
    ASSIGN                         shift and go to state 86

state 144

    (37) READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 161


state 145

    (12) FUNC -> FUNCTION AUX_FUNC ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3 .

    MAIN            reduce using rule 12 (FUNC -> FUNCTION AUX_FUNC ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3 .)
    FUNCTION        reduce using rule 12 (FUNC -> FUNCTION AUX_FUNC ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3 .)


state 146

    (42) IF_AUX3 -> empty .

    CLOSING_BRACES  reduce using rule 42 (IF_AUX3 -> empty .)
    PRINT           reduce using rule 42 (IF_AUX3 -> empty .)
    READ            reduce using rule 42 (IF_AUX3 -> empty .)
    IF              reduce using rule 42 (IF_AUX3 -> empty .)
    WHILE           reduce using rule 42 (IF_AUX3 -> empty .)
    DO              reduce using rule 42 (IF_AUX3 -> empty .)
    FOR             reduce using rule 42 (IF_AUX3 -> empty .)
    ID              reduce using rule 42 (IF_AUX3 -> empty .)
    INT             reduce using rule 42 (IF_AUX3 -> empty .)
    DOUBLE          reduce using rule 42 (IF_AUX3 -> empty .)
    MAIN            reduce using rule 42 (IF_AUX3 -> empty .)
    FUNCTION        reduce using rule 42 (IF_AUX3 -> empty .)


state 147

    (13) FUNC -> FUNC AUX_FUNC FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES RETURN . IF_AUX3
    (42) IF_AUX3 -> . empty
    (43) empty -> .

    MAIN            reduce using rule 43 (empty -> .)
    FUNCTION        reduce using rule 43 (empty -> .)

    IF_AUX3                        shift and go to state 162
    empty                          shift and go to state 146

state 148

    (44) WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH . WHILE_AUX_2 IN_S
    (46) WHILE_AUX_2 -> . empty
    (43) empty -> .

    OPEN_BRACES     reduce using rule 43 (empty -> .)

    WHILE_AUX_2                    shift and go to state 164
    empty                          shift and go to state 163

state 149

    (36) PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 36 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 36 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 36 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 36 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 36 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 36 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 36 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 36 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 36 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 36 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)


state 150

    (35) PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 35 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 35 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 35 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 35 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 35 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 35 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 35 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 35 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 35 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 35 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)


state 151

    (40) IF_AUX1 -> empty .

    OPEN_BRACES     reduce using rule 40 (IF_AUX1 -> empty .)


state 152

    (38) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 . IN_S IF_AUX3
    (39) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 . IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (52) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 120

    IN_S                           shift and go to state 165

state 153

    (64) EL -> EL OR TL .
    (66) TL -> TL . AND FL

  ! shift/reduce conflict for AND resolved as shift
    CLOSING_PARENTH reduce using rule 64 (EL -> EL OR TL .)
    OR              reduce using rule 64 (EL -> EL OR TL .)
    NOT_EQUAL       reduce using rule 64 (EL -> EL OR TL .)
    LOWER_THAN      reduce using rule 64 (EL -> EL OR TL .)
    BIGGER_THAN     reduce using rule 64 (EL -> EL OR TL .)
    EQUAL_EQUAL     reduce using rule 64 (EL -> EL OR TL .)
    SEMICOLON       reduce using rule 64 (EL -> EL OR TL .)
    AND             shift and go to state 140

  ! AND             [ reduce using rule 64 (EL -> EL OR TL .) ]


state 154

    (68) FL -> EA OPERATORS EA .
    (54) EA -> EA . PLUS TA
    (55) EA -> EA . MINUS TA

    AND             reduce using rule 68 (FL -> EA OPERATORS EA .)
    OR              reduce using rule 68 (FL -> EA OPERATORS EA .)
    NOT_EQUAL       reduce using rule 68 (FL -> EA OPERATORS EA .)
    LOWER_THAN      reduce using rule 68 (FL -> EA OPERATORS EA .)
    BIGGER_THAN     reduce using rule 68 (FL -> EA OPERATORS EA .)
    EQUAL_EQUAL     reduce using rule 68 (FL -> EA OPERATORS EA .)
    CLOSING_PARENTH reduce using rule 68 (FL -> EA OPERATORS EA .)
    SEMICOLON       reduce using rule 68 (FL -> EA OPERATORS EA .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51


state 155

    (67) FL -> NL OPERATORS NL .

    AND             reduce using rule 67 (FL -> NL OPERATORS NL .)
    OR              reduce using rule 67 (FL -> NL OPERATORS NL .)
    NOT_EQUAL       reduce using rule 67 (FL -> NL OPERATORS NL .)
    LOWER_THAN      reduce using rule 67 (FL -> NL OPERATORS NL .)
    BIGGER_THAN     reduce using rule 67 (FL -> NL OPERATORS NL .)
    EQUAL_EQUAL     reduce using rule 67 (FL -> NL OPERATORS NL .)
    CLOSING_PARENTH reduce using rule 67 (FL -> NL OPERATORS NL .)
    SEMICOLON       reduce using rule 67 (FL -> NL OPERATORS NL .)


state 156

    (70) FL -> OPEN_PARENTH EL CLOSING_PARENTH .

    AND             reduce using rule 70 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    OR              reduce using rule 70 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    NOT_EQUAL       reduce using rule 70 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    LOWER_THAN      reduce using rule 70 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    BIGGER_THAN     reduce using rule 70 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    EQUAL_EQUAL     reduce using rule 70 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    CLOSING_PARENTH reduce using rule 70 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    SEMICOLON       reduce using rule 70 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)


state 157

    (66) TL -> TL AND FL .

    AND             reduce using rule 66 (TL -> TL AND FL .)
    CLOSING_PARENTH reduce using rule 66 (TL -> TL AND FL .)
    OR              reduce using rule 66 (TL -> TL AND FL .)
    NOT_EQUAL       reduce using rule 66 (TL -> TL AND FL .)
    LOWER_THAN      reduce using rule 66 (TL -> TL AND FL .)
    BIGGER_THAN     reduce using rule 66 (TL -> TL AND FL .)
    EQUAL_EQUAL     reduce using rule 66 (TL -> TL AND FL .)
    SEMICOLON       reduce using rule 66 (TL -> TL AND FL .)


state 158

    (48) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 . EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (63) EL -> . TL
    (64) EL -> . EL OR TL
    (65) TL -> . FL
    (66) TL -> . TL AND FL
    (67) FL -> . NL OPERATORS NL
    (68) FL -> . EA OPERATORS EA
    (69) FL -> . NL
    (70) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (71) NL -> . NOT EL
    (53) EA -> . TA
    (54) EA -> . EA PLUS TA
    (55) EA -> . EA MINUS TA
    (60) TA -> . FA
    (61) TA -> . TA MULTIPLY FA
    (62) TA -> . TA DIVISION FA
    (56) FA -> . CONSTANT
    (57) FA -> . ID
    (58) FA -> . MAT
    (59) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (76) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 115
    NOT             shift and go to state 113
    CONSTANT        shift and go to state 41
    ID              shift and go to state 38

    TL                             shift and go to state 116
    EA                             shift and go to state 111
    EL                             shift and go to state 166
    MAT                            shift and go to state 40
    FA                             shift and go to state 36
    NL                             shift and go to state 112
    TA                             shift and go to state 35
    FL                             shift and go to state 114

state 159

    (47) DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH . EL CLOSING_PARENTH SEMICOLON
    (63) EL -> . TL
    (64) EL -> . EL OR TL
    (65) TL -> . FL
    (66) TL -> . TL AND FL
    (67) FL -> . NL OPERATORS NL
    (68) FL -> . EA OPERATORS EA
    (69) FL -> . NL
    (70) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (71) NL -> . NOT EL
    (53) EA -> . TA
    (54) EA -> . EA PLUS TA
    (55) EA -> . EA MINUS TA
    (60) TA -> . FA
    (61) TA -> . TA MULTIPLY FA
    (62) TA -> . TA DIVISION FA
    (56) FA -> . CONSTANT
    (57) FA -> . ID
    (58) FA -> . MAT
    (59) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (76) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 115
    NOT             shift and go to state 113
    CONSTANT        shift and go to state 41
    ID              shift and go to state 38

    TL                             shift and go to state 116
    EL                             shift and go to state 167
    FA                             shift and go to state 36
    EA                             shift and go to state 111
    MAT                            shift and go to state 40
    NL                             shift and go to state 112
    TA                             shift and go to state 35
    FL                             shift and go to state 114

state 160

    (52) IN_S -> OPEN_BRACES S CLOSING_BRACES .

    WHILE           reduce using rule 52 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    CLOSING_BRACES  reduce using rule 52 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    PRINT           reduce using rule 52 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    READ            reduce using rule 52 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    IF              reduce using rule 52 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    DO              reduce using rule 52 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    FOR             reduce using rule 52 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    ID              reduce using rule 52 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    INT             reduce using rule 52 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    DOUBLE          reduce using rule 52 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    ELSE            reduce using rule 52 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)


state 161

    (37) READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 37 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 37 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 37 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 37 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 37 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 37 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 37 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 37 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 37 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 37 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)


state 162

    (13) FUNC -> FUNC AUX_FUNC FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3 .

    MAIN            reduce using rule 13 (FUNC -> FUNC AUX_FUNC FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3 .)
    FUNCTION        reduce using rule 13 (FUNC -> FUNC AUX_FUNC FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3 .)


state 163

    (46) WHILE_AUX_2 -> empty .

    ID              reduce using rule 46 (WHILE_AUX_2 -> empty .)
    OPEN_BRACES     reduce using rule 46 (WHILE_AUX_2 -> empty .)


state 164

    (44) WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 . IN_S
    (52) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 120

    IN_S                           shift and go to state 168

state 165

    (38) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S . IF_AUX3
    (39) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S . ELSE IF_AUX2 IN_S IF_AUX3
    (42) IF_AUX3 -> . empty
    (43) empty -> .

    ELSE            shift and go to state 170
    CLOSING_BRACES  reduce using rule 43 (empty -> .)
    PRINT           reduce using rule 43 (empty -> .)
    READ            reduce using rule 43 (empty -> .)
    IF              reduce using rule 43 (empty -> .)
    WHILE           reduce using rule 43 (empty -> .)
    DO              reduce using rule 43 (empty -> .)
    FOR             reduce using rule 43 (empty -> .)
    ID              reduce using rule 43 (empty -> .)
    INT             reduce using rule 43 (empty -> .)
    DOUBLE          reduce using rule 43 (empty -> .)

    IF_AUX3                        shift and go to state 169
    empty                          shift and go to state 146

state 166

    (48) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL . SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (64) EL -> EL . OR TL

    SEMICOLON       shift and go to state 171
    OR              shift and go to state 130


state 167

    (47) DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL . CLOSING_PARENTH SEMICOLON
    (64) EL -> EL . OR TL

    CLOSING_PARENTH shift and go to state 172
    OR              shift and go to state 130


state 168

    (44) WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .

    CLOSING_BRACES  reduce using rule 44 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    PRINT           reduce using rule 44 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    READ            reduce using rule 44 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    IF              reduce using rule 44 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    WHILE           reduce using rule 44 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    DO              reduce using rule 44 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    FOR             reduce using rule 44 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    ID              reduce using rule 44 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    INT             reduce using rule 44 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    DOUBLE          reduce using rule 44 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)


state 169

    (38) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .

    CLOSING_BRACES  reduce using rule 38 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    PRINT           reduce using rule 38 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    READ            reduce using rule 38 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    IF              reduce using rule 38 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    WHILE           reduce using rule 38 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    DO              reduce using rule 38 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    FOR             reduce using rule 38 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    ID              reduce using rule 38 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    INT             reduce using rule 38 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    DOUBLE          reduce using rule 38 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)


state 170

    (39) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE . IF_AUX2 IN_S IF_AUX3
    (41) IF_AUX2 -> . empty
    (43) empty -> .

    OPEN_BRACES     reduce using rule 43 (empty -> .)

    empty                          shift and go to state 173
    IF_AUX2                        shift and go to state 174

state 171

    (48) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON . WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (46) WHILE_AUX_2 -> . empty
    (43) empty -> .

    ID              reduce using rule 43 (empty -> .)

    empty                          shift and go to state 163
    WHILE_AUX_2                    shift and go to state 175

state 172

    (47) DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 176


state 173

    (41) IF_AUX2 -> empty .

    OPEN_BRACES     reduce using rule 41 (IF_AUX2 -> empty .)


state 174

    (39) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 . IN_S IF_AUX3
    (52) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 120

    IN_S                           shift and go to state 177

state 175

    (48) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 . ASSIGN CLOSING_PARENTH IN_S
    (11) ASSIGN -> . ID EQUAL EA

    ID              shift and go to state 117

    ASSIGN                         shift and go to state 178

state 176

    (47) DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 47 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 47 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 47 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 47 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 47 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 47 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 47 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 47 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 47 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 47 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)


state 177

    (39) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S . IF_AUX3
    (42) IF_AUX3 -> . empty
    (43) empty -> .

    CLOSING_BRACES  reduce using rule 43 (empty -> .)
    PRINT           reduce using rule 43 (empty -> .)
    READ            reduce using rule 43 (empty -> .)
    IF              reduce using rule 43 (empty -> .)
    WHILE           reduce using rule 43 (empty -> .)
    DO              reduce using rule 43 (empty -> .)
    FOR             reduce using rule 43 (empty -> .)
    ID              reduce using rule 43 (empty -> .)
    INT             reduce using rule 43 (empty -> .)
    DOUBLE          reduce using rule 43 (empty -> .)

    IF_AUX3                        shift and go to state 179
    empty                          shift and go to state 146

state 178

    (48) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN . CLOSING_PARENTH IN_S

    CLOSING_PARENTH shift and go to state 180


state 179

    (39) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .

    CLOSING_BRACES  reduce using rule 39 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    PRINT           reduce using rule 39 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    READ            reduce using rule 39 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    IF              reduce using rule 39 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    WHILE           reduce using rule 39 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    DO              reduce using rule 39 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    FOR             reduce using rule 39 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    ID              reduce using rule 39 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    INT             reduce using rule 39 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    DOUBLE          reduce using rule 39 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)


state 180

    (48) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH . IN_S
    (52) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 120

    IN_S                           shift and go to state 181

state 181

    (48) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .

    CLOSING_BRACES  reduce using rule 48 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    PRINT           reduce using rule 48 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    READ            reduce using rule 48 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    IF              reduce using rule 48 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    WHILE           reduce using rule 48 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    DO              reduce using rule 48 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    FOR             reduce using rule 48 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    ID              reduce using rule 48 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    INT             reduce using rule 48 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    DOUBLE          reduce using rule 48 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 3 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 57 resolved as shift
WARNING: shift/reduce conflict for READ in state 57 resolved as shift
WARNING: shift/reduce conflict for IF in state 57 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 57 resolved as shift
WARNING: shift/reduce conflict for DO in state 57 resolved as shift
WARNING: shift/reduce conflict for FOR in state 57 resolved as shift
WARNING: shift/reduce conflict for ID in state 57 resolved as shift
WARNING: shift/reduce conflict for INT in state 57 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 57 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 65 resolved as shift
WARNING: shift/reduce conflict for READ in state 65 resolved as shift
WARNING: shift/reduce conflict for IF in state 65 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 65 resolved as shift
WARNING: shift/reduce conflict for DO in state 65 resolved as shift
WARNING: shift/reduce conflict for FOR in state 65 resolved as shift
WARNING: shift/reduce conflict for ID in state 65 resolved as shift
WARNING: shift/reduce conflict for INT in state 65 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 65 resolved as shift
WARNING: shift/reduce conflict for INT in state 78 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 78 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 80 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 80 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 80 resolved as shift
WARNING: shift/reduce conflict for READ in state 80 resolved as shift
WARNING: shift/reduce conflict for IF in state 80 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 80 resolved as shift
WARNING: shift/reduce conflict for DO in state 80 resolved as shift
WARNING: shift/reduce conflict for FOR in state 80 resolved as shift
WARNING: shift/reduce conflict for ID in state 80 resolved as shift
WARNING: shift/reduce conflict for INT in state 80 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 80 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 87 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 87 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 87 resolved as shift
WARNING: shift/reduce conflict for READ in state 87 resolved as shift
WARNING: shift/reduce conflict for IF in state 87 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 87 resolved as shift
WARNING: shift/reduce conflict for DO in state 87 resolved as shift
WARNING: shift/reduce conflict for FOR in state 87 resolved as shift
WARNING: shift/reduce conflict for ID in state 87 resolved as shift
WARNING: shift/reduce conflict for INT in state 87 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 87 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 88 resolved as shift
WARNING: shift/reduce conflict for READ in state 88 resolved as shift
WARNING: shift/reduce conflict for IF in state 88 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 88 resolved as shift
WARNING: shift/reduce conflict for DO in state 88 resolved as shift
WARNING: shift/reduce conflict for FOR in state 88 resolved as shift
WARNING: shift/reduce conflict for ID in state 88 resolved as shift
WARNING: shift/reduce conflict for INT in state 88 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 88 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 103 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 103 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 103 resolved as shift
WARNING: shift/reduce conflict for READ in state 103 resolved as shift
WARNING: shift/reduce conflict for IF in state 103 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 103 resolved as shift
WARNING: shift/reduce conflict for DO in state 103 resolved as shift
WARNING: shift/reduce conflict for FOR in state 103 resolved as shift
WARNING: shift/reduce conflict for ID in state 103 resolved as shift
WARNING: shift/reduce conflict for INT in state 103 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 103 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 112 resolved as shift
WARNING: shift/reduce conflict for LOWER_THAN in state 112 resolved as shift
WARNING: shift/reduce conflict for BIGGER_THAN in state 112 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 112 resolved as shift
WARNING: shift/reduce conflict for AND in state 116 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 120 resolved as shift
WARNING: shift/reduce conflict for READ in state 120 resolved as shift
WARNING: shift/reduce conflict for IF in state 120 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 120 resolved as shift
WARNING: shift/reduce conflict for DO in state 120 resolved as shift
WARNING: shift/reduce conflict for FOR in state 120 resolved as shift
WARNING: shift/reduce conflict for ID in state 120 resolved as shift
WARNING: shift/reduce conflict for INT in state 120 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 120 resolved as shift
WARNING: shift/reduce conflict for OR in state 137 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 143 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 143 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 143 resolved as shift
WARNING: shift/reduce conflict for READ in state 143 resolved as shift
WARNING: shift/reduce conflict for IF in state 143 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 143 resolved as shift
WARNING: shift/reduce conflict for DO in state 143 resolved as shift
WARNING: shift/reduce conflict for FOR in state 143 resolved as shift
WARNING: shift/reduce conflict for ID in state 143 resolved as shift
WARNING: shift/reduce conflict for INT in state 143 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 143 resolved as shift
WARNING: shift/reduce conflict for AND in state 153 resolved as shift
WARNING: reduce/reduce conflict in state 57 resolved using rule (S -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 57
WARNING: reduce/reduce conflict in state 57 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (S -> <empty>) in state 57
WARNING: reduce/reduce conflict in state 65 resolved using rule (S -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 65
WARNING: reduce/reduce conflict in state 65 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (S -> <empty>) in state 65
WARNING: reduce/reduce conflict in state 80 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 80
WARNING: reduce/reduce conflict in state 87 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 87
WARNING: reduce/reduce conflict in state 88 resolved using rule (S -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 88
WARNING: reduce/reduce conflict in state 88 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (S -> <empty>) in state 88
WARNING: reduce/reduce conflict in state 103 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 103
WARNING: reduce/reduce conflict in state 120 resolved using rule (S -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 120
WARNING: reduce/reduce conflict in state 120 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (S -> <empty>) in state 120
WARNING: reduce/reduce conflict in state 143 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 143
WARNING: Rule (STATEMENTS -> <empty>) is never reduced
WARNING: Rule (S -> <empty>) is never reduced
