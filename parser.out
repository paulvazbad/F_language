Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> VAR FUNC M
Rule 2     VAR -> TIPO DECLARE SEMICOLON
Rule 3     VAR -> TIPO MAT SEMICOLON
Rule 4     VAR -> VAR TIPO DECLARE SEMICOLON
Rule 5     VAR -> VAR TIPO MAT SEMICOLON
Rule 6     VAR -> <empty>
Rule 7     DECLARE -> ID
Rule 8     DECLARE -> DECLARE COMA ID
Rule 9     DECLARE -> ASSIGN
Rule 10    DECLARE -> DECLARE COMA ASSIGN
Rule 11    ASSIGN -> ID EQUAL EA
Rule 12    FUNC -> FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES
Rule 13    FUNC -> FUNC FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES
Rule 14    FUNC -> <empty>
Rule 15    M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES
Rule 16    TIPO -> INT
Rule 17    TIPO -> DOUBLE
Rule 18    S -> STATEMENTS
Rule 19    S -> S STATEMENTS
Rule 20    S -> <empty>
Rule 21    STATEMENTS -> VAR
Rule 22    STATEMENTS -> IDSTAT
Rule 23    STATEMENTS -> PRINTSTAT
Rule 24    STATEMENTS -> READSTAT
Rule 25    STATEMENTS -> IFSTAT
Rule 26    STATEMENTS -> WHILESTAT
Rule 27    STATEMENTS -> DOSTAT
Rule 28    STATEMENTS -> FORSTAT
Rule 29    STATEMENTS -> FUNCSTAT
Rule 30    STATEMENTS -> INC_STAT
Rule 31    STATEMENTS -> <empty>
Rule 32    IDSTAT -> ASSIGN SEMICOLON
Rule 33    PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
Rule 34    PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
Rule 35    READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
Rule 36    IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
Rule 37    IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
Rule 38    IF_AUX1 -> empty
Rule 39    IF_AUX2 -> empty
Rule 40    IF_AUX3 -> empty
Rule 41    empty -> <empty>
Rule 42    WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
Rule 43    WHILE_AUX_1 -> empty
Rule 44    WHILE_AUX_2 -> empty
Rule 45    DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
Rule 46    FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S
Rule 47    FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
Rule 48    INC_STAT -> ID PLUSPLUS SEMICOLON
Rule 49    INC_STAT -> ID MINUSMINUS SEMICOLON
Rule 50    IN_S -> OPEN_BRACES S CLOSING_BRACES
Rule 51    EA -> TA
Rule 52    EA -> EA PLUS TA
Rule 53    EA -> EA MINUS TA
Rule 54    FA -> CONSTANT
Rule 55    FA -> ID
Rule 56    FA -> MAT
Rule 57    FA -> OPEN_PARENTH EA CLOSING_PARENTH
Rule 58    TA -> FA
Rule 59    TA -> TA MULTIPLY FA
Rule 60    TA -> TA DIVISION FA
Rule 61    EL -> TL
Rule 62    EL -> EL OR TL
Rule 63    TL -> FL
Rule 64    TL -> TL AND FL
Rule 65    FL -> NL OPERATORS NL
Rule 66    FL -> EA OPERATORS EA
Rule 67    FL -> NL
Rule 68    FL -> OPEN_PARENTH EL CLOSING_PARENTH
Rule 69    NL -> NOT EL
Rule 70    OPERATORS -> NOT_EQUAL
Rule 71    OPERATORS -> LOWER_THAN
Rule 72    OPERATORS -> BIGGER_THAN
Rule 73    OPERATORS -> EQUAL_EQUAL
Rule 74    MAT -> ID MAT_BRACKET
Rule 75    MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET
Rule 76    MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET
Rule 77    MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET
Rule 78    MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET

Terminals, with rules where they appear

AND                  : 64
BIGGER_THAN          : 72
CLOSING_BRACES       : 12 13 15 50
CLOSING_BRACKET      : 75 76 77 78
CLOSING_PARENTH      : 12 13 15 33 34 35 36 37 42 45 46 47 57 68
COMA                 : 8 10
COMMENT              : 
CONSTANT             : 54 75 76
DIVISION             : 60
DO                   : 45
DOUBLE               : 17
ELSE                 : 37
EQUAL                : 11 46 46
EQUAL_EQUAL          : 73
FOR                  : 46
FUNCTION             : 12 13
ID                   : 7 8 11 12 13 46 46 47 48 49 55 74 77 78
IF                   : 36 37
INT                  : 16
LOWER_THAN           : 71
MAIN                 : 15
MINUS                : 53
MINUSMINUS           : 49
MULTIPLY             : 59
NOT                  : 69
NOT_EQUAL            : 70
OPEN_BRACES          : 12 13 15 50
OPEN_BRACKET         : 75 76 77 78
OPEN_PARENTH         : 12 13 15 33 34 35 36 37 42 45 46 47 57 68
OR                   : 62
PLUS                 : 52
PLUSPLUS             : 48
PRINT                : 33 34
READ                 : 35
SEMICOLON            : 2 3 4 5 32 33 34 35 45 46 46 47 48 49
STRING               : 34
WHILE                : 42 45
error                : 

Nonterminals, with rules where they appear

ASSIGN               : 9 10 32
DECLARE              : 2 4 8 10
DOSTAT               : 27
EA                   : 11 33 35 46 46 52 53 57 66 66
EL                   : 36 37 42 45 46 62 68 69
FA                   : 58 59 60
FL                   : 63 64
FORSTAT              : 28
FUNC                 : 1 13
FUNCSTAT             : 29
IDSTAT               : 22
IFSTAT               : 25
IF_AUX1              : 36 37
IF_AUX2              : 37
IF_AUX3              : 36 37
INC_STAT             : 30
IN_S                 : 36 37 37 42 45 46
M                    : 1
MAT                  : 3 5 56
MAT_BRACKET          : 74 76 78
NL                   : 65 65 67
OPERATORS            : 65 66
PRINTSTAT            : 23
PROGRAMA             : 0
READSTAT             : 24
S                    : 12 13 15 19 50
STATEMENTS           : 18 19
TA                   : 51 52 53 59 60
TIPO                 : 2 3 4 5
TL                   : 61 62 64
VAR                  : 1 4 5 21
WHILESTAT            : 26
WHILE_AUX_1          : 42 45
WHILE_AUX_2          : 42
empty                : 38 39 40 43 44

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . VAR FUNC M
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (16) TIPO -> . INT
    (17) TIPO -> . DOUBLE

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    FUNCTION        reduce using rule 6 (VAR -> .)
    MAIN            reduce using rule 6 (VAR -> .)
    INT             shift and go to state 3
    DOUBLE          shift and go to state 1

  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]

    TIPO                           shift and go to state 2
    PROGRAMA                       shift and go to state 4
    VAR                            shift and go to state 5

state 1

    (17) TIPO -> DOUBLE .

    ID              reduce using rule 17 (TIPO -> DOUBLE .)


state 2

    (2) VAR -> TIPO . DECLARE SEMICOLON
    (3) VAR -> TIPO . MAT SEMICOLON
    (7) DECLARE -> . ID
    (8) DECLARE -> . DECLARE COMA ID
    (9) DECLARE -> . ASSIGN
    (10) DECLARE -> . DECLARE COMA ASSIGN
    (74) MAT -> . ID MAT_BRACKET
    (11) ASSIGN -> . ID EQUAL EA

    ID              shift and go to state 6

    ASSIGN                         shift and go to state 7
    MAT                            shift and go to state 9
    DECLARE                        shift and go to state 8

state 3

    (16) TIPO -> INT .

    ID              reduce using rule 16 (TIPO -> INT .)


state 4

    (0) S' -> PROGRAMA .



state 5

    (1) PROGRAMA -> VAR . FUNC M
    (4) VAR -> VAR . TIPO DECLARE SEMICOLON
    (5) VAR -> VAR . TIPO MAT SEMICOLON
    (12) FUNC -> . FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES
    (13) FUNC -> . FUNC FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES
    (14) FUNC -> .
    (16) TIPO -> . INT
    (17) TIPO -> . DOUBLE

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 11
    MAIN            reduce using rule 14 (FUNC -> .)
    INT             shift and go to state 3
    DOUBLE          shift and go to state 1

  ! FUNCTION        [ reduce using rule 14 (FUNC -> .) ]

    TIPO                           shift and go to state 10
    FUNC                           shift and go to state 12

state 6

    (7) DECLARE -> ID .
    (74) MAT -> ID . MAT_BRACKET
    (11) ASSIGN -> ID . EQUAL EA
    (75) MAT_BRACKET -> . OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (76) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (77) MAT_BRACKET -> . OPEN_BRACKET ID CLOSING_BRACKET
    (78) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET

    SEMICOLON       reduce using rule 7 (DECLARE -> ID .)
    COMA            reduce using rule 7 (DECLARE -> ID .)
    EQUAL           shift and go to state 13
    OPEN_BRACKET    shift and go to state 14

    MAT_BRACKET                    shift and go to state 15

state 7

    (9) DECLARE -> ASSIGN .

    SEMICOLON       reduce using rule 9 (DECLARE -> ASSIGN .)
    COMA            reduce using rule 9 (DECLARE -> ASSIGN .)


state 8

    (2) VAR -> TIPO DECLARE . SEMICOLON
    (8) DECLARE -> DECLARE . COMA ID
    (10) DECLARE -> DECLARE . COMA ASSIGN

    SEMICOLON       shift and go to state 17
    COMA            shift and go to state 16


state 9

    (3) VAR -> TIPO MAT . SEMICOLON

    SEMICOLON       shift and go to state 18


state 10

    (4) VAR -> VAR TIPO . DECLARE SEMICOLON
    (5) VAR -> VAR TIPO . MAT SEMICOLON
    (7) DECLARE -> . ID
    (8) DECLARE -> . DECLARE COMA ID
    (9) DECLARE -> . ASSIGN
    (10) DECLARE -> . DECLARE COMA ASSIGN
    (74) MAT -> . ID MAT_BRACKET
    (11) ASSIGN -> . ID EQUAL EA

    ID              shift and go to state 6

    ASSIGN                         shift and go to state 7
    DECLARE                        shift and go to state 19
    MAT                            shift and go to state 20

state 11

    (12) FUNC -> FUNCTION . ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES

    ID              shift and go to state 21


state 12

    (1) PROGRAMA -> VAR FUNC . M
    (13) FUNC -> FUNC . FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES
    (15) M -> . MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES

    FUNCTION        shift and go to state 24
    MAIN            shift and go to state 23

    M                              shift and go to state 22

state 13

    (11) ASSIGN -> ID EQUAL . EA
    (51) EA -> . TA
    (52) EA -> . EA PLUS TA
    (53) EA -> . EA MINUS TA
    (58) TA -> . FA
    (59) TA -> . TA MULTIPLY FA
    (60) TA -> . TA DIVISION FA
    (54) FA -> . CONSTANT
    (55) FA -> . ID
    (56) FA -> . MAT
    (57) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (74) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 28
    ID              shift and go to state 27
    OPEN_PARENTH    shift and go to state 30

    EA                             shift and go to state 25
    TA                             shift and go to state 26
    FA                             shift and go to state 29
    MAT                            shift and go to state 31

state 14

    (75) MAT_BRACKET -> OPEN_BRACKET . CONSTANT CLOSING_BRACKET
    (77) MAT_BRACKET -> OPEN_BRACKET . ID CLOSING_BRACKET

    CONSTANT        shift and go to state 33
    ID              shift and go to state 32


state 15

    (74) MAT -> ID MAT_BRACKET .
    (76) MAT_BRACKET -> MAT_BRACKET . OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (78) MAT_BRACKET -> MAT_BRACKET . OPEN_BRACKET ID CLOSING_BRACKET

    MULTIPLY        reduce using rule 74 (MAT -> ID MAT_BRACKET .)
    DIVISION        reduce using rule 74 (MAT -> ID MAT_BRACKET .)
    PLUS            reduce using rule 74 (MAT -> ID MAT_BRACKET .)
    MINUS           reduce using rule 74 (MAT -> ID MAT_BRACKET .)
    SEMICOLON       reduce using rule 74 (MAT -> ID MAT_BRACKET .)
    COMA            reduce using rule 74 (MAT -> ID MAT_BRACKET .)
    CLOSING_PARENTH reduce using rule 74 (MAT -> ID MAT_BRACKET .)
    NOT_EQUAL       reduce using rule 74 (MAT -> ID MAT_BRACKET .)
    LOWER_THAN      reduce using rule 74 (MAT -> ID MAT_BRACKET .)
    BIGGER_THAN     reduce using rule 74 (MAT -> ID MAT_BRACKET .)
    EQUAL_EQUAL     reduce using rule 74 (MAT -> ID MAT_BRACKET .)
    AND             reduce using rule 74 (MAT -> ID MAT_BRACKET .)
    OR              reduce using rule 74 (MAT -> ID MAT_BRACKET .)
    OPEN_BRACKET    shift and go to state 34


state 16

    (8) DECLARE -> DECLARE COMA . ID
    (10) DECLARE -> DECLARE COMA . ASSIGN
    (11) ASSIGN -> . ID EQUAL EA

    ID              shift and go to state 35

    ASSIGN                         shift and go to state 36

state 17

    (2) VAR -> TIPO DECLARE SEMICOLON .

    INT             reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    DOUBLE          reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    CLOSING_BRACES  reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    PRINT           reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    READ            reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    IF              reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    WHILE           reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    DO              reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    FOR             reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    ID              reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    FUNCTION        reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    MAIN            reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)


state 18

    (3) VAR -> TIPO MAT SEMICOLON .

    INT             reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    DOUBLE          reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    CLOSING_BRACES  reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    PRINT           reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    READ            reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    IF              reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    WHILE           reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    DO              reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    FOR             reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    ID              reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    FUNCTION        reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    MAIN            reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)


state 19

    (4) VAR -> VAR TIPO DECLARE . SEMICOLON
    (8) DECLARE -> DECLARE . COMA ID
    (10) DECLARE -> DECLARE . COMA ASSIGN

    SEMICOLON       shift and go to state 37
    COMA            shift and go to state 16


state 20

    (5) VAR -> VAR TIPO MAT . SEMICOLON

    SEMICOLON       shift and go to state 38


state 21

    (12) FUNC -> FUNCTION ID . OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES

    OPEN_PARENTH    shift and go to state 39


state 22

    (1) PROGRAMA -> VAR FUNC M .

    $end            reduce using rule 1 (PROGRAMA -> VAR FUNC M .)


state 23

    (15) M -> MAIN . OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES

    OPEN_PARENTH    shift and go to state 40


state 24

    (13) FUNC -> FUNC FUNCTION . ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES

    ID              shift and go to state 41


state 25

    (11) ASSIGN -> ID EQUAL EA .
    (52) EA -> EA . PLUS TA
    (53) EA -> EA . MINUS TA

    SEMICOLON       reduce using rule 11 (ASSIGN -> ID EQUAL EA .)
    COMA            reduce using rule 11 (ASSIGN -> ID EQUAL EA .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 42


state 26

    (51) EA -> TA .
    (59) TA -> TA . MULTIPLY FA
    (60) TA -> TA . DIVISION FA

    PLUS            reduce using rule 51 (EA -> TA .)
    MINUS           reduce using rule 51 (EA -> TA .)
    NOT_EQUAL       reduce using rule 51 (EA -> TA .)
    LOWER_THAN      reduce using rule 51 (EA -> TA .)
    BIGGER_THAN     reduce using rule 51 (EA -> TA .)
    EQUAL_EQUAL     reduce using rule 51 (EA -> TA .)
    SEMICOLON       reduce using rule 51 (EA -> TA .)
    COMA            reduce using rule 51 (EA -> TA .)
    CLOSING_PARENTH reduce using rule 51 (EA -> TA .)
    AND             reduce using rule 51 (EA -> TA .)
    OR              reduce using rule 51 (EA -> TA .)
    MULTIPLY        shift and go to state 44
    DIVISION        shift and go to state 45


state 27

    (55) FA -> ID .
    (74) MAT -> ID . MAT_BRACKET
    (75) MAT_BRACKET -> . OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (76) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (77) MAT_BRACKET -> . OPEN_BRACKET ID CLOSING_BRACKET
    (78) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET

    MULTIPLY        reduce using rule 55 (FA -> ID .)
    DIVISION        reduce using rule 55 (FA -> ID .)
    PLUS            reduce using rule 55 (FA -> ID .)
    MINUS           reduce using rule 55 (FA -> ID .)
    NOT_EQUAL       reduce using rule 55 (FA -> ID .)
    LOWER_THAN      reduce using rule 55 (FA -> ID .)
    BIGGER_THAN     reduce using rule 55 (FA -> ID .)
    EQUAL_EQUAL     reduce using rule 55 (FA -> ID .)
    CLOSING_PARENTH reduce using rule 55 (FA -> ID .)
    SEMICOLON       reduce using rule 55 (FA -> ID .)
    COMA            reduce using rule 55 (FA -> ID .)
    AND             reduce using rule 55 (FA -> ID .)
    OR              reduce using rule 55 (FA -> ID .)
    OPEN_BRACKET    shift and go to state 14

    MAT_BRACKET                    shift and go to state 15

state 28

    (54) FA -> CONSTANT .

    MULTIPLY        reduce using rule 54 (FA -> CONSTANT .)
    DIVISION        reduce using rule 54 (FA -> CONSTANT .)
    PLUS            reduce using rule 54 (FA -> CONSTANT .)
    MINUS           reduce using rule 54 (FA -> CONSTANT .)
    NOT_EQUAL       reduce using rule 54 (FA -> CONSTANT .)
    LOWER_THAN      reduce using rule 54 (FA -> CONSTANT .)
    BIGGER_THAN     reduce using rule 54 (FA -> CONSTANT .)
    EQUAL_EQUAL     reduce using rule 54 (FA -> CONSTANT .)
    CLOSING_PARENTH reduce using rule 54 (FA -> CONSTANT .)
    SEMICOLON       reduce using rule 54 (FA -> CONSTANT .)
    COMA            reduce using rule 54 (FA -> CONSTANT .)
    AND             reduce using rule 54 (FA -> CONSTANT .)
    OR              reduce using rule 54 (FA -> CONSTANT .)


state 29

    (58) TA -> FA .

    MULTIPLY        reduce using rule 58 (TA -> FA .)
    DIVISION        reduce using rule 58 (TA -> FA .)
    CLOSING_PARENTH reduce using rule 58 (TA -> FA .)
    PLUS            reduce using rule 58 (TA -> FA .)
    MINUS           reduce using rule 58 (TA -> FA .)
    NOT_EQUAL       reduce using rule 58 (TA -> FA .)
    LOWER_THAN      reduce using rule 58 (TA -> FA .)
    BIGGER_THAN     reduce using rule 58 (TA -> FA .)
    EQUAL_EQUAL     reduce using rule 58 (TA -> FA .)
    SEMICOLON       reduce using rule 58 (TA -> FA .)
    COMA            reduce using rule 58 (TA -> FA .)
    AND             reduce using rule 58 (TA -> FA .)
    OR              reduce using rule 58 (TA -> FA .)


state 30

    (57) FA -> OPEN_PARENTH . EA CLOSING_PARENTH
    (51) EA -> . TA
    (52) EA -> . EA PLUS TA
    (53) EA -> . EA MINUS TA
    (58) TA -> . FA
    (59) TA -> . TA MULTIPLY FA
    (60) TA -> . TA DIVISION FA
    (54) FA -> . CONSTANT
    (55) FA -> . ID
    (56) FA -> . MAT
    (57) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (74) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 28
    ID              shift and go to state 27
    OPEN_PARENTH    shift and go to state 30

    EA                             shift and go to state 46
    TA                             shift and go to state 26
    FA                             shift and go to state 29
    MAT                            shift and go to state 31

state 31

    (56) FA -> MAT .

    MULTIPLY        reduce using rule 56 (FA -> MAT .)
    DIVISION        reduce using rule 56 (FA -> MAT .)
    PLUS            reduce using rule 56 (FA -> MAT .)
    MINUS           reduce using rule 56 (FA -> MAT .)
    NOT_EQUAL       reduce using rule 56 (FA -> MAT .)
    LOWER_THAN      reduce using rule 56 (FA -> MAT .)
    BIGGER_THAN     reduce using rule 56 (FA -> MAT .)
    EQUAL_EQUAL     reduce using rule 56 (FA -> MAT .)
    CLOSING_PARENTH reduce using rule 56 (FA -> MAT .)
    SEMICOLON       reduce using rule 56 (FA -> MAT .)
    COMA            reduce using rule 56 (FA -> MAT .)
    AND             reduce using rule 56 (FA -> MAT .)
    OR              reduce using rule 56 (FA -> MAT .)


state 32

    (77) MAT_BRACKET -> OPEN_BRACKET ID . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 47


state 33

    (75) MAT_BRACKET -> OPEN_BRACKET CONSTANT . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 48


state 34

    (76) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET . CONSTANT CLOSING_BRACKET
    (78) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET . ID CLOSING_BRACKET

    CONSTANT        shift and go to state 50
    ID              shift and go to state 49


state 35

    (8) DECLARE -> DECLARE COMA ID .
    (11) ASSIGN -> ID . EQUAL EA

    SEMICOLON       reduce using rule 8 (DECLARE -> DECLARE COMA ID .)
    COMA            reduce using rule 8 (DECLARE -> DECLARE COMA ID .)
    EQUAL           shift and go to state 13


state 36

    (10) DECLARE -> DECLARE COMA ASSIGN .

    SEMICOLON       reduce using rule 10 (DECLARE -> DECLARE COMA ASSIGN .)
    COMA            reduce using rule 10 (DECLARE -> DECLARE COMA ASSIGN .)


state 37

    (4) VAR -> VAR TIPO DECLARE SEMICOLON .

    INT             reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    DOUBLE          reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    CLOSING_BRACES  reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    PRINT           reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    READ            reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    IF              reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    WHILE           reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    DO              reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    FOR             reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    ID              reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    FUNCTION        reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    MAIN            reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)


state 38

    (5) VAR -> VAR TIPO MAT SEMICOLON .

    INT             reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    DOUBLE          reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    CLOSING_BRACES  reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    PRINT           reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    READ            reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    IF              reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    WHILE           reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    DO              reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    FOR             reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    ID              reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    FUNCTION        reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    MAIN            reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)


state 39

    (12) FUNC -> FUNCTION ID OPEN_PARENTH . CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES

    CLOSING_PARENTH shift and go to state 51


state 40

    (15) M -> MAIN OPEN_PARENTH . CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES

    CLOSING_PARENTH shift and go to state 52


state 41

    (13) FUNC -> FUNC FUNCTION ID . OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES

    OPEN_PARENTH    shift and go to state 53


state 42

    (53) EA -> EA MINUS . TA
    (58) TA -> . FA
    (59) TA -> . TA MULTIPLY FA
    (60) TA -> . TA DIVISION FA
    (54) FA -> . CONSTANT
    (55) FA -> . ID
    (56) FA -> . MAT
    (57) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (74) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 28
    ID              shift and go to state 27
    OPEN_PARENTH    shift and go to state 30

    TA                             shift and go to state 54
    FA                             shift and go to state 29
    MAT                            shift and go to state 31

state 43

    (52) EA -> EA PLUS . TA
    (58) TA -> . FA
    (59) TA -> . TA MULTIPLY FA
    (60) TA -> . TA DIVISION FA
    (54) FA -> . CONSTANT
    (55) FA -> . ID
    (56) FA -> . MAT
    (57) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (74) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 28
    ID              shift and go to state 27
    OPEN_PARENTH    shift and go to state 30

    TA                             shift and go to state 55
    FA                             shift and go to state 29
    MAT                            shift and go to state 31

state 44

    (59) TA -> TA MULTIPLY . FA
    (54) FA -> . CONSTANT
    (55) FA -> . ID
    (56) FA -> . MAT
    (57) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (74) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 28
    ID              shift and go to state 27
    OPEN_PARENTH    shift and go to state 30

    FA                             shift and go to state 56
    MAT                            shift and go to state 31

state 45

    (60) TA -> TA DIVISION . FA
    (54) FA -> . CONSTANT
    (55) FA -> . ID
    (56) FA -> . MAT
    (57) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (74) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 28
    ID              shift and go to state 27
    OPEN_PARENTH    shift and go to state 30

    FA                             shift and go to state 57
    MAT                            shift and go to state 31

state 46

    (57) FA -> OPEN_PARENTH EA . CLOSING_PARENTH
    (52) EA -> EA . PLUS TA
    (53) EA -> EA . MINUS TA

    CLOSING_PARENTH shift and go to state 58
    PLUS            shift and go to state 43
    MINUS           shift and go to state 42


state 47

    (77) MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .

    OPEN_BRACKET    reduce using rule 77 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 77 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    MULTIPLY        reduce using rule 77 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    DIVISION        reduce using rule 77 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    PLUS            reduce using rule 77 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    MINUS           reduce using rule 77 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    COMA            reduce using rule 77 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    CLOSING_PARENTH reduce using rule 77 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    NOT_EQUAL       reduce using rule 77 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    LOWER_THAN      reduce using rule 77 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    BIGGER_THAN     reduce using rule 77 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    EQUAL_EQUAL     reduce using rule 77 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    AND             reduce using rule 77 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    OR              reduce using rule 77 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)


state 48

    (75) MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .

    OPEN_BRACKET    reduce using rule 75 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 75 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    MULTIPLY        reduce using rule 75 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    DIVISION        reduce using rule 75 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    PLUS            reduce using rule 75 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    MINUS           reduce using rule 75 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    COMA            reduce using rule 75 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    CLOSING_PARENTH reduce using rule 75 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    NOT_EQUAL       reduce using rule 75 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    LOWER_THAN      reduce using rule 75 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    BIGGER_THAN     reduce using rule 75 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    EQUAL_EQUAL     reduce using rule 75 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    AND             reduce using rule 75 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    OR              reduce using rule 75 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)


state 49

    (78) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 59


state 50

    (76) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 60


state 51

    (12) FUNC -> FUNCTION ID OPEN_PARENTH CLOSING_PARENTH . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 61


state 52

    (15) M -> MAIN OPEN_PARENTH CLOSING_PARENTH . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 62


state 53

    (13) FUNC -> FUNC FUNCTION ID OPEN_PARENTH . CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES

    CLOSING_PARENTH shift and go to state 63


state 54

    (53) EA -> EA MINUS TA .
    (59) TA -> TA . MULTIPLY FA
    (60) TA -> TA . DIVISION FA

    PLUS            reduce using rule 53 (EA -> EA MINUS TA .)
    MINUS           reduce using rule 53 (EA -> EA MINUS TA .)
    NOT_EQUAL       reduce using rule 53 (EA -> EA MINUS TA .)
    LOWER_THAN      reduce using rule 53 (EA -> EA MINUS TA .)
    BIGGER_THAN     reduce using rule 53 (EA -> EA MINUS TA .)
    EQUAL_EQUAL     reduce using rule 53 (EA -> EA MINUS TA .)
    SEMICOLON       reduce using rule 53 (EA -> EA MINUS TA .)
    COMA            reduce using rule 53 (EA -> EA MINUS TA .)
    CLOSING_PARENTH reduce using rule 53 (EA -> EA MINUS TA .)
    AND             reduce using rule 53 (EA -> EA MINUS TA .)
    OR              reduce using rule 53 (EA -> EA MINUS TA .)
    MULTIPLY        shift and go to state 44
    DIVISION        shift and go to state 45


state 55

    (52) EA -> EA PLUS TA .
    (59) TA -> TA . MULTIPLY FA
    (60) TA -> TA . DIVISION FA

    PLUS            reduce using rule 52 (EA -> EA PLUS TA .)
    MINUS           reduce using rule 52 (EA -> EA PLUS TA .)
    NOT_EQUAL       reduce using rule 52 (EA -> EA PLUS TA .)
    LOWER_THAN      reduce using rule 52 (EA -> EA PLUS TA .)
    BIGGER_THAN     reduce using rule 52 (EA -> EA PLUS TA .)
    EQUAL_EQUAL     reduce using rule 52 (EA -> EA PLUS TA .)
    SEMICOLON       reduce using rule 52 (EA -> EA PLUS TA .)
    COMA            reduce using rule 52 (EA -> EA PLUS TA .)
    CLOSING_PARENTH reduce using rule 52 (EA -> EA PLUS TA .)
    AND             reduce using rule 52 (EA -> EA PLUS TA .)
    OR              reduce using rule 52 (EA -> EA PLUS TA .)
    MULTIPLY        shift and go to state 44
    DIVISION        shift and go to state 45


state 56

    (59) TA -> TA MULTIPLY FA .

    MULTIPLY        reduce using rule 59 (TA -> TA MULTIPLY FA .)
    DIVISION        reduce using rule 59 (TA -> TA MULTIPLY FA .)
    CLOSING_PARENTH reduce using rule 59 (TA -> TA MULTIPLY FA .)
    PLUS            reduce using rule 59 (TA -> TA MULTIPLY FA .)
    MINUS           reduce using rule 59 (TA -> TA MULTIPLY FA .)
    NOT_EQUAL       reduce using rule 59 (TA -> TA MULTIPLY FA .)
    LOWER_THAN      reduce using rule 59 (TA -> TA MULTIPLY FA .)
    BIGGER_THAN     reduce using rule 59 (TA -> TA MULTIPLY FA .)
    EQUAL_EQUAL     reduce using rule 59 (TA -> TA MULTIPLY FA .)
    SEMICOLON       reduce using rule 59 (TA -> TA MULTIPLY FA .)
    COMA            reduce using rule 59 (TA -> TA MULTIPLY FA .)
    AND             reduce using rule 59 (TA -> TA MULTIPLY FA .)
    OR              reduce using rule 59 (TA -> TA MULTIPLY FA .)


state 57

    (60) TA -> TA DIVISION FA .

    MULTIPLY        reduce using rule 60 (TA -> TA DIVISION FA .)
    DIVISION        reduce using rule 60 (TA -> TA DIVISION FA .)
    CLOSING_PARENTH reduce using rule 60 (TA -> TA DIVISION FA .)
    PLUS            reduce using rule 60 (TA -> TA DIVISION FA .)
    MINUS           reduce using rule 60 (TA -> TA DIVISION FA .)
    NOT_EQUAL       reduce using rule 60 (TA -> TA DIVISION FA .)
    LOWER_THAN      reduce using rule 60 (TA -> TA DIVISION FA .)
    BIGGER_THAN     reduce using rule 60 (TA -> TA DIVISION FA .)
    EQUAL_EQUAL     reduce using rule 60 (TA -> TA DIVISION FA .)
    SEMICOLON       reduce using rule 60 (TA -> TA DIVISION FA .)
    COMA            reduce using rule 60 (TA -> TA DIVISION FA .)
    AND             reduce using rule 60 (TA -> TA DIVISION FA .)
    OR              reduce using rule 60 (TA -> TA DIVISION FA .)


state 58

    (57) FA -> OPEN_PARENTH EA CLOSING_PARENTH .

    MULTIPLY        reduce using rule 57 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    DIVISION        reduce using rule 57 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    PLUS            reduce using rule 57 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    MINUS           reduce using rule 57 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    NOT_EQUAL       reduce using rule 57 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    LOWER_THAN      reduce using rule 57 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    BIGGER_THAN     reduce using rule 57 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    EQUAL_EQUAL     reduce using rule 57 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    CLOSING_PARENTH reduce using rule 57 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    SEMICOLON       reduce using rule 57 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    COMA            reduce using rule 57 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    AND             reduce using rule 57 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    OR              reduce using rule 57 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)


state 59

    (78) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .

    OPEN_BRACKET    reduce using rule 78 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 78 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    MULTIPLY        reduce using rule 78 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    DIVISION        reduce using rule 78 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    PLUS            reduce using rule 78 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    MINUS           reduce using rule 78 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    COMA            reduce using rule 78 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    CLOSING_PARENTH reduce using rule 78 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    NOT_EQUAL       reduce using rule 78 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    LOWER_THAN      reduce using rule 78 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    BIGGER_THAN     reduce using rule 78 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    EQUAL_EQUAL     reduce using rule 78 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    AND             reduce using rule 78 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    OR              reduce using rule 78 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)


state 60

    (76) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .

    OPEN_BRACKET    reduce using rule 76 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 76 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    MULTIPLY        reduce using rule 76 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    DIVISION        reduce using rule 76 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    PLUS            reduce using rule 76 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    MINUS           reduce using rule 76 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    COMA            reduce using rule 76 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    CLOSING_PARENTH reduce using rule 76 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    NOT_EQUAL       reduce using rule 76 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    LOWER_THAN      reduce using rule 76 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    BIGGER_THAN     reduce using rule 76 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    EQUAL_EQUAL     reduce using rule 76 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    AND             reduce using rule 76 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    OR              reduce using rule 76 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)


state 61

    (12) FUNC -> FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES . S CLOSING_BRACES
    (18) S -> . STATEMENTS
    (19) S -> . S STATEMENTS
    (20) S -> .
    (21) STATEMENTS -> . VAR
    (22) STATEMENTS -> . IDSTAT
    (23) STATEMENTS -> . PRINTSTAT
    (24) STATEMENTS -> . READSTAT
    (25) STATEMENTS -> . IFSTAT
    (26) STATEMENTS -> . WHILESTAT
    (27) STATEMENTS -> . DOSTAT
    (28) STATEMENTS -> . FORSTAT
    (29) STATEMENTS -> . FUNCSTAT
    (30) STATEMENTS -> . INC_STAT
    (31) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (32) IDSTAT -> . ASSIGN SEMICOLON
    (33) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (34) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (35) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (36) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (37) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (42) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (45) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (46) FORSTAT -> . FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S
    (47) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (48) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (49) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (16) TIPO -> . INT
    (17) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for READ resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for IF resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for DO resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for FOR resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for ID resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 6 (VAR -> .)
    PRINT           shift and go to state 82
    READ            shift and go to state 77
    IF              shift and go to state 69
    WHILE           shift and go to state 64
    DO              shift and go to state 65
    FOR             shift and go to state 76
    ID              shift and go to state 68
    INT             shift and go to state 3
    DOUBLE          shift and go to state 1

  ! CLOSING_BRACES  [ reduce using rule 20 (S -> .) ]
  ! PRINT           [ reduce using rule 20 (S -> .) ]
  ! READ            [ reduce using rule 20 (S -> .) ]
  ! IF              [ reduce using rule 20 (S -> .) ]
  ! WHILE           [ reduce using rule 20 (S -> .) ]
  ! DO              [ reduce using rule 20 (S -> .) ]
  ! FOR             [ reduce using rule 20 (S -> .) ]
  ! ID              [ reduce using rule 20 (S -> .) ]
  ! INT             [ reduce using rule 20 (S -> .) ]
  ! DOUBLE          [ reduce using rule 20 (S -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 31 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 31 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    INC_STAT                       shift and go to state 78
    FORSTAT                        shift and go to state 79
    TIPO                           shift and go to state 2
    S                              shift and go to state 66
    READSTAT                       shift and go to state 80
    STATEMENTS                     shift and go to state 81
    VAR                            shift and go to state 67
    WHILESTAT                      shift and go to state 70
    IDSTAT                         shift and go to state 71
    DOSTAT                         shift and go to state 72
    ASSIGN                         shift and go to state 73
    IFSTAT                         shift and go to state 74
    PRINTSTAT                      shift and go to state 75
    FUNCSTAT                       shift and go to state 83

state 62

    (15) M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES . S CLOSING_BRACES
    (18) S -> . STATEMENTS
    (19) S -> . S STATEMENTS
    (20) S -> .
    (21) STATEMENTS -> . VAR
    (22) STATEMENTS -> . IDSTAT
    (23) STATEMENTS -> . PRINTSTAT
    (24) STATEMENTS -> . READSTAT
    (25) STATEMENTS -> . IFSTAT
    (26) STATEMENTS -> . WHILESTAT
    (27) STATEMENTS -> . DOSTAT
    (28) STATEMENTS -> . FORSTAT
    (29) STATEMENTS -> . FUNCSTAT
    (30) STATEMENTS -> . INC_STAT
    (31) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (32) IDSTAT -> . ASSIGN SEMICOLON
    (33) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (34) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (35) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (36) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (37) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (42) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (45) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (46) FORSTAT -> . FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S
    (47) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (48) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (49) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (16) TIPO -> . INT
    (17) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for READ resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for IF resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for DO resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for FOR resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for ID resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 6 (VAR -> .)
    PRINT           shift and go to state 82
    READ            shift and go to state 77
    IF              shift and go to state 69
    WHILE           shift and go to state 64
    DO              shift and go to state 65
    FOR             shift and go to state 76
    ID              shift and go to state 68
    INT             shift and go to state 3
    DOUBLE          shift and go to state 1

  ! CLOSING_BRACES  [ reduce using rule 20 (S -> .) ]
  ! PRINT           [ reduce using rule 20 (S -> .) ]
  ! READ            [ reduce using rule 20 (S -> .) ]
  ! IF              [ reduce using rule 20 (S -> .) ]
  ! WHILE           [ reduce using rule 20 (S -> .) ]
  ! DO              [ reduce using rule 20 (S -> .) ]
  ! FOR             [ reduce using rule 20 (S -> .) ]
  ! ID              [ reduce using rule 20 (S -> .) ]
  ! INT             [ reduce using rule 20 (S -> .) ]
  ! DOUBLE          [ reduce using rule 20 (S -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 31 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 31 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    INC_STAT                       shift and go to state 78
    FORSTAT                        shift and go to state 79
    TIPO                           shift and go to state 2
    S                              shift and go to state 84
    READSTAT                       shift and go to state 80
    STATEMENTS                     shift and go to state 81
    VAR                            shift and go to state 67
    WHILESTAT                      shift and go to state 70
    IDSTAT                         shift and go to state 71
    DOSTAT                         shift and go to state 72
    ASSIGN                         shift and go to state 73
    IFSTAT                         shift and go to state 74
    PRINTSTAT                      shift and go to state 75
    FUNCSTAT                       shift and go to state 83

state 63

    (13) FUNC -> FUNC FUNCTION ID OPEN_PARENTH CLOSING_PARENTH . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 85


state 64

    (42) WHILESTAT -> WHILE . WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (43) WHILE_AUX_1 -> . empty
    (41) empty -> .

    OPEN_PARENTH    reduce using rule 41 (empty -> .)

    WHILE_AUX_1                    shift and go to state 86
    empty                          shift and go to state 87

state 65

    (45) DOSTAT -> DO . WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (43) WHILE_AUX_1 -> . empty
    (41) empty -> .

    OPEN_BRACES     reduce using rule 41 (empty -> .)

    WHILE_AUX_1                    shift and go to state 88
    empty                          shift and go to state 87

state 66

    (12) FUNC -> FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S . CLOSING_BRACES
    (19) S -> S . STATEMENTS
    (21) STATEMENTS -> . VAR
    (22) STATEMENTS -> . IDSTAT
    (23) STATEMENTS -> . PRINTSTAT
    (24) STATEMENTS -> . READSTAT
    (25) STATEMENTS -> . IFSTAT
    (26) STATEMENTS -> . WHILESTAT
    (27) STATEMENTS -> . DOSTAT
    (28) STATEMENTS -> . FORSTAT
    (29) STATEMENTS -> . FUNCSTAT
    (30) STATEMENTS -> . INC_STAT
    (31) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (32) IDSTAT -> . ASSIGN SEMICOLON
    (33) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (34) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (35) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (36) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (37) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (42) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (45) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (46) FORSTAT -> . FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S
    (47) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (48) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (49) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (16) TIPO -> . INT
    (17) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  shift and go to state 89
    PRINT           shift and go to state 82
    READ            shift and go to state 77
    IF              shift and go to state 69
    WHILE           shift and go to state 64
    DO              shift and go to state 65
    FOR             shift and go to state 76
    ID              shift and go to state 68
    INT             shift and go to state 3
    DOUBLE          shift and go to state 1

  ! CLOSING_BRACES  [ reduce using rule 31 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 31 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    INC_STAT                       shift and go to state 78
    FORSTAT                        shift and go to state 79
    TIPO                           shift and go to state 2
    READSTAT                       shift and go to state 80
    STATEMENTS                     shift and go to state 90
    VAR                            shift and go to state 67
    WHILESTAT                      shift and go to state 70
    IDSTAT                         shift and go to state 71
    DOSTAT                         shift and go to state 72
    ASSIGN                         shift and go to state 73
    IFSTAT                         shift and go to state 74
    PRINTSTAT                      shift and go to state 75
    FUNCSTAT                       shift and go to state 83

state 67

    (21) STATEMENTS -> VAR .
    (4) VAR -> VAR . TIPO DECLARE SEMICOLON
    (5) VAR -> VAR . TIPO MAT SEMICOLON
    (16) TIPO -> . INT
    (17) TIPO -> . DOUBLE

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 21 (STATEMENTS -> VAR .)
    PRINT           reduce using rule 21 (STATEMENTS -> VAR .)
    READ            reduce using rule 21 (STATEMENTS -> VAR .)
    IF              reduce using rule 21 (STATEMENTS -> VAR .)
    WHILE           reduce using rule 21 (STATEMENTS -> VAR .)
    DO              reduce using rule 21 (STATEMENTS -> VAR .)
    FOR             reduce using rule 21 (STATEMENTS -> VAR .)
    ID              reduce using rule 21 (STATEMENTS -> VAR .)
    INT             shift and go to state 3
    DOUBLE          shift and go to state 1

  ! INT             [ reduce using rule 21 (STATEMENTS -> VAR .) ]
  ! DOUBLE          [ reduce using rule 21 (STATEMENTS -> VAR .) ]

    TIPO                           shift and go to state 10

state 68

    (47) FUNCSTAT -> ID . OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (48) INC_STAT -> ID . PLUSPLUS SEMICOLON
    (49) INC_STAT -> ID . MINUSMINUS SEMICOLON
    (11) ASSIGN -> ID . EQUAL EA

    OPEN_PARENTH    shift and go to state 92
    PLUSPLUS        shift and go to state 91
    MINUSMINUS      shift and go to state 93
    EQUAL           shift and go to state 13


state 69

    (36) IFSTAT -> IF . OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (37) IFSTAT -> IF . OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3

    OPEN_PARENTH    shift and go to state 94


state 70

    (26) STATEMENTS -> WHILESTAT .

    CLOSING_BRACES  reduce using rule 26 (STATEMENTS -> WHILESTAT .)
    PRINT           reduce using rule 26 (STATEMENTS -> WHILESTAT .)
    READ            reduce using rule 26 (STATEMENTS -> WHILESTAT .)
    IF              reduce using rule 26 (STATEMENTS -> WHILESTAT .)
    WHILE           reduce using rule 26 (STATEMENTS -> WHILESTAT .)
    DO              reduce using rule 26 (STATEMENTS -> WHILESTAT .)
    FOR             reduce using rule 26 (STATEMENTS -> WHILESTAT .)
    ID              reduce using rule 26 (STATEMENTS -> WHILESTAT .)
    INT             reduce using rule 26 (STATEMENTS -> WHILESTAT .)
    DOUBLE          reduce using rule 26 (STATEMENTS -> WHILESTAT .)


state 71

    (22) STATEMENTS -> IDSTAT .

    CLOSING_BRACES  reduce using rule 22 (STATEMENTS -> IDSTAT .)
    PRINT           reduce using rule 22 (STATEMENTS -> IDSTAT .)
    READ            reduce using rule 22 (STATEMENTS -> IDSTAT .)
    IF              reduce using rule 22 (STATEMENTS -> IDSTAT .)
    WHILE           reduce using rule 22 (STATEMENTS -> IDSTAT .)
    DO              reduce using rule 22 (STATEMENTS -> IDSTAT .)
    FOR             reduce using rule 22 (STATEMENTS -> IDSTAT .)
    ID              reduce using rule 22 (STATEMENTS -> IDSTAT .)
    INT             reduce using rule 22 (STATEMENTS -> IDSTAT .)
    DOUBLE          reduce using rule 22 (STATEMENTS -> IDSTAT .)


state 72

    (27) STATEMENTS -> DOSTAT .

    CLOSING_BRACES  reduce using rule 27 (STATEMENTS -> DOSTAT .)
    PRINT           reduce using rule 27 (STATEMENTS -> DOSTAT .)
    READ            reduce using rule 27 (STATEMENTS -> DOSTAT .)
    IF              reduce using rule 27 (STATEMENTS -> DOSTAT .)
    WHILE           reduce using rule 27 (STATEMENTS -> DOSTAT .)
    DO              reduce using rule 27 (STATEMENTS -> DOSTAT .)
    FOR             reduce using rule 27 (STATEMENTS -> DOSTAT .)
    ID              reduce using rule 27 (STATEMENTS -> DOSTAT .)
    INT             reduce using rule 27 (STATEMENTS -> DOSTAT .)
    DOUBLE          reduce using rule 27 (STATEMENTS -> DOSTAT .)


state 73

    (32) IDSTAT -> ASSIGN . SEMICOLON

    SEMICOLON       shift and go to state 95


state 74

    (25) STATEMENTS -> IFSTAT .

    CLOSING_BRACES  reduce using rule 25 (STATEMENTS -> IFSTAT .)
    PRINT           reduce using rule 25 (STATEMENTS -> IFSTAT .)
    READ            reduce using rule 25 (STATEMENTS -> IFSTAT .)
    IF              reduce using rule 25 (STATEMENTS -> IFSTAT .)
    WHILE           reduce using rule 25 (STATEMENTS -> IFSTAT .)
    DO              reduce using rule 25 (STATEMENTS -> IFSTAT .)
    FOR             reduce using rule 25 (STATEMENTS -> IFSTAT .)
    ID              reduce using rule 25 (STATEMENTS -> IFSTAT .)
    INT             reduce using rule 25 (STATEMENTS -> IFSTAT .)
    DOUBLE          reduce using rule 25 (STATEMENTS -> IFSTAT .)


state 75

    (23) STATEMENTS -> PRINTSTAT .

    CLOSING_BRACES  reduce using rule 23 (STATEMENTS -> PRINTSTAT .)
    PRINT           reduce using rule 23 (STATEMENTS -> PRINTSTAT .)
    READ            reduce using rule 23 (STATEMENTS -> PRINTSTAT .)
    IF              reduce using rule 23 (STATEMENTS -> PRINTSTAT .)
    WHILE           reduce using rule 23 (STATEMENTS -> PRINTSTAT .)
    DO              reduce using rule 23 (STATEMENTS -> PRINTSTAT .)
    FOR             reduce using rule 23 (STATEMENTS -> PRINTSTAT .)
    ID              reduce using rule 23 (STATEMENTS -> PRINTSTAT .)
    INT             reduce using rule 23 (STATEMENTS -> PRINTSTAT .)
    DOUBLE          reduce using rule 23 (STATEMENTS -> PRINTSTAT .)


state 76

    (46) FORSTAT -> FOR . OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S

    OPEN_PARENTH    shift and go to state 96


state 77

    (35) READSTAT -> READ . OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON

    OPEN_PARENTH    shift and go to state 97


state 78

    (30) STATEMENTS -> INC_STAT .

    CLOSING_BRACES  reduce using rule 30 (STATEMENTS -> INC_STAT .)
    PRINT           reduce using rule 30 (STATEMENTS -> INC_STAT .)
    READ            reduce using rule 30 (STATEMENTS -> INC_STAT .)
    IF              reduce using rule 30 (STATEMENTS -> INC_STAT .)
    WHILE           reduce using rule 30 (STATEMENTS -> INC_STAT .)
    DO              reduce using rule 30 (STATEMENTS -> INC_STAT .)
    FOR             reduce using rule 30 (STATEMENTS -> INC_STAT .)
    ID              reduce using rule 30 (STATEMENTS -> INC_STAT .)
    INT             reduce using rule 30 (STATEMENTS -> INC_STAT .)
    DOUBLE          reduce using rule 30 (STATEMENTS -> INC_STAT .)


state 79

    (28) STATEMENTS -> FORSTAT .

    CLOSING_BRACES  reduce using rule 28 (STATEMENTS -> FORSTAT .)
    PRINT           reduce using rule 28 (STATEMENTS -> FORSTAT .)
    READ            reduce using rule 28 (STATEMENTS -> FORSTAT .)
    IF              reduce using rule 28 (STATEMENTS -> FORSTAT .)
    WHILE           reduce using rule 28 (STATEMENTS -> FORSTAT .)
    DO              reduce using rule 28 (STATEMENTS -> FORSTAT .)
    FOR             reduce using rule 28 (STATEMENTS -> FORSTAT .)
    ID              reduce using rule 28 (STATEMENTS -> FORSTAT .)
    INT             reduce using rule 28 (STATEMENTS -> FORSTAT .)
    DOUBLE          reduce using rule 28 (STATEMENTS -> FORSTAT .)


state 80

    (24) STATEMENTS -> READSTAT .

    CLOSING_BRACES  reduce using rule 24 (STATEMENTS -> READSTAT .)
    PRINT           reduce using rule 24 (STATEMENTS -> READSTAT .)
    READ            reduce using rule 24 (STATEMENTS -> READSTAT .)
    IF              reduce using rule 24 (STATEMENTS -> READSTAT .)
    WHILE           reduce using rule 24 (STATEMENTS -> READSTAT .)
    DO              reduce using rule 24 (STATEMENTS -> READSTAT .)
    FOR             reduce using rule 24 (STATEMENTS -> READSTAT .)
    ID              reduce using rule 24 (STATEMENTS -> READSTAT .)
    INT             reduce using rule 24 (STATEMENTS -> READSTAT .)
    DOUBLE          reduce using rule 24 (STATEMENTS -> READSTAT .)


state 81

    (18) S -> STATEMENTS .

    CLOSING_BRACES  reduce using rule 18 (S -> STATEMENTS .)
    PRINT           reduce using rule 18 (S -> STATEMENTS .)
    READ            reduce using rule 18 (S -> STATEMENTS .)
    IF              reduce using rule 18 (S -> STATEMENTS .)
    WHILE           reduce using rule 18 (S -> STATEMENTS .)
    DO              reduce using rule 18 (S -> STATEMENTS .)
    FOR             reduce using rule 18 (S -> STATEMENTS .)
    ID              reduce using rule 18 (S -> STATEMENTS .)
    INT             reduce using rule 18 (S -> STATEMENTS .)
    DOUBLE          reduce using rule 18 (S -> STATEMENTS .)


state 82

    (33) PRINTSTAT -> PRINT . OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (34) PRINTSTAT -> PRINT . OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON

    OPEN_PARENTH    shift and go to state 98


state 83

    (29) STATEMENTS -> FUNCSTAT .

    CLOSING_BRACES  reduce using rule 29 (STATEMENTS -> FUNCSTAT .)
    PRINT           reduce using rule 29 (STATEMENTS -> FUNCSTAT .)
    READ            reduce using rule 29 (STATEMENTS -> FUNCSTAT .)
    IF              reduce using rule 29 (STATEMENTS -> FUNCSTAT .)
    WHILE           reduce using rule 29 (STATEMENTS -> FUNCSTAT .)
    DO              reduce using rule 29 (STATEMENTS -> FUNCSTAT .)
    FOR             reduce using rule 29 (STATEMENTS -> FUNCSTAT .)
    ID              reduce using rule 29 (STATEMENTS -> FUNCSTAT .)
    INT             reduce using rule 29 (STATEMENTS -> FUNCSTAT .)
    DOUBLE          reduce using rule 29 (STATEMENTS -> FUNCSTAT .)


state 84

    (15) M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S . CLOSING_BRACES
    (19) S -> S . STATEMENTS
    (21) STATEMENTS -> . VAR
    (22) STATEMENTS -> . IDSTAT
    (23) STATEMENTS -> . PRINTSTAT
    (24) STATEMENTS -> . READSTAT
    (25) STATEMENTS -> . IFSTAT
    (26) STATEMENTS -> . WHILESTAT
    (27) STATEMENTS -> . DOSTAT
    (28) STATEMENTS -> . FORSTAT
    (29) STATEMENTS -> . FUNCSTAT
    (30) STATEMENTS -> . INC_STAT
    (31) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (32) IDSTAT -> . ASSIGN SEMICOLON
    (33) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (34) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (35) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (36) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (37) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (42) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (45) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (46) FORSTAT -> . FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S
    (47) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (48) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (49) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (16) TIPO -> . INT
    (17) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  shift and go to state 99
    PRINT           shift and go to state 82
    READ            shift and go to state 77
    IF              shift and go to state 69
    WHILE           shift and go to state 64
    DO              shift and go to state 65
    FOR             shift and go to state 76
    ID              shift and go to state 68
    INT             shift and go to state 3
    DOUBLE          shift and go to state 1

  ! CLOSING_BRACES  [ reduce using rule 31 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 31 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    INC_STAT                       shift and go to state 78
    FORSTAT                        shift and go to state 79
    TIPO                           shift and go to state 2
    READSTAT                       shift and go to state 80
    STATEMENTS                     shift and go to state 90
    VAR                            shift and go to state 67
    WHILESTAT                      shift and go to state 70
    IDSTAT                         shift and go to state 71
    DOSTAT                         shift and go to state 72
    ASSIGN                         shift and go to state 73
    IFSTAT                         shift and go to state 74
    PRINTSTAT                      shift and go to state 75
    FUNCSTAT                       shift and go to state 83

state 85

    (13) FUNC -> FUNC FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES . S CLOSING_BRACES
    (18) S -> . STATEMENTS
    (19) S -> . S STATEMENTS
    (20) S -> .
    (21) STATEMENTS -> . VAR
    (22) STATEMENTS -> . IDSTAT
    (23) STATEMENTS -> . PRINTSTAT
    (24) STATEMENTS -> . READSTAT
    (25) STATEMENTS -> . IFSTAT
    (26) STATEMENTS -> . WHILESTAT
    (27) STATEMENTS -> . DOSTAT
    (28) STATEMENTS -> . FORSTAT
    (29) STATEMENTS -> . FUNCSTAT
    (30) STATEMENTS -> . INC_STAT
    (31) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (32) IDSTAT -> . ASSIGN SEMICOLON
    (33) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (34) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (35) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (36) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (37) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (42) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (45) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (46) FORSTAT -> . FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S
    (47) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (48) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (49) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (16) TIPO -> . INT
    (17) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for READ resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for IF resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for DO resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for FOR resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for ID resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 6 (VAR -> .)
    PRINT           shift and go to state 82
    READ            shift and go to state 77
    IF              shift and go to state 69
    WHILE           shift and go to state 64
    DO              shift and go to state 65
    FOR             shift and go to state 76
    ID              shift and go to state 68
    INT             shift and go to state 3
    DOUBLE          shift and go to state 1

  ! CLOSING_BRACES  [ reduce using rule 20 (S -> .) ]
  ! PRINT           [ reduce using rule 20 (S -> .) ]
  ! READ            [ reduce using rule 20 (S -> .) ]
  ! IF              [ reduce using rule 20 (S -> .) ]
  ! WHILE           [ reduce using rule 20 (S -> .) ]
  ! DO              [ reduce using rule 20 (S -> .) ]
  ! FOR             [ reduce using rule 20 (S -> .) ]
  ! ID              [ reduce using rule 20 (S -> .) ]
  ! INT             [ reduce using rule 20 (S -> .) ]
  ! DOUBLE          [ reduce using rule 20 (S -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 31 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 31 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    INC_STAT                       shift and go to state 78
    FORSTAT                        shift and go to state 79
    TIPO                           shift and go to state 2
    S                              shift and go to state 100
    READSTAT                       shift and go to state 80
    STATEMENTS                     shift and go to state 81
    VAR                            shift and go to state 67
    WHILESTAT                      shift and go to state 70
    IDSTAT                         shift and go to state 71
    DOSTAT                         shift and go to state 72
    ASSIGN                         shift and go to state 73
    IFSTAT                         shift and go to state 74
    PRINTSTAT                      shift and go to state 75
    FUNCSTAT                       shift and go to state 83

state 86

    (42) WHILESTAT -> WHILE WHILE_AUX_1 . OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S

    OPEN_PARENTH    shift and go to state 101


state 87

    (43) WHILE_AUX_1 -> empty .

    OPEN_PARENTH    reduce using rule 43 (WHILE_AUX_1 -> empty .)
    OPEN_BRACES     reduce using rule 43 (WHILE_AUX_1 -> empty .)


state 88

    (45) DOSTAT -> DO WHILE_AUX_1 . IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (50) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 102

    IN_S                           shift and go to state 103

state 89

    (12) FUNC -> FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES .

    FUNCTION        reduce using rule 12 (FUNC -> FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES .)
    MAIN            reduce using rule 12 (FUNC -> FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES .)


state 90

    (19) S -> S STATEMENTS .

    CLOSING_BRACES  reduce using rule 19 (S -> S STATEMENTS .)
    PRINT           reduce using rule 19 (S -> S STATEMENTS .)
    READ            reduce using rule 19 (S -> S STATEMENTS .)
    IF              reduce using rule 19 (S -> S STATEMENTS .)
    WHILE           reduce using rule 19 (S -> S STATEMENTS .)
    DO              reduce using rule 19 (S -> S STATEMENTS .)
    FOR             reduce using rule 19 (S -> S STATEMENTS .)
    ID              reduce using rule 19 (S -> S STATEMENTS .)
    INT             reduce using rule 19 (S -> S STATEMENTS .)
    DOUBLE          reduce using rule 19 (S -> S STATEMENTS .)


state 91

    (48) INC_STAT -> ID PLUSPLUS . SEMICOLON

    SEMICOLON       shift and go to state 104


state 92

    (47) FUNCSTAT -> ID OPEN_PARENTH . CLOSING_PARENTH SEMICOLON

    CLOSING_PARENTH shift and go to state 105


state 93

    (49) INC_STAT -> ID MINUSMINUS . SEMICOLON

    SEMICOLON       shift and go to state 106


state 94

    (36) IFSTAT -> IF OPEN_PARENTH . EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (37) IFSTAT -> IF OPEN_PARENTH . EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (61) EL -> . TL
    (62) EL -> . EL OR TL
    (63) TL -> . FL
    (64) TL -> . TL AND FL
    (65) FL -> . NL OPERATORS NL
    (66) FL -> . EA OPERATORS EA
    (67) FL -> . NL
    (68) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (69) NL -> . NOT EL
    (51) EA -> . TA
    (52) EA -> . EA PLUS TA
    (53) EA -> . EA MINUS TA
    (58) TA -> . FA
    (59) TA -> . TA MULTIPLY FA
    (60) TA -> . TA DIVISION FA
    (54) FA -> . CONSTANT
    (55) FA -> . ID
    (56) FA -> . MAT
    (57) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (74) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 109
    NOT             shift and go to state 107
    CONSTANT        shift and go to state 28
    ID              shift and go to state 27

    EA                             shift and go to state 110
    TA                             shift and go to state 26
    TL                             shift and go to state 111
    FL                             shift and go to state 112
    NL                             shift and go to state 108
    FA                             shift and go to state 29
    EL                             shift and go to state 113
    MAT                            shift and go to state 31

state 95

    (32) IDSTAT -> ASSIGN SEMICOLON .

    CLOSING_BRACES  reduce using rule 32 (IDSTAT -> ASSIGN SEMICOLON .)
    PRINT           reduce using rule 32 (IDSTAT -> ASSIGN SEMICOLON .)
    READ            reduce using rule 32 (IDSTAT -> ASSIGN SEMICOLON .)
    IF              reduce using rule 32 (IDSTAT -> ASSIGN SEMICOLON .)
    WHILE           reduce using rule 32 (IDSTAT -> ASSIGN SEMICOLON .)
    DO              reduce using rule 32 (IDSTAT -> ASSIGN SEMICOLON .)
    FOR             reduce using rule 32 (IDSTAT -> ASSIGN SEMICOLON .)
    ID              reduce using rule 32 (IDSTAT -> ASSIGN SEMICOLON .)
    INT             reduce using rule 32 (IDSTAT -> ASSIGN SEMICOLON .)
    DOUBLE          reduce using rule 32 (IDSTAT -> ASSIGN SEMICOLON .)


state 96

    (46) FORSTAT -> FOR OPEN_PARENTH . ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S

    ID              shift and go to state 114


state 97

    (35) READSTAT -> READ OPEN_PARENTH . EA CLOSING_PARENTH SEMICOLON
    (51) EA -> . TA
    (52) EA -> . EA PLUS TA
    (53) EA -> . EA MINUS TA
    (58) TA -> . FA
    (59) TA -> . TA MULTIPLY FA
    (60) TA -> . TA DIVISION FA
    (54) FA -> . CONSTANT
    (55) FA -> . ID
    (56) FA -> . MAT
    (57) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (74) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 28
    ID              shift and go to state 27
    OPEN_PARENTH    shift and go to state 30

    EA                             shift and go to state 115
    TA                             shift and go to state 26
    FA                             shift and go to state 29
    MAT                            shift and go to state 31

state 98

    (33) PRINTSTAT -> PRINT OPEN_PARENTH . EA CLOSING_PARENTH SEMICOLON
    (34) PRINTSTAT -> PRINT OPEN_PARENTH . STRING CLOSING_PARENTH SEMICOLON
    (51) EA -> . TA
    (52) EA -> . EA PLUS TA
    (53) EA -> . EA MINUS TA
    (58) TA -> . FA
    (59) TA -> . TA MULTIPLY FA
    (60) TA -> . TA DIVISION FA
    (54) FA -> . CONSTANT
    (55) FA -> . ID
    (56) FA -> . MAT
    (57) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (74) MAT -> . ID MAT_BRACKET

    STRING          shift and go to state 117
    CONSTANT        shift and go to state 28
    ID              shift and go to state 27
    OPEN_PARENTH    shift and go to state 30

    EA                             shift and go to state 116
    TA                             shift and go to state 26
    FA                             shift and go to state 29
    MAT                            shift and go to state 31

state 99

    (15) M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES .

    $end            reduce using rule 15 (M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES .)


state 100

    (13) FUNC -> FUNC FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S . CLOSING_BRACES
    (19) S -> S . STATEMENTS
    (21) STATEMENTS -> . VAR
    (22) STATEMENTS -> . IDSTAT
    (23) STATEMENTS -> . PRINTSTAT
    (24) STATEMENTS -> . READSTAT
    (25) STATEMENTS -> . IFSTAT
    (26) STATEMENTS -> . WHILESTAT
    (27) STATEMENTS -> . DOSTAT
    (28) STATEMENTS -> . FORSTAT
    (29) STATEMENTS -> . FUNCSTAT
    (30) STATEMENTS -> . INC_STAT
    (31) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (32) IDSTAT -> . ASSIGN SEMICOLON
    (33) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (34) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (35) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (36) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (37) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (42) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (45) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (46) FORSTAT -> . FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S
    (47) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (48) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (49) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (16) TIPO -> . INT
    (17) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  shift and go to state 118
    PRINT           shift and go to state 82
    READ            shift and go to state 77
    IF              shift and go to state 69
    WHILE           shift and go to state 64
    DO              shift and go to state 65
    FOR             shift and go to state 76
    ID              shift and go to state 68
    INT             shift and go to state 3
    DOUBLE          shift and go to state 1

  ! CLOSING_BRACES  [ reduce using rule 31 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 31 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    INC_STAT                       shift and go to state 78
    FORSTAT                        shift and go to state 79
    TIPO                           shift and go to state 2
    READSTAT                       shift and go to state 80
    STATEMENTS                     shift and go to state 90
    VAR                            shift and go to state 67
    WHILESTAT                      shift and go to state 70
    IDSTAT                         shift and go to state 71
    DOSTAT                         shift and go to state 72
    ASSIGN                         shift and go to state 73
    IFSTAT                         shift and go to state 74
    PRINTSTAT                      shift and go to state 75
    FUNCSTAT                       shift and go to state 83

state 101

    (42) WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH . EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (61) EL -> . TL
    (62) EL -> . EL OR TL
    (63) TL -> . FL
    (64) TL -> . TL AND FL
    (65) FL -> . NL OPERATORS NL
    (66) FL -> . EA OPERATORS EA
    (67) FL -> . NL
    (68) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (69) NL -> . NOT EL
    (51) EA -> . TA
    (52) EA -> . EA PLUS TA
    (53) EA -> . EA MINUS TA
    (58) TA -> . FA
    (59) TA -> . TA MULTIPLY FA
    (60) TA -> . TA DIVISION FA
    (54) FA -> . CONSTANT
    (55) FA -> . ID
    (56) FA -> . MAT
    (57) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (74) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 109
    NOT             shift and go to state 107
    CONSTANT        shift and go to state 28
    ID              shift and go to state 27

    EA                             shift and go to state 110
    TA                             shift and go to state 26
    TL                             shift and go to state 111
    FL                             shift and go to state 112
    NL                             shift and go to state 108
    FA                             shift and go to state 29
    EL                             shift and go to state 119
    MAT                            shift and go to state 31

state 102

    (50) IN_S -> OPEN_BRACES . S CLOSING_BRACES
    (18) S -> . STATEMENTS
    (19) S -> . S STATEMENTS
    (20) S -> .
    (21) STATEMENTS -> . VAR
    (22) STATEMENTS -> . IDSTAT
    (23) STATEMENTS -> . PRINTSTAT
    (24) STATEMENTS -> . READSTAT
    (25) STATEMENTS -> . IFSTAT
    (26) STATEMENTS -> . WHILESTAT
    (27) STATEMENTS -> . DOSTAT
    (28) STATEMENTS -> . FORSTAT
    (29) STATEMENTS -> . FUNCSTAT
    (30) STATEMENTS -> . INC_STAT
    (31) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (32) IDSTAT -> . ASSIGN SEMICOLON
    (33) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (34) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (35) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (36) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (37) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (42) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (45) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (46) FORSTAT -> . FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S
    (47) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (48) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (49) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (16) TIPO -> . INT
    (17) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for READ resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for IF resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for DO resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for FOR resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for ID resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 6 (VAR -> .)
    PRINT           shift and go to state 82
    READ            shift and go to state 77
    IF              shift and go to state 69
    WHILE           shift and go to state 64
    DO              shift and go to state 65
    FOR             shift and go to state 76
    ID              shift and go to state 68
    INT             shift and go to state 3
    DOUBLE          shift and go to state 1

  ! CLOSING_BRACES  [ reduce using rule 20 (S -> .) ]
  ! PRINT           [ reduce using rule 20 (S -> .) ]
  ! READ            [ reduce using rule 20 (S -> .) ]
  ! IF              [ reduce using rule 20 (S -> .) ]
  ! WHILE           [ reduce using rule 20 (S -> .) ]
  ! DO              [ reduce using rule 20 (S -> .) ]
  ! FOR             [ reduce using rule 20 (S -> .) ]
  ! ID              [ reduce using rule 20 (S -> .) ]
  ! INT             [ reduce using rule 20 (S -> .) ]
  ! DOUBLE          [ reduce using rule 20 (S -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 31 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 31 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    INC_STAT                       shift and go to state 78
    FORSTAT                        shift and go to state 79
    TIPO                           shift and go to state 2
    S                              shift and go to state 120
    READSTAT                       shift and go to state 80
    STATEMENTS                     shift and go to state 81
    VAR                            shift and go to state 67
    WHILESTAT                      shift and go to state 70
    IDSTAT                         shift and go to state 71
    DOSTAT                         shift and go to state 72
    ASSIGN                         shift and go to state 73
    IFSTAT                         shift and go to state 74
    PRINTSTAT                      shift and go to state 75
    FUNCSTAT                       shift and go to state 83

state 103

    (45) DOSTAT -> DO WHILE_AUX_1 IN_S . WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON

    WHILE           shift and go to state 121


state 104

    (48) INC_STAT -> ID PLUSPLUS SEMICOLON .

    CLOSING_BRACES  reduce using rule 48 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    PRINT           reduce using rule 48 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    READ            reduce using rule 48 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    IF              reduce using rule 48 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    WHILE           reduce using rule 48 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    DO              reduce using rule 48 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    FOR             reduce using rule 48 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    ID              reduce using rule 48 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    INT             reduce using rule 48 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    DOUBLE          reduce using rule 48 (INC_STAT -> ID PLUSPLUS SEMICOLON .)


state 105

    (47) FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 122


state 106

    (49) INC_STAT -> ID MINUSMINUS SEMICOLON .

    CLOSING_BRACES  reduce using rule 49 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    PRINT           reduce using rule 49 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    READ            reduce using rule 49 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    IF              reduce using rule 49 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    WHILE           reduce using rule 49 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    DO              reduce using rule 49 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    FOR             reduce using rule 49 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    ID              reduce using rule 49 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    INT             reduce using rule 49 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    DOUBLE          reduce using rule 49 (INC_STAT -> ID MINUSMINUS SEMICOLON .)


state 107

    (69) NL -> NOT . EL
    (61) EL -> . TL
    (62) EL -> . EL OR TL
    (63) TL -> . FL
    (64) TL -> . TL AND FL
    (65) FL -> . NL OPERATORS NL
    (66) FL -> . EA OPERATORS EA
    (67) FL -> . NL
    (68) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (69) NL -> . NOT EL
    (51) EA -> . TA
    (52) EA -> . EA PLUS TA
    (53) EA -> . EA MINUS TA
    (58) TA -> . FA
    (59) TA -> . TA MULTIPLY FA
    (60) TA -> . TA DIVISION FA
    (54) FA -> . CONSTANT
    (55) FA -> . ID
    (56) FA -> . MAT
    (57) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (74) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 109
    NOT             shift and go to state 107
    CONSTANT        shift and go to state 28
    ID              shift and go to state 27

    EA                             shift and go to state 110
    TA                             shift and go to state 26
    TL                             shift and go to state 111
    FA                             shift and go to state 29
    EL                             shift and go to state 123
    FL                             shift and go to state 112
    NL                             shift and go to state 108
    MAT                            shift and go to state 31

state 108

    (65) FL -> NL . OPERATORS NL
    (67) FL -> NL .
    (70) OPERATORS -> . NOT_EQUAL
    (71) OPERATORS -> . LOWER_THAN
    (72) OPERATORS -> . BIGGER_THAN
    (73) OPERATORS -> . EQUAL_EQUAL

  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LOWER_THAN resolved as shift
  ! shift/reduce conflict for BIGGER_THAN resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
    AND             reduce using rule 67 (FL -> NL .)
    CLOSING_PARENTH reduce using rule 67 (FL -> NL .)
    OR              reduce using rule 67 (FL -> NL .)
    SEMICOLON       reduce using rule 67 (FL -> NL .)
    NOT_EQUAL       shift and go to state 127
    LOWER_THAN      shift and go to state 126
    BIGGER_THAN     shift and go to state 128
    EQUAL_EQUAL     shift and go to state 124

  ! NOT_EQUAL       [ reduce using rule 67 (FL -> NL .) ]
  ! LOWER_THAN      [ reduce using rule 67 (FL -> NL .) ]
  ! BIGGER_THAN     [ reduce using rule 67 (FL -> NL .) ]
  ! EQUAL_EQUAL     [ reduce using rule 67 (FL -> NL .) ]

    OPERATORS                      shift and go to state 125

state 109

    (68) FL -> OPEN_PARENTH . EL CLOSING_PARENTH
    (57) FA -> OPEN_PARENTH . EA CLOSING_PARENTH
    (61) EL -> . TL
    (62) EL -> . EL OR TL
    (51) EA -> . TA
    (52) EA -> . EA PLUS TA
    (53) EA -> . EA MINUS TA
    (63) TL -> . FL
    (64) TL -> . TL AND FL
    (58) TA -> . FA
    (59) TA -> . TA MULTIPLY FA
    (60) TA -> . TA DIVISION FA
    (65) FL -> . NL OPERATORS NL
    (66) FL -> . EA OPERATORS EA
    (67) FL -> . NL
    (68) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (54) FA -> . CONSTANT
    (55) FA -> . ID
    (56) FA -> . MAT
    (57) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (69) NL -> . NOT EL
    (74) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 109
    CONSTANT        shift and go to state 28
    ID              shift and go to state 27
    NOT             shift and go to state 107

    EA                             shift and go to state 129
    TA                             shift and go to state 26
    TL                             shift and go to state 111
    FA                             shift and go to state 29
    FL                             shift and go to state 112
    EL                             shift and go to state 130
    NL                             shift and go to state 108
    MAT                            shift and go to state 31

state 110

    (66) FL -> EA . OPERATORS EA
    (52) EA -> EA . PLUS TA
    (53) EA -> EA . MINUS TA
    (70) OPERATORS -> . NOT_EQUAL
    (71) OPERATORS -> . LOWER_THAN
    (72) OPERATORS -> . BIGGER_THAN
    (73) OPERATORS -> . EQUAL_EQUAL

    PLUS            shift and go to state 43
    MINUS           shift and go to state 42
    NOT_EQUAL       shift and go to state 127
    LOWER_THAN      shift and go to state 126
    BIGGER_THAN     shift and go to state 128
    EQUAL_EQUAL     shift and go to state 124

    OPERATORS                      shift and go to state 131

state 111

    (61) EL -> TL .
    (64) TL -> TL . AND FL

  ! shift/reduce conflict for AND resolved as shift
    CLOSING_PARENTH reduce using rule 61 (EL -> TL .)
    OR              reduce using rule 61 (EL -> TL .)
    NOT_EQUAL       reduce using rule 61 (EL -> TL .)
    LOWER_THAN      reduce using rule 61 (EL -> TL .)
    BIGGER_THAN     reduce using rule 61 (EL -> TL .)
    EQUAL_EQUAL     reduce using rule 61 (EL -> TL .)
    SEMICOLON       reduce using rule 61 (EL -> TL .)
    AND             shift and go to state 132

  ! AND             [ reduce using rule 61 (EL -> TL .) ]


state 112

    (63) TL -> FL .

    AND             reduce using rule 63 (TL -> FL .)
    CLOSING_PARENTH reduce using rule 63 (TL -> FL .)
    OR              reduce using rule 63 (TL -> FL .)
    NOT_EQUAL       reduce using rule 63 (TL -> FL .)
    LOWER_THAN      reduce using rule 63 (TL -> FL .)
    BIGGER_THAN     reduce using rule 63 (TL -> FL .)
    EQUAL_EQUAL     reduce using rule 63 (TL -> FL .)
    SEMICOLON       reduce using rule 63 (TL -> FL .)


state 113

    (36) IFSTAT -> IF OPEN_PARENTH EL . CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (37) IFSTAT -> IF OPEN_PARENTH EL . CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (62) EL -> EL . OR TL

    CLOSING_PARENTH shift and go to state 134
    OR              shift and go to state 133


state 114

    (46) FORSTAT -> FOR OPEN_PARENTH ID . EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S

    EQUAL           shift and go to state 135


state 115

    (35) READSTAT -> READ OPEN_PARENTH EA . CLOSING_PARENTH SEMICOLON
    (52) EA -> EA . PLUS TA
    (53) EA -> EA . MINUS TA

    CLOSING_PARENTH shift and go to state 136
    PLUS            shift and go to state 43
    MINUS           shift and go to state 42


state 116

    (33) PRINTSTAT -> PRINT OPEN_PARENTH EA . CLOSING_PARENTH SEMICOLON
    (52) EA -> EA . PLUS TA
    (53) EA -> EA . MINUS TA

    CLOSING_PARENTH shift and go to state 137
    PLUS            shift and go to state 43
    MINUS           shift and go to state 42


state 117

    (34) PRINTSTAT -> PRINT OPEN_PARENTH STRING . CLOSING_PARENTH SEMICOLON

    CLOSING_PARENTH shift and go to state 138


state 118

    (13) FUNC -> FUNC FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES .

    FUNCTION        reduce using rule 13 (FUNC -> FUNC FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES .)
    MAIN            reduce using rule 13 (FUNC -> FUNC FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES .)


state 119

    (42) WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL . CLOSING_PARENTH WHILE_AUX_2 IN_S
    (62) EL -> EL . OR TL

    CLOSING_PARENTH shift and go to state 139
    OR              shift and go to state 133


state 120

    (50) IN_S -> OPEN_BRACES S . CLOSING_BRACES
    (19) S -> S . STATEMENTS
    (21) STATEMENTS -> . VAR
    (22) STATEMENTS -> . IDSTAT
    (23) STATEMENTS -> . PRINTSTAT
    (24) STATEMENTS -> . READSTAT
    (25) STATEMENTS -> . IFSTAT
    (26) STATEMENTS -> . WHILESTAT
    (27) STATEMENTS -> . DOSTAT
    (28) STATEMENTS -> . FORSTAT
    (29) STATEMENTS -> . FUNCSTAT
    (30) STATEMENTS -> . INC_STAT
    (31) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (32) IDSTAT -> . ASSIGN SEMICOLON
    (33) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (34) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (35) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (36) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (37) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (42) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (45) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (46) FORSTAT -> . FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S
    (47) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (48) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (49) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (16) TIPO -> . INT
    (17) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  shift and go to state 140
    PRINT           shift and go to state 82
    READ            shift and go to state 77
    IF              shift and go to state 69
    WHILE           shift and go to state 64
    DO              shift and go to state 65
    FOR             shift and go to state 76
    ID              shift and go to state 68
    INT             shift and go to state 3
    DOUBLE          shift and go to state 1

  ! CLOSING_BRACES  [ reduce using rule 31 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 31 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    INC_STAT                       shift and go to state 78
    FORSTAT                        shift and go to state 79
    TIPO                           shift and go to state 2
    READSTAT                       shift and go to state 80
    STATEMENTS                     shift and go to state 90
    VAR                            shift and go to state 67
    WHILESTAT                      shift and go to state 70
    IDSTAT                         shift and go to state 71
    DOSTAT                         shift and go to state 72
    ASSIGN                         shift and go to state 73
    IFSTAT                         shift and go to state 74
    PRINTSTAT                      shift and go to state 75
    FUNCSTAT                       shift and go to state 83

state 121

    (45) DOSTAT -> DO WHILE_AUX_1 IN_S WHILE . OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON

    OPEN_PARENTH    shift and go to state 141


state 122

    (47) FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 47 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 47 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 47 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 47 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 47 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 47 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 47 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 47 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 47 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 47 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)


state 123

    (69) NL -> NOT EL .
    (62) EL -> EL . OR TL

  ! shift/reduce conflict for OR resolved as shift
    AND             reduce using rule 69 (NL -> NOT EL .)
    NOT_EQUAL       reduce using rule 69 (NL -> NOT EL .)
    LOWER_THAN      reduce using rule 69 (NL -> NOT EL .)
    BIGGER_THAN     reduce using rule 69 (NL -> NOT EL .)
    EQUAL_EQUAL     reduce using rule 69 (NL -> NOT EL .)
    CLOSING_PARENTH reduce using rule 69 (NL -> NOT EL .)
    SEMICOLON       reduce using rule 69 (NL -> NOT EL .)
    OR              shift and go to state 133

  ! OR              [ reduce using rule 69 (NL -> NOT EL .) ]


state 124

    (73) OPERATORS -> EQUAL_EQUAL .

    CONSTANT        reduce using rule 73 (OPERATORS -> EQUAL_EQUAL .)
    ID              reduce using rule 73 (OPERATORS -> EQUAL_EQUAL .)
    OPEN_PARENTH    reduce using rule 73 (OPERATORS -> EQUAL_EQUAL .)
    NOT             reduce using rule 73 (OPERATORS -> EQUAL_EQUAL .)


state 125

    (65) FL -> NL OPERATORS . NL
    (69) NL -> . NOT EL

    NOT             shift and go to state 107

    NL                             shift and go to state 142

state 126

    (71) OPERATORS -> LOWER_THAN .

    CONSTANT        reduce using rule 71 (OPERATORS -> LOWER_THAN .)
    ID              reduce using rule 71 (OPERATORS -> LOWER_THAN .)
    OPEN_PARENTH    reduce using rule 71 (OPERATORS -> LOWER_THAN .)
    NOT             reduce using rule 71 (OPERATORS -> LOWER_THAN .)


state 127

    (70) OPERATORS -> NOT_EQUAL .

    CONSTANT        reduce using rule 70 (OPERATORS -> NOT_EQUAL .)
    ID              reduce using rule 70 (OPERATORS -> NOT_EQUAL .)
    OPEN_PARENTH    reduce using rule 70 (OPERATORS -> NOT_EQUAL .)
    NOT             reduce using rule 70 (OPERATORS -> NOT_EQUAL .)


state 128

    (72) OPERATORS -> BIGGER_THAN .

    CONSTANT        reduce using rule 72 (OPERATORS -> BIGGER_THAN .)
    ID              reduce using rule 72 (OPERATORS -> BIGGER_THAN .)
    OPEN_PARENTH    reduce using rule 72 (OPERATORS -> BIGGER_THAN .)
    NOT             reduce using rule 72 (OPERATORS -> BIGGER_THAN .)


state 129

    (57) FA -> OPEN_PARENTH EA . CLOSING_PARENTH
    (52) EA -> EA . PLUS TA
    (53) EA -> EA . MINUS TA
    (66) FL -> EA . OPERATORS EA
    (70) OPERATORS -> . NOT_EQUAL
    (71) OPERATORS -> . LOWER_THAN
    (72) OPERATORS -> . BIGGER_THAN
    (73) OPERATORS -> . EQUAL_EQUAL

    CLOSING_PARENTH shift and go to state 58
    PLUS            shift and go to state 43
    MINUS           shift and go to state 42
    NOT_EQUAL       shift and go to state 127
    LOWER_THAN      shift and go to state 126
    BIGGER_THAN     shift and go to state 128
    EQUAL_EQUAL     shift and go to state 124

    OPERATORS                      shift and go to state 131

state 130

    (68) FL -> OPEN_PARENTH EL . CLOSING_PARENTH
    (62) EL -> EL . OR TL

    CLOSING_PARENTH shift and go to state 143
    OR              shift and go to state 133


state 131

    (66) FL -> EA OPERATORS . EA
    (51) EA -> . TA
    (52) EA -> . EA PLUS TA
    (53) EA -> . EA MINUS TA
    (58) TA -> . FA
    (59) TA -> . TA MULTIPLY FA
    (60) TA -> . TA DIVISION FA
    (54) FA -> . CONSTANT
    (55) FA -> . ID
    (56) FA -> . MAT
    (57) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (74) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 28
    ID              shift and go to state 27
    OPEN_PARENTH    shift and go to state 30

    EA                             shift and go to state 144
    TA                             shift and go to state 26
    FA                             shift and go to state 29
    MAT                            shift and go to state 31

state 132

    (64) TL -> TL AND . FL
    (65) FL -> . NL OPERATORS NL
    (66) FL -> . EA OPERATORS EA
    (67) FL -> . NL
    (68) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (69) NL -> . NOT EL
    (51) EA -> . TA
    (52) EA -> . EA PLUS TA
    (53) EA -> . EA MINUS TA
    (58) TA -> . FA
    (59) TA -> . TA MULTIPLY FA
    (60) TA -> . TA DIVISION FA
    (54) FA -> . CONSTANT
    (55) FA -> . ID
    (56) FA -> . MAT
    (57) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (74) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 109
    NOT             shift and go to state 107
    CONSTANT        shift and go to state 28
    ID              shift and go to state 27

    EA                             shift and go to state 110
    TA                             shift and go to state 26
    FA                             shift and go to state 29
    FL                             shift and go to state 145
    NL                             shift and go to state 108
    MAT                            shift and go to state 31

state 133

    (62) EL -> EL OR . TL
    (63) TL -> . FL
    (64) TL -> . TL AND FL
    (65) FL -> . NL OPERATORS NL
    (66) FL -> . EA OPERATORS EA
    (67) FL -> . NL
    (68) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (69) NL -> . NOT EL
    (51) EA -> . TA
    (52) EA -> . EA PLUS TA
    (53) EA -> . EA MINUS TA
    (58) TA -> . FA
    (59) TA -> . TA MULTIPLY FA
    (60) TA -> . TA DIVISION FA
    (54) FA -> . CONSTANT
    (55) FA -> . ID
    (56) FA -> . MAT
    (57) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (74) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 109
    NOT             shift and go to state 107
    CONSTANT        shift and go to state 28
    ID              shift and go to state 27

    EA                             shift and go to state 110
    TA                             shift and go to state 26
    TL                             shift and go to state 146
    FA                             shift and go to state 29
    FL                             shift and go to state 112
    NL                             shift and go to state 108
    MAT                            shift and go to state 31

state 134

    (36) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH . IF_AUX1 IN_S IF_AUX3
    (37) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH . IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (38) IF_AUX1 -> . empty
    (41) empty -> .

    OPEN_BRACES     reduce using rule 41 (empty -> .)

    empty                          shift and go to state 147
    IF_AUX1                        shift and go to state 148

state 135

    (46) FORSTAT -> FOR OPEN_PARENTH ID EQUAL . EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S
    (51) EA -> . TA
    (52) EA -> . EA PLUS TA
    (53) EA -> . EA MINUS TA
    (58) TA -> . FA
    (59) TA -> . TA MULTIPLY FA
    (60) TA -> . TA DIVISION FA
    (54) FA -> . CONSTANT
    (55) FA -> . ID
    (56) FA -> . MAT
    (57) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (74) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 28
    ID              shift and go to state 27
    OPEN_PARENTH    shift and go to state 30

    EA                             shift and go to state 149
    TA                             shift and go to state 26
    FA                             shift and go to state 29
    MAT                            shift and go to state 31

state 136

    (35) READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 150


state 137

    (33) PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 151


state 138

    (34) PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 152


state 139

    (42) WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH . WHILE_AUX_2 IN_S
    (44) WHILE_AUX_2 -> . empty
    (41) empty -> .

    OPEN_BRACES     reduce using rule 41 (empty -> .)

    WHILE_AUX_2                    shift and go to state 154
    empty                          shift and go to state 153

state 140

    (50) IN_S -> OPEN_BRACES S CLOSING_BRACES .

    CLOSING_BRACES  reduce using rule 50 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    PRINT           reduce using rule 50 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    READ            reduce using rule 50 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    IF              reduce using rule 50 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    WHILE           reduce using rule 50 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    DO              reduce using rule 50 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    FOR             reduce using rule 50 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    ID              reduce using rule 50 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    INT             reduce using rule 50 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    DOUBLE          reduce using rule 50 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    ELSE            reduce using rule 50 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)


state 141

    (45) DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH . EL CLOSING_PARENTH SEMICOLON
    (61) EL -> . TL
    (62) EL -> . EL OR TL
    (63) TL -> . FL
    (64) TL -> . TL AND FL
    (65) FL -> . NL OPERATORS NL
    (66) FL -> . EA OPERATORS EA
    (67) FL -> . NL
    (68) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (69) NL -> . NOT EL
    (51) EA -> . TA
    (52) EA -> . EA PLUS TA
    (53) EA -> . EA MINUS TA
    (58) TA -> . FA
    (59) TA -> . TA MULTIPLY FA
    (60) TA -> . TA DIVISION FA
    (54) FA -> . CONSTANT
    (55) FA -> . ID
    (56) FA -> . MAT
    (57) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (74) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 109
    NOT             shift and go to state 107
    CONSTANT        shift and go to state 28
    ID              shift and go to state 27

    EA                             shift and go to state 110
    TA                             shift and go to state 26
    TL                             shift and go to state 111
    FL                             shift and go to state 112
    NL                             shift and go to state 108
    FA                             shift and go to state 29
    EL                             shift and go to state 155
    MAT                            shift and go to state 31

state 142

    (65) FL -> NL OPERATORS NL .

    AND             reduce using rule 65 (FL -> NL OPERATORS NL .)
    CLOSING_PARENTH reduce using rule 65 (FL -> NL OPERATORS NL .)
    OR              reduce using rule 65 (FL -> NL OPERATORS NL .)
    NOT_EQUAL       reduce using rule 65 (FL -> NL OPERATORS NL .)
    LOWER_THAN      reduce using rule 65 (FL -> NL OPERATORS NL .)
    BIGGER_THAN     reduce using rule 65 (FL -> NL OPERATORS NL .)
    EQUAL_EQUAL     reduce using rule 65 (FL -> NL OPERATORS NL .)
    SEMICOLON       reduce using rule 65 (FL -> NL OPERATORS NL .)


state 143

    (68) FL -> OPEN_PARENTH EL CLOSING_PARENTH .

    AND             reduce using rule 68 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    CLOSING_PARENTH reduce using rule 68 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    OR              reduce using rule 68 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    NOT_EQUAL       reduce using rule 68 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    LOWER_THAN      reduce using rule 68 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    BIGGER_THAN     reduce using rule 68 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    EQUAL_EQUAL     reduce using rule 68 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    SEMICOLON       reduce using rule 68 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)


state 144

    (66) FL -> EA OPERATORS EA .
    (52) EA -> EA . PLUS TA
    (53) EA -> EA . MINUS TA

    AND             reduce using rule 66 (FL -> EA OPERATORS EA .)
    CLOSING_PARENTH reduce using rule 66 (FL -> EA OPERATORS EA .)
    OR              reduce using rule 66 (FL -> EA OPERATORS EA .)
    NOT_EQUAL       reduce using rule 66 (FL -> EA OPERATORS EA .)
    LOWER_THAN      reduce using rule 66 (FL -> EA OPERATORS EA .)
    BIGGER_THAN     reduce using rule 66 (FL -> EA OPERATORS EA .)
    EQUAL_EQUAL     reduce using rule 66 (FL -> EA OPERATORS EA .)
    SEMICOLON       reduce using rule 66 (FL -> EA OPERATORS EA .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 42


state 145

    (64) TL -> TL AND FL .

    AND             reduce using rule 64 (TL -> TL AND FL .)
    CLOSING_PARENTH reduce using rule 64 (TL -> TL AND FL .)
    OR              reduce using rule 64 (TL -> TL AND FL .)
    NOT_EQUAL       reduce using rule 64 (TL -> TL AND FL .)
    LOWER_THAN      reduce using rule 64 (TL -> TL AND FL .)
    BIGGER_THAN     reduce using rule 64 (TL -> TL AND FL .)
    EQUAL_EQUAL     reduce using rule 64 (TL -> TL AND FL .)
    SEMICOLON       reduce using rule 64 (TL -> TL AND FL .)


state 146

    (62) EL -> EL OR TL .
    (64) TL -> TL . AND FL

  ! shift/reduce conflict for AND resolved as shift
    CLOSING_PARENTH reduce using rule 62 (EL -> EL OR TL .)
    OR              reduce using rule 62 (EL -> EL OR TL .)
    NOT_EQUAL       reduce using rule 62 (EL -> EL OR TL .)
    LOWER_THAN      reduce using rule 62 (EL -> EL OR TL .)
    BIGGER_THAN     reduce using rule 62 (EL -> EL OR TL .)
    EQUAL_EQUAL     reduce using rule 62 (EL -> EL OR TL .)
    SEMICOLON       reduce using rule 62 (EL -> EL OR TL .)
    AND             shift and go to state 132

  ! AND             [ reduce using rule 62 (EL -> EL OR TL .) ]


state 147

    (38) IF_AUX1 -> empty .

    OPEN_BRACES     reduce using rule 38 (IF_AUX1 -> empty .)


state 148

    (36) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 . IN_S IF_AUX3
    (37) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 . IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (50) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 102

    IN_S                           shift and go to state 156

state 149

    (46) FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA . SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S
    (52) EA -> EA . PLUS TA
    (53) EA -> EA . MINUS TA

    SEMICOLON       shift and go to state 157
    PLUS            shift and go to state 43
    MINUS           shift and go to state 42


state 150

    (35) READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 35 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 35 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 35 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 35 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 35 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 35 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 35 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 35 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 35 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 35 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)


state 151

    (33) PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 33 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 33 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 33 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 33 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 33 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 33 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 33 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 33 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 33 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 33 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)


state 152

    (34) PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 34 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 34 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 34 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 34 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 34 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 34 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 34 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 34 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 34 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 34 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)


state 153

    (44) WHILE_AUX_2 -> empty .

    OPEN_BRACES     reduce using rule 44 (WHILE_AUX_2 -> empty .)


state 154

    (42) WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 . IN_S
    (50) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 102

    IN_S                           shift and go to state 158

state 155

    (45) DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL . CLOSING_PARENTH SEMICOLON
    (62) EL -> EL . OR TL

    CLOSING_PARENTH shift and go to state 159
    OR              shift and go to state 133


state 156

    (36) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S . IF_AUX3
    (37) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S . ELSE IF_AUX2 IN_S IF_AUX3
    (40) IF_AUX3 -> . empty
    (41) empty -> .

    ELSE            shift and go to state 162
    CLOSING_BRACES  reduce using rule 41 (empty -> .)
    PRINT           reduce using rule 41 (empty -> .)
    READ            reduce using rule 41 (empty -> .)
    IF              reduce using rule 41 (empty -> .)
    WHILE           reduce using rule 41 (empty -> .)
    DO              reduce using rule 41 (empty -> .)
    FOR             reduce using rule 41 (empty -> .)
    ID              reduce using rule 41 (empty -> .)
    INT             reduce using rule 41 (empty -> .)
    DOUBLE          reduce using rule 41 (empty -> .)

    empty                          shift and go to state 160
    IF_AUX3                        shift and go to state 161

state 157

    (46) FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON . EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S
    (61) EL -> . TL
    (62) EL -> . EL OR TL
    (63) TL -> . FL
    (64) TL -> . TL AND FL
    (65) FL -> . NL OPERATORS NL
    (66) FL -> . EA OPERATORS EA
    (67) FL -> . NL
    (68) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (69) NL -> . NOT EL
    (51) EA -> . TA
    (52) EA -> . EA PLUS TA
    (53) EA -> . EA MINUS TA
    (58) TA -> . FA
    (59) TA -> . TA MULTIPLY FA
    (60) TA -> . TA DIVISION FA
    (54) FA -> . CONSTANT
    (55) FA -> . ID
    (56) FA -> . MAT
    (57) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (74) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 109
    NOT             shift and go to state 107
    CONSTANT        shift and go to state 28
    ID              shift and go to state 27

    EA                             shift and go to state 110
    TA                             shift and go to state 26
    TL                             shift and go to state 111
    FA                             shift and go to state 29
    FL                             shift and go to state 112
    EL                             shift and go to state 163
    NL                             shift and go to state 108
    MAT                            shift and go to state 31

state 158

    (42) WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .

    CLOSING_BRACES  reduce using rule 42 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    PRINT           reduce using rule 42 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    READ            reduce using rule 42 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    IF              reduce using rule 42 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    WHILE           reduce using rule 42 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    DO              reduce using rule 42 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    FOR             reduce using rule 42 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    ID              reduce using rule 42 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    INT             reduce using rule 42 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    DOUBLE          reduce using rule 42 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)


state 159

    (45) DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 164


state 160

    (40) IF_AUX3 -> empty .

    CLOSING_BRACES  reduce using rule 40 (IF_AUX3 -> empty .)
    PRINT           reduce using rule 40 (IF_AUX3 -> empty .)
    READ            reduce using rule 40 (IF_AUX3 -> empty .)
    IF              reduce using rule 40 (IF_AUX3 -> empty .)
    WHILE           reduce using rule 40 (IF_AUX3 -> empty .)
    DO              reduce using rule 40 (IF_AUX3 -> empty .)
    FOR             reduce using rule 40 (IF_AUX3 -> empty .)
    ID              reduce using rule 40 (IF_AUX3 -> empty .)
    INT             reduce using rule 40 (IF_AUX3 -> empty .)
    DOUBLE          reduce using rule 40 (IF_AUX3 -> empty .)


state 161

    (36) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .

    CLOSING_BRACES  reduce using rule 36 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    PRINT           reduce using rule 36 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    READ            reduce using rule 36 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    IF              reduce using rule 36 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    WHILE           reduce using rule 36 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    DO              reduce using rule 36 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    FOR             reduce using rule 36 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    ID              reduce using rule 36 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    INT             reduce using rule 36 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    DOUBLE          reduce using rule 36 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)


state 162

    (37) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE . IF_AUX2 IN_S IF_AUX3
    (39) IF_AUX2 -> . empty
    (41) empty -> .

    OPEN_BRACES     reduce using rule 41 (empty -> .)

    empty                          shift and go to state 165
    IF_AUX2                        shift and go to state 166

state 163

    (46) FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL . SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S
    (62) EL -> EL . OR TL

    SEMICOLON       shift and go to state 167
    OR              shift and go to state 133


state 164

    (45) DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 45 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 45 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 45 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 45 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 45 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 45 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 45 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 45 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 45 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 45 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)


state 165

    (39) IF_AUX2 -> empty .

    OPEN_BRACES     reduce using rule 39 (IF_AUX2 -> empty .)


state 166

    (37) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 . IN_S IF_AUX3
    (50) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 102

    IN_S                           shift and go to state 168

state 167

    (46) FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON . ID EQUAL EA CLOSING_PARENTH IN_S

    ID              shift and go to state 169


state 168

    (37) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S . IF_AUX3
    (40) IF_AUX3 -> . empty
    (41) empty -> .

    CLOSING_BRACES  reduce using rule 41 (empty -> .)
    PRINT           reduce using rule 41 (empty -> .)
    READ            reduce using rule 41 (empty -> .)
    IF              reduce using rule 41 (empty -> .)
    WHILE           reduce using rule 41 (empty -> .)
    DO              reduce using rule 41 (empty -> .)
    FOR             reduce using rule 41 (empty -> .)
    ID              reduce using rule 41 (empty -> .)
    INT             reduce using rule 41 (empty -> .)
    DOUBLE          reduce using rule 41 (empty -> .)

    empty                          shift and go to state 160
    IF_AUX3                        shift and go to state 170

state 169

    (46) FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID . EQUAL EA CLOSING_PARENTH IN_S

    EQUAL           shift and go to state 171


state 170

    (37) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .

    CLOSING_BRACES  reduce using rule 37 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    PRINT           reduce using rule 37 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    READ            reduce using rule 37 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    IF              reduce using rule 37 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    WHILE           reduce using rule 37 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    DO              reduce using rule 37 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    FOR             reduce using rule 37 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    ID              reduce using rule 37 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    INT             reduce using rule 37 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    DOUBLE          reduce using rule 37 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)


state 171

    (46) FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL . EA CLOSING_PARENTH IN_S
    (51) EA -> . TA
    (52) EA -> . EA PLUS TA
    (53) EA -> . EA MINUS TA
    (58) TA -> . FA
    (59) TA -> . TA MULTIPLY FA
    (60) TA -> . TA DIVISION FA
    (54) FA -> . CONSTANT
    (55) FA -> . ID
    (56) FA -> . MAT
    (57) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (74) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 28
    ID              shift and go to state 27
    OPEN_PARENTH    shift and go to state 30

    EA                             shift and go to state 172
    TA                             shift and go to state 26
    FA                             shift and go to state 29
    MAT                            shift and go to state 31

state 172

    (46) FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA . CLOSING_PARENTH IN_S
    (52) EA -> EA . PLUS TA
    (53) EA -> EA . MINUS TA

    CLOSING_PARENTH shift and go to state 173
    PLUS            shift and go to state 43
    MINUS           shift and go to state 42


state 173

    (46) FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH . IN_S
    (50) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 102

    IN_S                           shift and go to state 174

state 174

    (46) FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S .

    CLOSING_BRACES  reduce using rule 46 (FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S .)
    PRINT           reduce using rule 46 (FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S .)
    READ            reduce using rule 46 (FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S .)
    IF              reduce using rule 46 (FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S .)
    WHILE           reduce using rule 46 (FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S .)
    DO              reduce using rule 46 (FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S .)
    FOR             reduce using rule 46 (FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S .)
    ID              reduce using rule 46 (FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S .)
    INT             reduce using rule 46 (FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S .)
    DOUBLE          reduce using rule 46 (FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 5 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 61 resolved as shift
WARNING: shift/reduce conflict for READ in state 61 resolved as shift
WARNING: shift/reduce conflict for IF in state 61 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 61 resolved as shift
WARNING: shift/reduce conflict for DO in state 61 resolved as shift
WARNING: shift/reduce conflict for FOR in state 61 resolved as shift
WARNING: shift/reduce conflict for ID in state 61 resolved as shift
WARNING: shift/reduce conflict for INT in state 61 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 61 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 62 resolved as shift
WARNING: shift/reduce conflict for READ in state 62 resolved as shift
WARNING: shift/reduce conflict for IF in state 62 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 62 resolved as shift
WARNING: shift/reduce conflict for DO in state 62 resolved as shift
WARNING: shift/reduce conflict for FOR in state 62 resolved as shift
WARNING: shift/reduce conflict for ID in state 62 resolved as shift
WARNING: shift/reduce conflict for INT in state 62 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 62 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 66 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 66 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 66 resolved as shift
WARNING: shift/reduce conflict for READ in state 66 resolved as shift
WARNING: shift/reduce conflict for IF in state 66 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 66 resolved as shift
WARNING: shift/reduce conflict for DO in state 66 resolved as shift
WARNING: shift/reduce conflict for FOR in state 66 resolved as shift
WARNING: shift/reduce conflict for ID in state 66 resolved as shift
WARNING: shift/reduce conflict for INT in state 66 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 66 resolved as shift
WARNING: shift/reduce conflict for INT in state 67 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 67 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 84 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 84 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 84 resolved as shift
WARNING: shift/reduce conflict for READ in state 84 resolved as shift
WARNING: shift/reduce conflict for IF in state 84 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 84 resolved as shift
WARNING: shift/reduce conflict for DO in state 84 resolved as shift
WARNING: shift/reduce conflict for FOR in state 84 resolved as shift
WARNING: shift/reduce conflict for ID in state 84 resolved as shift
WARNING: shift/reduce conflict for INT in state 84 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 84 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 85 resolved as shift
WARNING: shift/reduce conflict for READ in state 85 resolved as shift
WARNING: shift/reduce conflict for IF in state 85 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 85 resolved as shift
WARNING: shift/reduce conflict for DO in state 85 resolved as shift
WARNING: shift/reduce conflict for FOR in state 85 resolved as shift
WARNING: shift/reduce conflict for ID in state 85 resolved as shift
WARNING: shift/reduce conflict for INT in state 85 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 85 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 100 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 100 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 100 resolved as shift
WARNING: shift/reduce conflict for READ in state 100 resolved as shift
WARNING: shift/reduce conflict for IF in state 100 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 100 resolved as shift
WARNING: shift/reduce conflict for DO in state 100 resolved as shift
WARNING: shift/reduce conflict for FOR in state 100 resolved as shift
WARNING: shift/reduce conflict for ID in state 100 resolved as shift
WARNING: shift/reduce conflict for INT in state 100 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 100 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 102 resolved as shift
WARNING: shift/reduce conflict for READ in state 102 resolved as shift
WARNING: shift/reduce conflict for IF in state 102 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 102 resolved as shift
WARNING: shift/reduce conflict for DO in state 102 resolved as shift
WARNING: shift/reduce conflict for FOR in state 102 resolved as shift
WARNING: shift/reduce conflict for ID in state 102 resolved as shift
WARNING: shift/reduce conflict for INT in state 102 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 102 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for LOWER_THAN in state 108 resolved as shift
WARNING: shift/reduce conflict for BIGGER_THAN in state 108 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for AND in state 111 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 120 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 120 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 120 resolved as shift
WARNING: shift/reduce conflict for READ in state 120 resolved as shift
WARNING: shift/reduce conflict for IF in state 120 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 120 resolved as shift
WARNING: shift/reduce conflict for DO in state 120 resolved as shift
WARNING: shift/reduce conflict for FOR in state 120 resolved as shift
WARNING: shift/reduce conflict for ID in state 120 resolved as shift
WARNING: shift/reduce conflict for INT in state 120 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 120 resolved as shift
WARNING: shift/reduce conflict for OR in state 123 resolved as shift
WARNING: shift/reduce conflict for AND in state 146 resolved as shift
WARNING: reduce/reduce conflict in state 61 resolved using rule (S -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 61
WARNING: reduce/reduce conflict in state 61 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (S -> <empty>) in state 61
WARNING: reduce/reduce conflict in state 62 resolved using rule (S -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 62
WARNING: reduce/reduce conflict in state 62 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (S -> <empty>) in state 62
WARNING: reduce/reduce conflict in state 66 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 66
WARNING: reduce/reduce conflict in state 84 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 84
WARNING: reduce/reduce conflict in state 85 resolved using rule (S -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 85
WARNING: reduce/reduce conflict in state 85 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (S -> <empty>) in state 85
WARNING: reduce/reduce conflict in state 100 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 100
WARNING: reduce/reduce conflict in state 102 resolved using rule (S -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 102
WARNING: reduce/reduce conflict in state 102 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (S -> <empty>) in state 102
WARNING: reduce/reduce conflict in state 120 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 120
WARNING: Rule (STATEMENTS -> <empty>) is never reduced
WARNING: Rule (S -> <empty>) is never reduced
