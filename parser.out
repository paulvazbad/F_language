Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> VAR FUNC M
Rule 2     VAR -> TIPO DECLARE SEMICOLON
Rule 3     VAR -> TIPO MAT SEMICOLON
Rule 4     VAR -> VAR TIPO DECLARE SEMICOLON
Rule 5     VAR -> VAR TIPO MAT SEMICOLON
Rule 6     VAR -> <empty>
Rule 7     DECLARE -> ID
Rule 8     DECLARE -> DECLARE COMA ID
Rule 9     DECLARE -> ASSIGN
Rule 10    DECLARE -> DECLARE COMA ASSIGN
Rule 11    ASSIGN -> ID EQUAL EA
Rule 12    ASSIGN -> MAT EQUAL EA
Rule 13    FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3
Rule 14    FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3
Rule 15    FUNC -> empty
Rule 16    SET_ID -> ID
Rule 17    DECLARE_FUNC -> empty
Rule 18    RETURN -> empty
Rule 19    AUX_FUNC -> empty
Rule 20    M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES
Rule 21    TIPO -> INT
Rule 22    TIPO -> DOUBLE
Rule 23    S -> STATEMENTS
Rule 24    S -> S STATEMENTS
Rule 25    S -> <empty>
Rule 26    STATEMENTS -> VAR
Rule 27    STATEMENTS -> IDSTAT
Rule 28    STATEMENTS -> PRINTSTAT
Rule 29    STATEMENTS -> READSTAT
Rule 30    STATEMENTS -> IFSTAT
Rule 31    STATEMENTS -> WHILESTAT
Rule 32    STATEMENTS -> DOSTAT
Rule 33    STATEMENTS -> FORSTAT
Rule 34    STATEMENTS -> FUNCSTAT
Rule 35    STATEMENTS -> INC_STAT
Rule 36    STATEMENTS -> <empty>
Rule 37    IDSTAT -> ASSIGN SEMICOLON
Rule 38    PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
Rule 39    PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
Rule 40    READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
Rule 41    IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
Rule 42    IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
Rule 43    IF_AUX1 -> empty
Rule 44    IF_AUX2 -> empty
Rule 45    IF_AUX3 -> empty
Rule 46    empty -> <empty>
Rule 47    WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
Rule 48    WHILE_AUX_1 -> empty
Rule 49    WHILE_AUX_2 -> empty
Rule 50    DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
Rule 51    FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN FOR_INCREMENT CLOSING_PARENTH IN_S
Rule 52    FOR_INCREMENT -> empty
Rule 53    FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
Rule 54    INC_STAT -> ID PLUSPLUS SEMICOLON
Rule 55    INC_STAT -> ID MINUSMINUS SEMICOLON
Rule 56    IN_S -> OPEN_BRACES S CLOSING_BRACES
Rule 57    EA -> TA
Rule 58    EA -> EA PLUS TA
Rule 59    EA -> EA MINUS TA
Rule 60    FA -> CONSTANT
Rule 61    FA -> ID
Rule 62    FA -> MAT
Rule 63    FA -> OPEN_PARENTH EA CLOSING_PARENTH
Rule 64    TA -> FA
Rule 65    TA -> TA MULTIPLY FA
Rule 66    TA -> TA DIVISION FA
Rule 67    EL -> TL
Rule 68    EL -> EL OR TL
Rule 69    TL -> FL
Rule 70    TL -> TL AND FL
Rule 71    FL -> NL OPERATORS NL
Rule 72    FL -> EA OPERATORS EA
Rule 73    FL -> NL
Rule 74    FL -> OPEN_PARENTH EL CLOSING_PARENTH
Rule 75    NL -> NOT EL
Rule 76    OPERATORS -> NOT_EQUAL
Rule 77    OPERATORS -> LOWER_THAN
Rule 78    OPERATORS -> BIGGER_THAN
Rule 79    OPERATORS -> EQUAL_EQUAL
Rule 80    MAT -> ID MAT_BRACKET
Rule 81    MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET
Rule 82    MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET

Terminals, with rules where they appear

AND                  : 70
BIGGER_THAN          : 78
CLOSING_BRACES       : 13 14 20 56
CLOSING_BRACKET      : 81 82
CLOSING_PARENTH      : 13 14 20 38 39 40 41 42 47 50 51 53 63 74
COMA                 : 8 10
COMMENT              : 
CONSTANT             : 60
DIVISION             : 66
DO                   : 50
DOUBLE               : 22
ELSE                 : 42
EQUAL                : 11 12
EQUAL_EQUAL          : 79
FOR                  : 51
FUNCTION             : 13 14
ID                   : 7 8 11 16 53 54 55 61 80
IF                   : 41 42
INT                  : 21
LOWER_THAN           : 77
MAIN                 : 20
MINUS                : 59
MINUSMINUS           : 55
MULTIPLY             : 65
NOT                  : 75
NOT_EQUAL            : 76
OPEN_BRACES          : 13 14 20 56
OPEN_BRACKET         : 81 82
OPEN_PARENTH         : 13 14 20 38 39 40 41 42 47 50 51 53 63 74
OR                   : 68
PLUS                 : 58
PLUSPLUS             : 54
PRINT                : 38 39
READ                 : 40
SEMICOLON            : 2 3 4 5 37 38 39 40 50 51 51 53 54 55
STRING               : 39
WHILE                : 47 50
error                : 

Nonterminals, with rules where they appear

ASSIGN               : 9 10 37 51 51
AUX_FUNC             : 13 14
DECLARE              : 2 4 8 10
DECLARE_FUNC         : 13 14
DOSTAT               : 32
EA                   : 11 12 38 40 58 59 63 72 72 81 82
EL                   : 41 42 47 50 51 68 74 75
FA                   : 64 65 66
FL                   : 69 70
FORSTAT              : 33
FOR_INCREMENT        : 51
FUNC                 : 1 14
FUNCSTAT             : 34
IDSTAT               : 27
IFSTAT               : 30
IF_AUX1              : 41 42
IF_AUX2              : 42
IF_AUX3              : 13 14 41 42
INC_STAT             : 35
IN_S                 : 41 42 42 47 50 51
M                    : 1
MAT                  : 3 5 12 62
MAT_BRACKET          : 80 82
NL                   : 71 71 73
OPERATORS            : 71 72
PRINTSTAT            : 28
PROGRAMA             : 0
READSTAT             : 29
RETURN               : 13 14
S                    : 13 14 20 24 56
SET_ID               : 13 14
STATEMENTS           : 23 24
TA                   : 57 58 59 65 66
TIPO                 : 2 3 4 5
TL                   : 67 68 70
VAR                  : 1 4 5 26
WHILESTAT            : 31
WHILE_AUX_1          : 47 50 51
WHILE_AUX_2          : 47 51
empty                : 15 17 18 19 43 44 45 48 49 52

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . VAR FUNC M
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    FUNCTION        reduce using rule 6 (VAR -> .)
    MAIN            reduce using rule 6 (VAR -> .)
    INT             shift and go to state 1
    DOUBLE          shift and go to state 3

  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]

    TIPO                           shift and go to state 2
    PROGRAMA                       shift and go to state 4
    VAR                            shift and go to state 5

state 1

    (21) TIPO -> INT .

    ID              reduce using rule 21 (TIPO -> INT .)


state 2

    (2) VAR -> TIPO . DECLARE SEMICOLON
    (3) VAR -> TIPO . MAT SEMICOLON
    (7) DECLARE -> . ID
    (8) DECLARE -> . DECLARE COMA ID
    (9) DECLARE -> . ASSIGN
    (10) DECLARE -> . DECLARE COMA ASSIGN
    (80) MAT -> . ID MAT_BRACKET
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA

    ID              shift and go to state 6

    ASSIGN                         shift and go to state 7
    MAT                            shift and go to state 8
    DECLARE                        shift and go to state 9

state 3

    (22) TIPO -> DOUBLE .

    ID              reduce using rule 22 (TIPO -> DOUBLE .)


state 4

    (0) S' -> PROGRAMA .



state 5

    (1) PROGRAMA -> VAR . FUNC M
    (4) VAR -> VAR . TIPO DECLARE SEMICOLON
    (5) VAR -> VAR . TIPO MAT SEMICOLON
    (13) FUNC -> . FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3
    (14) FUNC -> . FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3
    (15) FUNC -> . empty
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE
    (46) empty -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 12
    INT             shift and go to state 1
    DOUBLE          shift and go to state 3
    MAIN            reduce using rule 46 (empty -> .)

  ! FUNCTION        [ reduce using rule 46 (empty -> .) ]

    TIPO                           shift and go to state 10
    FUNC                           shift and go to state 11
    empty                          shift and go to state 13

state 6

    (7) DECLARE -> ID .
    (80) MAT -> ID . MAT_BRACKET
    (11) ASSIGN -> ID . EQUAL EA
    (81) MAT_BRACKET -> . OPEN_BRACKET EA CLOSING_BRACKET
    (82) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET

    SEMICOLON       reduce using rule 7 (DECLARE -> ID .)
    COMA            reduce using rule 7 (DECLARE -> ID .)
    EQUAL           shift and go to state 15
    OPEN_BRACKET    shift and go to state 16

    MAT_BRACKET                    shift and go to state 14

state 7

    (9) DECLARE -> ASSIGN .

    SEMICOLON       reduce using rule 9 (DECLARE -> ASSIGN .)
    COMA            reduce using rule 9 (DECLARE -> ASSIGN .)


state 8

    (3) VAR -> TIPO MAT . SEMICOLON
    (12) ASSIGN -> MAT . EQUAL EA

    SEMICOLON       shift and go to state 17
    EQUAL           shift and go to state 18


state 9

    (2) VAR -> TIPO DECLARE . SEMICOLON
    (8) DECLARE -> DECLARE . COMA ID
    (10) DECLARE -> DECLARE . COMA ASSIGN

    SEMICOLON       shift and go to state 20
    COMA            shift and go to state 19


state 10

    (4) VAR -> VAR TIPO . DECLARE SEMICOLON
    (5) VAR -> VAR TIPO . MAT SEMICOLON
    (7) DECLARE -> . ID
    (8) DECLARE -> . DECLARE COMA ID
    (9) DECLARE -> . ASSIGN
    (10) DECLARE -> . DECLARE COMA ASSIGN
    (80) MAT -> . ID MAT_BRACKET
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA

    ID              shift and go to state 6

    ASSIGN                         shift and go to state 7
    MAT                            shift and go to state 21
    DECLARE                        shift and go to state 22

state 11

    (1) PROGRAMA -> VAR FUNC . M
    (14) FUNC -> FUNC . AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3
    (20) M -> . MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES
    (19) AUX_FUNC -> . empty
    (46) empty -> .

    MAIN            shift and go to state 26
    FUNCTION        reduce using rule 46 (empty -> .)

    M                              shift and go to state 25
    empty                          shift and go to state 23
    AUX_FUNC                       shift and go to state 24

state 12

    (13) FUNC -> FUNCTION . AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3
    (19) AUX_FUNC -> . empty
    (46) empty -> .

    ID              reduce using rule 46 (empty -> .)

    AUX_FUNC                       shift and go to state 27
    empty                          shift and go to state 23

state 13

    (15) FUNC -> empty .

    MAIN            reduce using rule 15 (FUNC -> empty .)
    FUNCTION        reduce using rule 15 (FUNC -> empty .)


state 14

    (80) MAT -> ID MAT_BRACKET .
    (82) MAT_BRACKET -> MAT_BRACKET . OPEN_BRACKET EA CLOSING_BRACKET

    MULTIPLY        reduce using rule 80 (MAT -> ID MAT_BRACKET .)
    DIVISION        reduce using rule 80 (MAT -> ID MAT_BRACKET .)
    PLUS            reduce using rule 80 (MAT -> ID MAT_BRACKET .)
    MINUS           reduce using rule 80 (MAT -> ID MAT_BRACKET .)
    AND             reduce using rule 80 (MAT -> ID MAT_BRACKET .)
    CLOSING_PARENTH reduce using rule 80 (MAT -> ID MAT_BRACKET .)
    OR              reduce using rule 80 (MAT -> ID MAT_BRACKET .)
    NOT_EQUAL       reduce using rule 80 (MAT -> ID MAT_BRACKET .)
    LOWER_THAN      reduce using rule 80 (MAT -> ID MAT_BRACKET .)
    BIGGER_THAN     reduce using rule 80 (MAT -> ID MAT_BRACKET .)
    EQUAL_EQUAL     reduce using rule 80 (MAT -> ID MAT_BRACKET .)
    SEMICOLON       reduce using rule 80 (MAT -> ID MAT_BRACKET .)
    COMA            reduce using rule 80 (MAT -> ID MAT_BRACKET .)
    CLOSING_BRACKET reduce using rule 80 (MAT -> ID MAT_BRACKET .)
    EQUAL           reduce using rule 80 (MAT -> ID MAT_BRACKET .)
    OPEN_BRACKET    shift and go to state 28


state 15

    (11) ASSIGN -> ID EQUAL . EA
    (57) EA -> . TA
    (58) EA -> . EA PLUS TA
    (59) EA -> . EA MINUS TA
    (64) TA -> . FA
    (65) TA -> . TA MULTIPLY FA
    (66) TA -> . TA DIVISION FA
    (60) FA -> . CONSTANT
    (61) FA -> . ID
    (62) FA -> . MAT
    (63) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (80) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 29
    ID              shift and go to state 30
    OPEN_PARENTH    shift and go to state 33

    FA                             shift and go to state 35
    EA                             shift and go to state 34
    MAT                            shift and go to state 32
    TA                             shift and go to state 31

state 16

    (81) MAT_BRACKET -> OPEN_BRACKET . EA CLOSING_BRACKET
    (57) EA -> . TA
    (58) EA -> . EA PLUS TA
    (59) EA -> . EA MINUS TA
    (64) TA -> . FA
    (65) TA -> . TA MULTIPLY FA
    (66) TA -> . TA DIVISION FA
    (60) FA -> . CONSTANT
    (61) FA -> . ID
    (62) FA -> . MAT
    (63) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (80) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 29
    ID              shift and go to state 30
    OPEN_PARENTH    shift and go to state 33

    FA                             shift and go to state 35
    EA                             shift and go to state 36
    MAT                            shift and go to state 32
    TA                             shift and go to state 31

state 17

    (3) VAR -> TIPO MAT SEMICOLON .

    INT             reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    DOUBLE          reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    CLOSING_BRACES  reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    PRINT           reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    READ            reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    IF              reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    WHILE           reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    DO              reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    FOR             reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    ID              reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    FUNCTION        reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    MAIN            reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)


state 18

    (12) ASSIGN -> MAT EQUAL . EA
    (57) EA -> . TA
    (58) EA -> . EA PLUS TA
    (59) EA -> . EA MINUS TA
    (64) TA -> . FA
    (65) TA -> . TA MULTIPLY FA
    (66) TA -> . TA DIVISION FA
    (60) FA -> . CONSTANT
    (61) FA -> . ID
    (62) FA -> . MAT
    (63) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (80) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 29
    ID              shift and go to state 30
    OPEN_PARENTH    shift and go to state 33

    MAT                            shift and go to state 32
    EA                             shift and go to state 37
    FA                             shift and go to state 35
    TA                             shift and go to state 31

state 19

    (8) DECLARE -> DECLARE COMA . ID
    (10) DECLARE -> DECLARE COMA . ASSIGN
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (80) MAT -> . ID MAT_BRACKET

    ID              shift and go to state 38

    MAT                            shift and go to state 40
    ASSIGN                         shift and go to state 39

state 20

    (2) VAR -> TIPO DECLARE SEMICOLON .

    INT             reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    DOUBLE          reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    CLOSING_BRACES  reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    PRINT           reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    READ            reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    IF              reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    WHILE           reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    DO              reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    FOR             reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    ID              reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    FUNCTION        reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    MAIN            reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)


state 21

    (5) VAR -> VAR TIPO MAT . SEMICOLON
    (12) ASSIGN -> MAT . EQUAL EA

    SEMICOLON       shift and go to state 41
    EQUAL           shift and go to state 18


state 22

    (4) VAR -> VAR TIPO DECLARE . SEMICOLON
    (8) DECLARE -> DECLARE . COMA ID
    (10) DECLARE -> DECLARE . COMA ASSIGN

    SEMICOLON       shift and go to state 42
    COMA            shift and go to state 19


state 23

    (19) AUX_FUNC -> empty .

    ID              reduce using rule 19 (AUX_FUNC -> empty .)
    FUNCTION        reduce using rule 19 (AUX_FUNC -> empty .)


state 24

    (14) FUNC -> FUNC AUX_FUNC . FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3

    FUNCTION        shift and go to state 43


state 25

    (1) PROGRAMA -> VAR FUNC M .

    $end            reduce using rule 1 (PROGRAMA -> VAR FUNC M .)


state 26

    (20) M -> MAIN . OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES

    OPEN_PARENTH    shift and go to state 44


state 27

    (13) FUNC -> FUNCTION AUX_FUNC . SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3
    (16) SET_ID -> . ID

    ID              shift and go to state 45

    SET_ID                         shift and go to state 46

state 28

    (82) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET . EA CLOSING_BRACKET
    (57) EA -> . TA
    (58) EA -> . EA PLUS TA
    (59) EA -> . EA MINUS TA
    (64) TA -> . FA
    (65) TA -> . TA MULTIPLY FA
    (66) TA -> . TA DIVISION FA
    (60) FA -> . CONSTANT
    (61) FA -> . ID
    (62) FA -> . MAT
    (63) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (80) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 29
    ID              shift and go to state 30
    OPEN_PARENTH    shift and go to state 33

    FA                             shift and go to state 35
    EA                             shift and go to state 47
    MAT                            shift and go to state 32
    TA                             shift and go to state 31

state 29

    (60) FA -> CONSTANT .

    MULTIPLY        reduce using rule 60 (FA -> CONSTANT .)
    DIVISION        reduce using rule 60 (FA -> CONSTANT .)
    PLUS            reduce using rule 60 (FA -> CONSTANT .)
    MINUS           reduce using rule 60 (FA -> CONSTANT .)
    NOT_EQUAL       reduce using rule 60 (FA -> CONSTANT .)
    LOWER_THAN      reduce using rule 60 (FA -> CONSTANT .)
    BIGGER_THAN     reduce using rule 60 (FA -> CONSTANT .)
    EQUAL_EQUAL     reduce using rule 60 (FA -> CONSTANT .)
    SEMICOLON       reduce using rule 60 (FA -> CONSTANT .)
    COMA            reduce using rule 60 (FA -> CONSTANT .)
    CLOSING_PARENTH reduce using rule 60 (FA -> CONSTANT .)
    CLOSING_BRACKET reduce using rule 60 (FA -> CONSTANT .)
    AND             reduce using rule 60 (FA -> CONSTANT .)
    OR              reduce using rule 60 (FA -> CONSTANT .)


state 30

    (61) FA -> ID .
    (80) MAT -> ID . MAT_BRACKET
    (81) MAT_BRACKET -> . OPEN_BRACKET EA CLOSING_BRACKET
    (82) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET

    MULTIPLY        reduce using rule 61 (FA -> ID .)
    DIVISION        reduce using rule 61 (FA -> ID .)
    PLUS            reduce using rule 61 (FA -> ID .)
    MINUS           reduce using rule 61 (FA -> ID .)
    NOT_EQUAL       reduce using rule 61 (FA -> ID .)
    LOWER_THAN      reduce using rule 61 (FA -> ID .)
    BIGGER_THAN     reduce using rule 61 (FA -> ID .)
    EQUAL_EQUAL     reduce using rule 61 (FA -> ID .)
    SEMICOLON       reduce using rule 61 (FA -> ID .)
    COMA            reduce using rule 61 (FA -> ID .)
    CLOSING_PARENTH reduce using rule 61 (FA -> ID .)
    CLOSING_BRACKET reduce using rule 61 (FA -> ID .)
    AND             reduce using rule 61 (FA -> ID .)
    OR              reduce using rule 61 (FA -> ID .)
    OPEN_BRACKET    shift and go to state 16

    MAT_BRACKET                    shift and go to state 14

state 31

    (57) EA -> TA .
    (65) TA -> TA . MULTIPLY FA
    (66) TA -> TA . DIVISION FA

    PLUS            reduce using rule 57 (EA -> TA .)
    MINUS           reduce using rule 57 (EA -> TA .)
    SEMICOLON       reduce using rule 57 (EA -> TA .)
    COMA            reduce using rule 57 (EA -> TA .)
    CLOSING_PARENTH reduce using rule 57 (EA -> TA .)
    NOT_EQUAL       reduce using rule 57 (EA -> TA .)
    LOWER_THAN      reduce using rule 57 (EA -> TA .)
    BIGGER_THAN     reduce using rule 57 (EA -> TA .)
    EQUAL_EQUAL     reduce using rule 57 (EA -> TA .)
    CLOSING_BRACKET reduce using rule 57 (EA -> TA .)
    AND             reduce using rule 57 (EA -> TA .)
    OR              reduce using rule 57 (EA -> TA .)
    MULTIPLY        shift and go to state 48
    DIVISION        shift and go to state 49


state 32

    (62) FA -> MAT .

    MULTIPLY        reduce using rule 62 (FA -> MAT .)
    DIVISION        reduce using rule 62 (FA -> MAT .)
    PLUS            reduce using rule 62 (FA -> MAT .)
    MINUS           reduce using rule 62 (FA -> MAT .)
    NOT_EQUAL       reduce using rule 62 (FA -> MAT .)
    LOWER_THAN      reduce using rule 62 (FA -> MAT .)
    BIGGER_THAN     reduce using rule 62 (FA -> MAT .)
    EQUAL_EQUAL     reduce using rule 62 (FA -> MAT .)
    SEMICOLON       reduce using rule 62 (FA -> MAT .)
    COMA            reduce using rule 62 (FA -> MAT .)
    CLOSING_PARENTH reduce using rule 62 (FA -> MAT .)
    CLOSING_BRACKET reduce using rule 62 (FA -> MAT .)
    AND             reduce using rule 62 (FA -> MAT .)
    OR              reduce using rule 62 (FA -> MAT .)


state 33

    (63) FA -> OPEN_PARENTH . EA CLOSING_PARENTH
    (57) EA -> . TA
    (58) EA -> . EA PLUS TA
    (59) EA -> . EA MINUS TA
    (64) TA -> . FA
    (65) TA -> . TA MULTIPLY FA
    (66) TA -> . TA DIVISION FA
    (60) FA -> . CONSTANT
    (61) FA -> . ID
    (62) FA -> . MAT
    (63) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (80) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 29
    ID              shift and go to state 30
    OPEN_PARENTH    shift and go to state 33

    FA                             shift and go to state 35
    EA                             shift and go to state 50
    MAT                            shift and go to state 32
    TA                             shift and go to state 31

state 34

    (11) ASSIGN -> ID EQUAL EA .
    (58) EA -> EA . PLUS TA
    (59) EA -> EA . MINUS TA

    SEMICOLON       reduce using rule 11 (ASSIGN -> ID EQUAL EA .)
    COMA            reduce using rule 11 (ASSIGN -> ID EQUAL EA .)
    CLOSING_PARENTH reduce using rule 11 (ASSIGN -> ID EQUAL EA .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52


state 35

    (64) TA -> FA .

    MULTIPLY        reduce using rule 64 (TA -> FA .)
    DIVISION        reduce using rule 64 (TA -> FA .)
    PLUS            reduce using rule 64 (TA -> FA .)
    MINUS           reduce using rule 64 (TA -> FA .)
    NOT_EQUAL       reduce using rule 64 (TA -> FA .)
    LOWER_THAN      reduce using rule 64 (TA -> FA .)
    BIGGER_THAN     reduce using rule 64 (TA -> FA .)
    EQUAL_EQUAL     reduce using rule 64 (TA -> FA .)
    CLOSING_PARENTH reduce using rule 64 (TA -> FA .)
    CLOSING_BRACKET reduce using rule 64 (TA -> FA .)
    SEMICOLON       reduce using rule 64 (TA -> FA .)
    COMA            reduce using rule 64 (TA -> FA .)
    AND             reduce using rule 64 (TA -> FA .)
    OR              reduce using rule 64 (TA -> FA .)


state 36

    (81) MAT_BRACKET -> OPEN_BRACKET EA . CLOSING_BRACKET
    (58) EA -> EA . PLUS TA
    (59) EA -> EA . MINUS TA

    CLOSING_BRACKET shift and go to state 53
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52


state 37

    (12) ASSIGN -> MAT EQUAL EA .
    (58) EA -> EA . PLUS TA
    (59) EA -> EA . MINUS TA

    SEMICOLON       reduce using rule 12 (ASSIGN -> MAT EQUAL EA .)
    COMA            reduce using rule 12 (ASSIGN -> MAT EQUAL EA .)
    CLOSING_PARENTH reduce using rule 12 (ASSIGN -> MAT EQUAL EA .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52


state 38

    (8) DECLARE -> DECLARE COMA ID .
    (11) ASSIGN -> ID . EQUAL EA
    (80) MAT -> ID . MAT_BRACKET
    (81) MAT_BRACKET -> . OPEN_BRACKET EA CLOSING_BRACKET
    (82) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET

    SEMICOLON       reduce using rule 8 (DECLARE -> DECLARE COMA ID .)
    COMA            reduce using rule 8 (DECLARE -> DECLARE COMA ID .)
    EQUAL           shift and go to state 15
    OPEN_BRACKET    shift and go to state 16

    MAT_BRACKET                    shift and go to state 14

state 39

    (10) DECLARE -> DECLARE COMA ASSIGN .

    SEMICOLON       reduce using rule 10 (DECLARE -> DECLARE COMA ASSIGN .)
    COMA            reduce using rule 10 (DECLARE -> DECLARE COMA ASSIGN .)


state 40

    (12) ASSIGN -> MAT . EQUAL EA

    EQUAL           shift and go to state 18


state 41

    (5) VAR -> VAR TIPO MAT SEMICOLON .

    INT             reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    DOUBLE          reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    CLOSING_BRACES  reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    PRINT           reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    READ            reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    IF              reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    WHILE           reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    DO              reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    FOR             reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    ID              reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    FUNCTION        reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    MAIN            reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)


state 42

    (4) VAR -> VAR TIPO DECLARE SEMICOLON .

    INT             reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    DOUBLE          reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    CLOSING_BRACES  reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    PRINT           reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    READ            reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    IF              reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    WHILE           reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    DO              reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    FOR             reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    ID              reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    FUNCTION        reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    MAIN            reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)


state 43

    (14) FUNC -> FUNC AUX_FUNC FUNCTION . SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3
    (16) SET_ID -> . ID

    ID              shift and go to state 45

    SET_ID                         shift and go to state 54

state 44

    (20) M -> MAIN OPEN_PARENTH . CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES

    CLOSING_PARENTH shift and go to state 55


state 45

    (16) SET_ID -> ID .

    OPEN_PARENTH    reduce using rule 16 (SET_ID -> ID .)


state 46

    (13) FUNC -> FUNCTION AUX_FUNC SET_ID . OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3

    OPEN_PARENTH    shift and go to state 56


state 47

    (82) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA . CLOSING_BRACKET
    (58) EA -> EA . PLUS TA
    (59) EA -> EA . MINUS TA

    CLOSING_BRACKET shift and go to state 57
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52


state 48

    (65) TA -> TA MULTIPLY . FA
    (60) FA -> . CONSTANT
    (61) FA -> . ID
    (62) FA -> . MAT
    (63) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (80) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 29
    ID              shift and go to state 30
    OPEN_PARENTH    shift and go to state 33

    FA                             shift and go to state 58
    MAT                            shift and go to state 32

state 49

    (66) TA -> TA DIVISION . FA
    (60) FA -> . CONSTANT
    (61) FA -> . ID
    (62) FA -> . MAT
    (63) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (80) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 29
    ID              shift and go to state 30
    OPEN_PARENTH    shift and go to state 33

    FA                             shift and go to state 59
    MAT                            shift and go to state 32

state 50

    (63) FA -> OPEN_PARENTH EA . CLOSING_PARENTH
    (58) EA -> EA . PLUS TA
    (59) EA -> EA . MINUS TA

    CLOSING_PARENTH shift and go to state 60
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52


state 51

    (58) EA -> EA PLUS . TA
    (64) TA -> . FA
    (65) TA -> . TA MULTIPLY FA
    (66) TA -> . TA DIVISION FA
    (60) FA -> . CONSTANT
    (61) FA -> . ID
    (62) FA -> . MAT
    (63) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (80) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 29
    ID              shift and go to state 30
    OPEN_PARENTH    shift and go to state 33

    FA                             shift and go to state 35
    MAT                            shift and go to state 32
    TA                             shift and go to state 61

state 52

    (59) EA -> EA MINUS . TA
    (64) TA -> . FA
    (65) TA -> . TA MULTIPLY FA
    (66) TA -> . TA DIVISION FA
    (60) FA -> . CONSTANT
    (61) FA -> . ID
    (62) FA -> . MAT
    (63) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (80) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 29
    ID              shift and go to state 30
    OPEN_PARENTH    shift and go to state 33

    FA                             shift and go to state 35
    MAT                            shift and go to state 32
    TA                             shift and go to state 62

state 53

    (81) MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .

    OPEN_BRACKET    reduce using rule 81 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 81 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)
    EQUAL           reduce using rule 81 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)
    MULTIPLY        reduce using rule 81 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)
    DIVISION        reduce using rule 81 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)
    PLUS            reduce using rule 81 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)
    MINUS           reduce using rule 81 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)
    COMA            reduce using rule 81 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)
    CLOSING_PARENTH reduce using rule 81 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)
    CLOSING_BRACKET reduce using rule 81 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)
    NOT_EQUAL       reduce using rule 81 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)
    LOWER_THAN      reduce using rule 81 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)
    BIGGER_THAN     reduce using rule 81 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)
    EQUAL_EQUAL     reduce using rule 81 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)
    AND             reduce using rule 81 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)
    OR              reduce using rule 81 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)


state 54

    (14) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID . OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3

    OPEN_PARENTH    shift and go to state 63


state 55

    (20) M -> MAIN OPEN_PARENTH CLOSING_PARENTH . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 64


state 56

    (13) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH . CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3

    CLOSING_PARENTH shift and go to state 65


state 57

    (82) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .

    OPEN_BRACKET    reduce using rule 82 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 82 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)
    EQUAL           reduce using rule 82 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)
    MULTIPLY        reduce using rule 82 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)
    DIVISION        reduce using rule 82 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)
    PLUS            reduce using rule 82 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)
    MINUS           reduce using rule 82 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)
    COMA            reduce using rule 82 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)
    CLOSING_PARENTH reduce using rule 82 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)
    CLOSING_BRACKET reduce using rule 82 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)
    NOT_EQUAL       reduce using rule 82 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)
    LOWER_THAN      reduce using rule 82 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)
    BIGGER_THAN     reduce using rule 82 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)
    EQUAL_EQUAL     reduce using rule 82 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)
    AND             reduce using rule 82 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)
    OR              reduce using rule 82 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)


state 58

    (65) TA -> TA MULTIPLY FA .

    MULTIPLY        reduce using rule 65 (TA -> TA MULTIPLY FA .)
    DIVISION        reduce using rule 65 (TA -> TA MULTIPLY FA .)
    PLUS            reduce using rule 65 (TA -> TA MULTIPLY FA .)
    MINUS           reduce using rule 65 (TA -> TA MULTIPLY FA .)
    NOT_EQUAL       reduce using rule 65 (TA -> TA MULTIPLY FA .)
    LOWER_THAN      reduce using rule 65 (TA -> TA MULTIPLY FA .)
    BIGGER_THAN     reduce using rule 65 (TA -> TA MULTIPLY FA .)
    EQUAL_EQUAL     reduce using rule 65 (TA -> TA MULTIPLY FA .)
    CLOSING_PARENTH reduce using rule 65 (TA -> TA MULTIPLY FA .)
    CLOSING_BRACKET reduce using rule 65 (TA -> TA MULTIPLY FA .)
    SEMICOLON       reduce using rule 65 (TA -> TA MULTIPLY FA .)
    COMA            reduce using rule 65 (TA -> TA MULTIPLY FA .)
    AND             reduce using rule 65 (TA -> TA MULTIPLY FA .)
    OR              reduce using rule 65 (TA -> TA MULTIPLY FA .)


state 59

    (66) TA -> TA DIVISION FA .

    MULTIPLY        reduce using rule 66 (TA -> TA DIVISION FA .)
    DIVISION        reduce using rule 66 (TA -> TA DIVISION FA .)
    PLUS            reduce using rule 66 (TA -> TA DIVISION FA .)
    MINUS           reduce using rule 66 (TA -> TA DIVISION FA .)
    NOT_EQUAL       reduce using rule 66 (TA -> TA DIVISION FA .)
    LOWER_THAN      reduce using rule 66 (TA -> TA DIVISION FA .)
    BIGGER_THAN     reduce using rule 66 (TA -> TA DIVISION FA .)
    EQUAL_EQUAL     reduce using rule 66 (TA -> TA DIVISION FA .)
    CLOSING_PARENTH reduce using rule 66 (TA -> TA DIVISION FA .)
    CLOSING_BRACKET reduce using rule 66 (TA -> TA DIVISION FA .)
    SEMICOLON       reduce using rule 66 (TA -> TA DIVISION FA .)
    COMA            reduce using rule 66 (TA -> TA DIVISION FA .)
    AND             reduce using rule 66 (TA -> TA DIVISION FA .)
    OR              reduce using rule 66 (TA -> TA DIVISION FA .)


state 60

    (63) FA -> OPEN_PARENTH EA CLOSING_PARENTH .

    MULTIPLY        reduce using rule 63 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    DIVISION        reduce using rule 63 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    PLUS            reduce using rule 63 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    MINUS           reduce using rule 63 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    NOT_EQUAL       reduce using rule 63 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    LOWER_THAN      reduce using rule 63 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    BIGGER_THAN     reduce using rule 63 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    EQUAL_EQUAL     reduce using rule 63 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    SEMICOLON       reduce using rule 63 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    COMA            reduce using rule 63 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    CLOSING_PARENTH reduce using rule 63 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    CLOSING_BRACKET reduce using rule 63 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    AND             reduce using rule 63 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    OR              reduce using rule 63 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)


state 61

    (58) EA -> EA PLUS TA .
    (65) TA -> TA . MULTIPLY FA
    (66) TA -> TA . DIVISION FA

    PLUS            reduce using rule 58 (EA -> EA PLUS TA .)
    MINUS           reduce using rule 58 (EA -> EA PLUS TA .)
    SEMICOLON       reduce using rule 58 (EA -> EA PLUS TA .)
    COMA            reduce using rule 58 (EA -> EA PLUS TA .)
    CLOSING_PARENTH reduce using rule 58 (EA -> EA PLUS TA .)
    NOT_EQUAL       reduce using rule 58 (EA -> EA PLUS TA .)
    LOWER_THAN      reduce using rule 58 (EA -> EA PLUS TA .)
    BIGGER_THAN     reduce using rule 58 (EA -> EA PLUS TA .)
    EQUAL_EQUAL     reduce using rule 58 (EA -> EA PLUS TA .)
    CLOSING_BRACKET reduce using rule 58 (EA -> EA PLUS TA .)
    AND             reduce using rule 58 (EA -> EA PLUS TA .)
    OR              reduce using rule 58 (EA -> EA PLUS TA .)
    MULTIPLY        shift and go to state 48
    DIVISION        shift and go to state 49


state 62

    (59) EA -> EA MINUS TA .
    (65) TA -> TA . MULTIPLY FA
    (66) TA -> TA . DIVISION FA

    PLUS            reduce using rule 59 (EA -> EA MINUS TA .)
    MINUS           reduce using rule 59 (EA -> EA MINUS TA .)
    SEMICOLON       reduce using rule 59 (EA -> EA MINUS TA .)
    COMA            reduce using rule 59 (EA -> EA MINUS TA .)
    CLOSING_PARENTH reduce using rule 59 (EA -> EA MINUS TA .)
    NOT_EQUAL       reduce using rule 59 (EA -> EA MINUS TA .)
    LOWER_THAN      reduce using rule 59 (EA -> EA MINUS TA .)
    BIGGER_THAN     reduce using rule 59 (EA -> EA MINUS TA .)
    EQUAL_EQUAL     reduce using rule 59 (EA -> EA MINUS TA .)
    CLOSING_BRACKET reduce using rule 59 (EA -> EA MINUS TA .)
    AND             reduce using rule 59 (EA -> EA MINUS TA .)
    OR              reduce using rule 59 (EA -> EA MINUS TA .)
    MULTIPLY        shift and go to state 48
    DIVISION        shift and go to state 49


state 63

    (14) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH . CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3

    CLOSING_PARENTH shift and go to state 66


state 64

    (20) M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES . S CLOSING_BRACES
    (23) S -> . STATEMENTS
    (24) S -> . S STATEMENTS
    (25) S -> .
    (26) STATEMENTS -> . VAR
    (27) STATEMENTS -> . IDSTAT
    (28) STATEMENTS -> . PRINTSTAT
    (29) STATEMENTS -> . READSTAT
    (30) STATEMENTS -> . IFSTAT
    (31) STATEMENTS -> . WHILESTAT
    (32) STATEMENTS -> . DOSTAT
    (33) STATEMENTS -> . FORSTAT
    (34) STATEMENTS -> . FUNCSTAT
    (35) STATEMENTS -> . INC_STAT
    (36) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (37) IDSTAT -> . ASSIGN SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (39) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (40) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (47) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (50) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (51) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN FOR_INCREMENT CLOSING_PARENTH IN_S
    (53) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (54) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (55) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (80) MAT -> . ID MAT_BRACKET

  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for READ resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for IF resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for DO resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for FOR resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for ID resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 6 (VAR -> .)
    PRINT           shift and go to state 83
    READ            shift and go to state 75
    IF              shift and go to state 85
    WHILE           shift and go to state 81
    DO              shift and go to state 71
    FOR             shift and go to state 67
    ID              shift and go to state 79
    INT             shift and go to state 1
    DOUBLE          shift and go to state 3

  ! CLOSING_BRACES  [ reduce using rule 25 (S -> .) ]
  ! PRINT           [ reduce using rule 25 (S -> .) ]
  ! READ            [ reduce using rule 25 (S -> .) ]
  ! IF              [ reduce using rule 25 (S -> .) ]
  ! WHILE           [ reduce using rule 25 (S -> .) ]
  ! DO              [ reduce using rule 25 (S -> .) ]
  ! FOR             [ reduce using rule 25 (S -> .) ]
  ! ID              [ reduce using rule 25 (S -> .) ]
  ! INT             [ reduce using rule 25 (S -> .) ]
  ! DOUBLE          [ reduce using rule 25 (S -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 36 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 36 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    IFSTAT                         shift and go to state 70
    INC_STAT                       shift and go to state 72
    FUNCSTAT                       shift and go to state 73
    IDSTAT                         shift and go to state 76
    S                              shift and go to state 77
    MAT                            shift and go to state 40
    STATEMENTS                     shift and go to state 78
    ASSIGN                         shift and go to state 80
    TIPO                           shift and go to state 2
    READSTAT                       shift and go to state 82
    DOSTAT                         shift and go to state 84
    PRINTSTAT                      shift and go to state 74
    WHILESTAT                      shift and go to state 68
    FORSTAT                        shift and go to state 69
    VAR                            shift and go to state 86

state 65

    (13) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH . DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3
    (17) DECLARE_FUNC -> . empty
    (46) empty -> .

    OPEN_BRACES     reduce using rule 46 (empty -> .)

    DECLARE_FUNC                   shift and go to state 87
    empty                          shift and go to state 88

state 66

    (14) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH . OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3

    OPEN_BRACES     shift and go to state 89


state 67

    (51) FORSTAT -> FOR . OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN FOR_INCREMENT CLOSING_PARENTH IN_S

    OPEN_PARENTH    shift and go to state 90


state 68

    (31) STATEMENTS -> WHILESTAT .

    CLOSING_BRACES  reduce using rule 31 (STATEMENTS -> WHILESTAT .)
    PRINT           reduce using rule 31 (STATEMENTS -> WHILESTAT .)
    READ            reduce using rule 31 (STATEMENTS -> WHILESTAT .)
    IF              reduce using rule 31 (STATEMENTS -> WHILESTAT .)
    WHILE           reduce using rule 31 (STATEMENTS -> WHILESTAT .)
    DO              reduce using rule 31 (STATEMENTS -> WHILESTAT .)
    FOR             reduce using rule 31 (STATEMENTS -> WHILESTAT .)
    ID              reduce using rule 31 (STATEMENTS -> WHILESTAT .)
    INT             reduce using rule 31 (STATEMENTS -> WHILESTAT .)
    DOUBLE          reduce using rule 31 (STATEMENTS -> WHILESTAT .)


state 69

    (33) STATEMENTS -> FORSTAT .

    CLOSING_BRACES  reduce using rule 33 (STATEMENTS -> FORSTAT .)
    PRINT           reduce using rule 33 (STATEMENTS -> FORSTAT .)
    READ            reduce using rule 33 (STATEMENTS -> FORSTAT .)
    IF              reduce using rule 33 (STATEMENTS -> FORSTAT .)
    WHILE           reduce using rule 33 (STATEMENTS -> FORSTAT .)
    DO              reduce using rule 33 (STATEMENTS -> FORSTAT .)
    FOR             reduce using rule 33 (STATEMENTS -> FORSTAT .)
    ID              reduce using rule 33 (STATEMENTS -> FORSTAT .)
    INT             reduce using rule 33 (STATEMENTS -> FORSTAT .)
    DOUBLE          reduce using rule 33 (STATEMENTS -> FORSTAT .)


state 70

    (30) STATEMENTS -> IFSTAT .

    CLOSING_BRACES  reduce using rule 30 (STATEMENTS -> IFSTAT .)
    PRINT           reduce using rule 30 (STATEMENTS -> IFSTAT .)
    READ            reduce using rule 30 (STATEMENTS -> IFSTAT .)
    IF              reduce using rule 30 (STATEMENTS -> IFSTAT .)
    WHILE           reduce using rule 30 (STATEMENTS -> IFSTAT .)
    DO              reduce using rule 30 (STATEMENTS -> IFSTAT .)
    FOR             reduce using rule 30 (STATEMENTS -> IFSTAT .)
    ID              reduce using rule 30 (STATEMENTS -> IFSTAT .)
    INT             reduce using rule 30 (STATEMENTS -> IFSTAT .)
    DOUBLE          reduce using rule 30 (STATEMENTS -> IFSTAT .)


state 71

    (50) DOSTAT -> DO . WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (48) WHILE_AUX_1 -> . empty
    (46) empty -> .

    OPEN_BRACES     reduce using rule 46 (empty -> .)

    WHILE_AUX_1                    shift and go to state 91
    empty                          shift and go to state 92

state 72

    (35) STATEMENTS -> INC_STAT .

    CLOSING_BRACES  reduce using rule 35 (STATEMENTS -> INC_STAT .)
    PRINT           reduce using rule 35 (STATEMENTS -> INC_STAT .)
    READ            reduce using rule 35 (STATEMENTS -> INC_STAT .)
    IF              reduce using rule 35 (STATEMENTS -> INC_STAT .)
    WHILE           reduce using rule 35 (STATEMENTS -> INC_STAT .)
    DO              reduce using rule 35 (STATEMENTS -> INC_STAT .)
    FOR             reduce using rule 35 (STATEMENTS -> INC_STAT .)
    ID              reduce using rule 35 (STATEMENTS -> INC_STAT .)
    INT             reduce using rule 35 (STATEMENTS -> INC_STAT .)
    DOUBLE          reduce using rule 35 (STATEMENTS -> INC_STAT .)


state 73

    (34) STATEMENTS -> FUNCSTAT .

    CLOSING_BRACES  reduce using rule 34 (STATEMENTS -> FUNCSTAT .)
    PRINT           reduce using rule 34 (STATEMENTS -> FUNCSTAT .)
    READ            reduce using rule 34 (STATEMENTS -> FUNCSTAT .)
    IF              reduce using rule 34 (STATEMENTS -> FUNCSTAT .)
    WHILE           reduce using rule 34 (STATEMENTS -> FUNCSTAT .)
    DO              reduce using rule 34 (STATEMENTS -> FUNCSTAT .)
    FOR             reduce using rule 34 (STATEMENTS -> FUNCSTAT .)
    ID              reduce using rule 34 (STATEMENTS -> FUNCSTAT .)
    INT             reduce using rule 34 (STATEMENTS -> FUNCSTAT .)
    DOUBLE          reduce using rule 34 (STATEMENTS -> FUNCSTAT .)


state 74

    (28) STATEMENTS -> PRINTSTAT .

    CLOSING_BRACES  reduce using rule 28 (STATEMENTS -> PRINTSTAT .)
    PRINT           reduce using rule 28 (STATEMENTS -> PRINTSTAT .)
    READ            reduce using rule 28 (STATEMENTS -> PRINTSTAT .)
    IF              reduce using rule 28 (STATEMENTS -> PRINTSTAT .)
    WHILE           reduce using rule 28 (STATEMENTS -> PRINTSTAT .)
    DO              reduce using rule 28 (STATEMENTS -> PRINTSTAT .)
    FOR             reduce using rule 28 (STATEMENTS -> PRINTSTAT .)
    ID              reduce using rule 28 (STATEMENTS -> PRINTSTAT .)
    INT             reduce using rule 28 (STATEMENTS -> PRINTSTAT .)
    DOUBLE          reduce using rule 28 (STATEMENTS -> PRINTSTAT .)


state 75

    (40) READSTAT -> READ . OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON

    OPEN_PARENTH    shift and go to state 93


state 76

    (27) STATEMENTS -> IDSTAT .

    CLOSING_BRACES  reduce using rule 27 (STATEMENTS -> IDSTAT .)
    PRINT           reduce using rule 27 (STATEMENTS -> IDSTAT .)
    READ            reduce using rule 27 (STATEMENTS -> IDSTAT .)
    IF              reduce using rule 27 (STATEMENTS -> IDSTAT .)
    WHILE           reduce using rule 27 (STATEMENTS -> IDSTAT .)
    DO              reduce using rule 27 (STATEMENTS -> IDSTAT .)
    FOR             reduce using rule 27 (STATEMENTS -> IDSTAT .)
    ID              reduce using rule 27 (STATEMENTS -> IDSTAT .)
    INT             reduce using rule 27 (STATEMENTS -> IDSTAT .)
    DOUBLE          reduce using rule 27 (STATEMENTS -> IDSTAT .)


state 77

    (20) M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S . CLOSING_BRACES
    (24) S -> S . STATEMENTS
    (26) STATEMENTS -> . VAR
    (27) STATEMENTS -> . IDSTAT
    (28) STATEMENTS -> . PRINTSTAT
    (29) STATEMENTS -> . READSTAT
    (30) STATEMENTS -> . IFSTAT
    (31) STATEMENTS -> . WHILESTAT
    (32) STATEMENTS -> . DOSTAT
    (33) STATEMENTS -> . FORSTAT
    (34) STATEMENTS -> . FUNCSTAT
    (35) STATEMENTS -> . INC_STAT
    (36) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (37) IDSTAT -> . ASSIGN SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (39) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (40) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (47) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (50) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (51) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN FOR_INCREMENT CLOSING_PARENTH IN_S
    (53) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (54) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (55) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (80) MAT -> . ID MAT_BRACKET

  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  shift and go to state 94
    PRINT           shift and go to state 83
    READ            shift and go to state 75
    IF              shift and go to state 85
    WHILE           shift and go to state 81
    DO              shift and go to state 71
    FOR             shift and go to state 67
    ID              shift and go to state 79
    INT             shift and go to state 1
    DOUBLE          shift and go to state 3

  ! CLOSING_BRACES  [ reduce using rule 36 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 36 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    IFSTAT                         shift and go to state 70
    INC_STAT                       shift and go to state 72
    FUNCSTAT                       shift and go to state 73
    IDSTAT                         shift and go to state 76
    MAT                            shift and go to state 40
    STATEMENTS                     shift and go to state 95
    ASSIGN                         shift and go to state 80
    TIPO                           shift and go to state 2
    READSTAT                       shift and go to state 82
    DOSTAT                         shift and go to state 84
    PRINTSTAT                      shift and go to state 74
    WHILESTAT                      shift and go to state 68
    FORSTAT                        shift and go to state 69
    VAR                            shift and go to state 86

state 78

    (23) S -> STATEMENTS .

    CLOSING_BRACES  reduce using rule 23 (S -> STATEMENTS .)
    PRINT           reduce using rule 23 (S -> STATEMENTS .)
    READ            reduce using rule 23 (S -> STATEMENTS .)
    IF              reduce using rule 23 (S -> STATEMENTS .)
    WHILE           reduce using rule 23 (S -> STATEMENTS .)
    DO              reduce using rule 23 (S -> STATEMENTS .)
    FOR             reduce using rule 23 (S -> STATEMENTS .)
    ID              reduce using rule 23 (S -> STATEMENTS .)
    INT             reduce using rule 23 (S -> STATEMENTS .)
    DOUBLE          reduce using rule 23 (S -> STATEMENTS .)


state 79

    (53) FUNCSTAT -> ID . OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (54) INC_STAT -> ID . PLUSPLUS SEMICOLON
    (55) INC_STAT -> ID . MINUSMINUS SEMICOLON
    (11) ASSIGN -> ID . EQUAL EA
    (80) MAT -> ID . MAT_BRACKET
    (81) MAT_BRACKET -> . OPEN_BRACKET EA CLOSING_BRACKET
    (82) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET

    OPEN_PARENTH    shift and go to state 97
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 96
    EQUAL           shift and go to state 15
    OPEN_BRACKET    shift and go to state 16

    MAT_BRACKET                    shift and go to state 14

state 80

    (37) IDSTAT -> ASSIGN . SEMICOLON

    SEMICOLON       shift and go to state 99


state 81

    (47) WHILESTAT -> WHILE . WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (48) WHILE_AUX_1 -> . empty
    (46) empty -> .

    OPEN_PARENTH    reduce using rule 46 (empty -> .)

    WHILE_AUX_1                    shift and go to state 100
    empty                          shift and go to state 92

state 82

    (29) STATEMENTS -> READSTAT .

    CLOSING_BRACES  reduce using rule 29 (STATEMENTS -> READSTAT .)
    PRINT           reduce using rule 29 (STATEMENTS -> READSTAT .)
    READ            reduce using rule 29 (STATEMENTS -> READSTAT .)
    IF              reduce using rule 29 (STATEMENTS -> READSTAT .)
    WHILE           reduce using rule 29 (STATEMENTS -> READSTAT .)
    DO              reduce using rule 29 (STATEMENTS -> READSTAT .)
    FOR             reduce using rule 29 (STATEMENTS -> READSTAT .)
    ID              reduce using rule 29 (STATEMENTS -> READSTAT .)
    INT             reduce using rule 29 (STATEMENTS -> READSTAT .)
    DOUBLE          reduce using rule 29 (STATEMENTS -> READSTAT .)


state 83

    (38) PRINTSTAT -> PRINT . OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (39) PRINTSTAT -> PRINT . OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON

    OPEN_PARENTH    shift and go to state 101


state 84

    (32) STATEMENTS -> DOSTAT .

    CLOSING_BRACES  reduce using rule 32 (STATEMENTS -> DOSTAT .)
    PRINT           reduce using rule 32 (STATEMENTS -> DOSTAT .)
    READ            reduce using rule 32 (STATEMENTS -> DOSTAT .)
    IF              reduce using rule 32 (STATEMENTS -> DOSTAT .)
    WHILE           reduce using rule 32 (STATEMENTS -> DOSTAT .)
    DO              reduce using rule 32 (STATEMENTS -> DOSTAT .)
    FOR             reduce using rule 32 (STATEMENTS -> DOSTAT .)
    ID              reduce using rule 32 (STATEMENTS -> DOSTAT .)
    INT             reduce using rule 32 (STATEMENTS -> DOSTAT .)
    DOUBLE          reduce using rule 32 (STATEMENTS -> DOSTAT .)


state 85

    (41) IFSTAT -> IF . OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> IF . OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3

    OPEN_PARENTH    shift and go to state 102


state 86

    (26) STATEMENTS -> VAR .
    (4) VAR -> VAR . TIPO DECLARE SEMICOLON
    (5) VAR -> VAR . TIPO MAT SEMICOLON
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 26 (STATEMENTS -> VAR .)
    PRINT           reduce using rule 26 (STATEMENTS -> VAR .)
    READ            reduce using rule 26 (STATEMENTS -> VAR .)
    IF              reduce using rule 26 (STATEMENTS -> VAR .)
    WHILE           reduce using rule 26 (STATEMENTS -> VAR .)
    DO              reduce using rule 26 (STATEMENTS -> VAR .)
    FOR             reduce using rule 26 (STATEMENTS -> VAR .)
    ID              reduce using rule 26 (STATEMENTS -> VAR .)
    INT             shift and go to state 1
    DOUBLE          shift and go to state 3

  ! INT             [ reduce using rule 26 (STATEMENTS -> VAR .) ]
  ! DOUBLE          [ reduce using rule 26 (STATEMENTS -> VAR .) ]

    TIPO                           shift and go to state 10

state 87

    (13) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC . OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3

    OPEN_BRACES     shift and go to state 103


state 88

    (17) DECLARE_FUNC -> empty .

    PRINT           reduce using rule 17 (DECLARE_FUNC -> empty .)
    READ            reduce using rule 17 (DECLARE_FUNC -> empty .)
    IF              reduce using rule 17 (DECLARE_FUNC -> empty .)
    WHILE           reduce using rule 17 (DECLARE_FUNC -> empty .)
    DO              reduce using rule 17 (DECLARE_FUNC -> empty .)
    FOR             reduce using rule 17 (DECLARE_FUNC -> empty .)
    ID              reduce using rule 17 (DECLARE_FUNC -> empty .)
    INT             reduce using rule 17 (DECLARE_FUNC -> empty .)
    DOUBLE          reduce using rule 17 (DECLARE_FUNC -> empty .)
    CLOSING_BRACES  reduce using rule 17 (DECLARE_FUNC -> empty .)
    OPEN_BRACES     reduce using rule 17 (DECLARE_FUNC -> empty .)


state 89

    (14) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES . DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3
    (17) DECLARE_FUNC -> . empty
    (46) empty -> .

    PRINT           reduce using rule 46 (empty -> .)
    READ            reduce using rule 46 (empty -> .)
    IF              reduce using rule 46 (empty -> .)
    WHILE           reduce using rule 46 (empty -> .)
    DO              reduce using rule 46 (empty -> .)
    FOR             reduce using rule 46 (empty -> .)
    ID              reduce using rule 46 (empty -> .)
    INT             reduce using rule 46 (empty -> .)
    DOUBLE          reduce using rule 46 (empty -> .)
    CLOSING_BRACES  reduce using rule 46 (empty -> .)

    DECLARE_FUNC                   shift and go to state 104
    empty                          shift and go to state 88

state 90

    (51) FORSTAT -> FOR OPEN_PARENTH . ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN FOR_INCREMENT CLOSING_PARENTH IN_S
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (80) MAT -> . ID MAT_BRACKET

    ID              shift and go to state 105

    ASSIGN                         shift and go to state 106
    MAT                            shift and go to state 40

state 91

    (50) DOSTAT -> DO WHILE_AUX_1 . IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (56) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 107

    IN_S                           shift and go to state 108

state 92

    (48) WHILE_AUX_1 -> empty .

    OPEN_PARENTH    reduce using rule 48 (WHILE_AUX_1 -> empty .)
    OPEN_BRACES     reduce using rule 48 (WHILE_AUX_1 -> empty .)
    NOT             reduce using rule 48 (WHILE_AUX_1 -> empty .)
    CONSTANT        reduce using rule 48 (WHILE_AUX_1 -> empty .)
    ID              reduce using rule 48 (WHILE_AUX_1 -> empty .)


state 93

    (40) READSTAT -> READ OPEN_PARENTH . EA CLOSING_PARENTH SEMICOLON
    (57) EA -> . TA
    (58) EA -> . EA PLUS TA
    (59) EA -> . EA MINUS TA
    (64) TA -> . FA
    (65) TA -> . TA MULTIPLY FA
    (66) TA -> . TA DIVISION FA
    (60) FA -> . CONSTANT
    (61) FA -> . ID
    (62) FA -> . MAT
    (63) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (80) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 29
    ID              shift and go to state 30
    OPEN_PARENTH    shift and go to state 33

    FA                             shift and go to state 35
    EA                             shift and go to state 109
    MAT                            shift and go to state 32
    TA                             shift and go to state 31

state 94

    (20) M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES .

    $end            reduce using rule 20 (M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES .)


state 95

    (24) S -> S STATEMENTS .

    CLOSING_BRACES  reduce using rule 24 (S -> S STATEMENTS .)
    PRINT           reduce using rule 24 (S -> S STATEMENTS .)
    READ            reduce using rule 24 (S -> S STATEMENTS .)
    IF              reduce using rule 24 (S -> S STATEMENTS .)
    WHILE           reduce using rule 24 (S -> S STATEMENTS .)
    DO              reduce using rule 24 (S -> S STATEMENTS .)
    FOR             reduce using rule 24 (S -> S STATEMENTS .)
    ID              reduce using rule 24 (S -> S STATEMENTS .)
    INT             reduce using rule 24 (S -> S STATEMENTS .)
    DOUBLE          reduce using rule 24 (S -> S STATEMENTS .)


state 96

    (55) INC_STAT -> ID MINUSMINUS . SEMICOLON

    SEMICOLON       shift and go to state 110


state 97

    (53) FUNCSTAT -> ID OPEN_PARENTH . CLOSING_PARENTH SEMICOLON

    CLOSING_PARENTH shift and go to state 111


state 98

    (54) INC_STAT -> ID PLUSPLUS . SEMICOLON

    SEMICOLON       shift and go to state 112


state 99

    (37) IDSTAT -> ASSIGN SEMICOLON .

    CLOSING_BRACES  reduce using rule 37 (IDSTAT -> ASSIGN SEMICOLON .)
    PRINT           reduce using rule 37 (IDSTAT -> ASSIGN SEMICOLON .)
    READ            reduce using rule 37 (IDSTAT -> ASSIGN SEMICOLON .)
    IF              reduce using rule 37 (IDSTAT -> ASSIGN SEMICOLON .)
    WHILE           reduce using rule 37 (IDSTAT -> ASSIGN SEMICOLON .)
    DO              reduce using rule 37 (IDSTAT -> ASSIGN SEMICOLON .)
    FOR             reduce using rule 37 (IDSTAT -> ASSIGN SEMICOLON .)
    ID              reduce using rule 37 (IDSTAT -> ASSIGN SEMICOLON .)
    INT             reduce using rule 37 (IDSTAT -> ASSIGN SEMICOLON .)
    DOUBLE          reduce using rule 37 (IDSTAT -> ASSIGN SEMICOLON .)


state 100

    (47) WHILESTAT -> WHILE WHILE_AUX_1 . OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S

    OPEN_PARENTH    shift and go to state 113


state 101

    (38) PRINTSTAT -> PRINT OPEN_PARENTH . EA CLOSING_PARENTH SEMICOLON
    (39) PRINTSTAT -> PRINT OPEN_PARENTH . STRING CLOSING_PARENTH SEMICOLON
    (57) EA -> . TA
    (58) EA -> . EA PLUS TA
    (59) EA -> . EA MINUS TA
    (64) TA -> . FA
    (65) TA -> . TA MULTIPLY FA
    (66) TA -> . TA DIVISION FA
    (60) FA -> . CONSTANT
    (61) FA -> . ID
    (62) FA -> . MAT
    (63) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (80) MAT -> . ID MAT_BRACKET

    STRING          shift and go to state 115
    CONSTANT        shift and go to state 29
    ID              shift and go to state 30
    OPEN_PARENTH    shift and go to state 33

    FA                             shift and go to state 35
    EA                             shift and go to state 114
    MAT                            shift and go to state 32
    TA                             shift and go to state 31

state 102

    (41) IFSTAT -> IF OPEN_PARENTH . EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> IF OPEN_PARENTH . EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (67) EL -> . TL
    (68) EL -> . EL OR TL
    (69) TL -> . FL
    (70) TL -> . TL AND FL
    (71) FL -> . NL OPERATORS NL
    (72) FL -> . EA OPERATORS EA
    (73) FL -> . NL
    (74) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (75) NL -> . NOT EL
    (57) EA -> . TA
    (58) EA -> . EA PLUS TA
    (59) EA -> . EA MINUS TA
    (64) TA -> . FA
    (65) TA -> . TA MULTIPLY FA
    (66) TA -> . TA DIVISION FA
    (60) FA -> . CONSTANT
    (61) FA -> . ID
    (62) FA -> . MAT
    (63) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (80) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 117
    NOT             shift and go to state 120
    CONSTANT        shift and go to state 29
    ID              shift and go to state 30

    MAT                            shift and go to state 32
    TA                             shift and go to state 31
    EL                             shift and go to state 118
    FL                             shift and go to state 119
    TL                             shift and go to state 122
    EA                             shift and go to state 121
    FA                             shift and go to state 35
    NL                             shift and go to state 116

state 103

    (13) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES . S CLOSING_BRACES RETURN IF_AUX3
    (23) S -> . STATEMENTS
    (24) S -> . S STATEMENTS
    (25) S -> .
    (26) STATEMENTS -> . VAR
    (27) STATEMENTS -> . IDSTAT
    (28) STATEMENTS -> . PRINTSTAT
    (29) STATEMENTS -> . READSTAT
    (30) STATEMENTS -> . IFSTAT
    (31) STATEMENTS -> . WHILESTAT
    (32) STATEMENTS -> . DOSTAT
    (33) STATEMENTS -> . FORSTAT
    (34) STATEMENTS -> . FUNCSTAT
    (35) STATEMENTS -> . INC_STAT
    (36) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (37) IDSTAT -> . ASSIGN SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (39) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (40) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (47) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (50) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (51) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN FOR_INCREMENT CLOSING_PARENTH IN_S
    (53) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (54) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (55) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (80) MAT -> . ID MAT_BRACKET

  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for READ resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for IF resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for DO resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for FOR resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for ID resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 6 (VAR -> .)
    PRINT           shift and go to state 83
    READ            shift and go to state 75
    IF              shift and go to state 85
    WHILE           shift and go to state 81
    DO              shift and go to state 71
    FOR             shift and go to state 67
    ID              shift and go to state 79
    INT             shift and go to state 1
    DOUBLE          shift and go to state 3

  ! CLOSING_BRACES  [ reduce using rule 25 (S -> .) ]
  ! PRINT           [ reduce using rule 25 (S -> .) ]
  ! READ            [ reduce using rule 25 (S -> .) ]
  ! IF              [ reduce using rule 25 (S -> .) ]
  ! WHILE           [ reduce using rule 25 (S -> .) ]
  ! DO              [ reduce using rule 25 (S -> .) ]
  ! FOR             [ reduce using rule 25 (S -> .) ]
  ! ID              [ reduce using rule 25 (S -> .) ]
  ! INT             [ reduce using rule 25 (S -> .) ]
  ! DOUBLE          [ reduce using rule 25 (S -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 36 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 36 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    IFSTAT                         shift and go to state 70
    INC_STAT                       shift and go to state 72
    FUNCSTAT                       shift and go to state 73
    IDSTAT                         shift and go to state 76
    S                              shift and go to state 123
    MAT                            shift and go to state 40
    STATEMENTS                     shift and go to state 78
    ASSIGN                         shift and go to state 80
    TIPO                           shift and go to state 2
    READSTAT                       shift and go to state 82
    WHILESTAT                      shift and go to state 68
    DOSTAT                         shift and go to state 84
    PRINTSTAT                      shift and go to state 74
    FORSTAT                        shift and go to state 69
    VAR                            shift and go to state 86

state 104

    (14) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC . S CLOSING_BRACES RETURN IF_AUX3
    (23) S -> . STATEMENTS
    (24) S -> . S STATEMENTS
    (25) S -> .
    (26) STATEMENTS -> . VAR
    (27) STATEMENTS -> . IDSTAT
    (28) STATEMENTS -> . PRINTSTAT
    (29) STATEMENTS -> . READSTAT
    (30) STATEMENTS -> . IFSTAT
    (31) STATEMENTS -> . WHILESTAT
    (32) STATEMENTS -> . DOSTAT
    (33) STATEMENTS -> . FORSTAT
    (34) STATEMENTS -> . FUNCSTAT
    (35) STATEMENTS -> . INC_STAT
    (36) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (37) IDSTAT -> . ASSIGN SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (39) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (40) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (47) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (50) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (51) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN FOR_INCREMENT CLOSING_PARENTH IN_S
    (53) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (54) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (55) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (80) MAT -> . ID MAT_BRACKET

  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for READ resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for IF resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for DO resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for FOR resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for ID resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 6 (VAR -> .)
    PRINT           shift and go to state 83
    READ            shift and go to state 75
    IF              shift and go to state 85
    WHILE           shift and go to state 81
    DO              shift and go to state 71
    FOR             shift and go to state 67
    ID              shift and go to state 79
    INT             shift and go to state 1
    DOUBLE          shift and go to state 3

  ! CLOSING_BRACES  [ reduce using rule 25 (S -> .) ]
  ! PRINT           [ reduce using rule 25 (S -> .) ]
  ! READ            [ reduce using rule 25 (S -> .) ]
  ! IF              [ reduce using rule 25 (S -> .) ]
  ! WHILE           [ reduce using rule 25 (S -> .) ]
  ! DO              [ reduce using rule 25 (S -> .) ]
  ! FOR             [ reduce using rule 25 (S -> .) ]
  ! ID              [ reduce using rule 25 (S -> .) ]
  ! INT             [ reduce using rule 25 (S -> .) ]
  ! DOUBLE          [ reduce using rule 25 (S -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 36 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 36 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    IFSTAT                         shift and go to state 70
    INC_STAT                       shift and go to state 72
    FUNCSTAT                       shift and go to state 73
    IDSTAT                         shift and go to state 76
    S                              shift and go to state 124
    MAT                            shift and go to state 40
    STATEMENTS                     shift and go to state 78
    ASSIGN                         shift and go to state 80
    TIPO                           shift and go to state 2
    READSTAT                       shift and go to state 82
    WHILESTAT                      shift and go to state 68
    DOSTAT                         shift and go to state 84
    PRINTSTAT                      shift and go to state 74
    FORSTAT                        shift and go to state 69
    VAR                            shift and go to state 86

state 105

    (11) ASSIGN -> ID . EQUAL EA
    (80) MAT -> ID . MAT_BRACKET
    (81) MAT_BRACKET -> . OPEN_BRACKET EA CLOSING_BRACKET
    (82) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET

    EQUAL           shift and go to state 15
    OPEN_BRACKET    shift and go to state 16

    MAT_BRACKET                    shift and go to state 14

state 106

    (51) FORSTAT -> FOR OPEN_PARENTH ASSIGN . SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN FOR_INCREMENT CLOSING_PARENTH IN_S

    SEMICOLON       shift and go to state 125


state 107

    (56) IN_S -> OPEN_BRACES . S CLOSING_BRACES
    (23) S -> . STATEMENTS
    (24) S -> . S STATEMENTS
    (25) S -> .
    (26) STATEMENTS -> . VAR
    (27) STATEMENTS -> . IDSTAT
    (28) STATEMENTS -> . PRINTSTAT
    (29) STATEMENTS -> . READSTAT
    (30) STATEMENTS -> . IFSTAT
    (31) STATEMENTS -> . WHILESTAT
    (32) STATEMENTS -> . DOSTAT
    (33) STATEMENTS -> . FORSTAT
    (34) STATEMENTS -> . FUNCSTAT
    (35) STATEMENTS -> . INC_STAT
    (36) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (37) IDSTAT -> . ASSIGN SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (39) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (40) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (47) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (50) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (51) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN FOR_INCREMENT CLOSING_PARENTH IN_S
    (53) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (54) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (55) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (80) MAT -> . ID MAT_BRACKET

  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for READ resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for IF resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for DO resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for FOR resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for ID resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 6 (VAR -> .)
    PRINT           shift and go to state 83
    READ            shift and go to state 75
    IF              shift and go to state 85
    WHILE           shift and go to state 81
    DO              shift and go to state 71
    FOR             shift and go to state 67
    ID              shift and go to state 79
    INT             shift and go to state 1
    DOUBLE          shift and go to state 3

  ! CLOSING_BRACES  [ reduce using rule 25 (S -> .) ]
  ! PRINT           [ reduce using rule 25 (S -> .) ]
  ! READ            [ reduce using rule 25 (S -> .) ]
  ! IF              [ reduce using rule 25 (S -> .) ]
  ! WHILE           [ reduce using rule 25 (S -> .) ]
  ! DO              [ reduce using rule 25 (S -> .) ]
  ! FOR             [ reduce using rule 25 (S -> .) ]
  ! ID              [ reduce using rule 25 (S -> .) ]
  ! INT             [ reduce using rule 25 (S -> .) ]
  ! DOUBLE          [ reduce using rule 25 (S -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 36 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 36 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    IFSTAT                         shift and go to state 70
    INC_STAT                       shift and go to state 72
    FUNCSTAT                       shift and go to state 73
    IDSTAT                         shift and go to state 76
    S                              shift and go to state 126
    MAT                            shift and go to state 40
    STATEMENTS                     shift and go to state 78
    ASSIGN                         shift and go to state 80
    TIPO                           shift and go to state 2
    READSTAT                       shift and go to state 82
    DOSTAT                         shift and go to state 84
    PRINTSTAT                      shift and go to state 74
    WHILESTAT                      shift and go to state 68
    FORSTAT                        shift and go to state 69
    VAR                            shift and go to state 86

state 108

    (50) DOSTAT -> DO WHILE_AUX_1 IN_S . WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON

    WHILE           shift and go to state 127


state 109

    (40) READSTAT -> READ OPEN_PARENTH EA . CLOSING_PARENTH SEMICOLON
    (58) EA -> EA . PLUS TA
    (59) EA -> EA . MINUS TA

    CLOSING_PARENTH shift and go to state 128
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52


state 110

    (55) INC_STAT -> ID MINUSMINUS SEMICOLON .

    CLOSING_BRACES  reduce using rule 55 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    PRINT           reduce using rule 55 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    READ            reduce using rule 55 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    IF              reduce using rule 55 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    WHILE           reduce using rule 55 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    DO              reduce using rule 55 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    FOR             reduce using rule 55 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    ID              reduce using rule 55 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    INT             reduce using rule 55 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    DOUBLE          reduce using rule 55 (INC_STAT -> ID MINUSMINUS SEMICOLON .)


state 111

    (53) FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 129


state 112

    (54) INC_STAT -> ID PLUSPLUS SEMICOLON .

    CLOSING_BRACES  reduce using rule 54 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    PRINT           reduce using rule 54 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    READ            reduce using rule 54 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    IF              reduce using rule 54 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    WHILE           reduce using rule 54 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    DO              reduce using rule 54 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    FOR             reduce using rule 54 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    ID              reduce using rule 54 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    INT             reduce using rule 54 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    DOUBLE          reduce using rule 54 (INC_STAT -> ID PLUSPLUS SEMICOLON .)


state 113

    (47) WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH . EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (67) EL -> . TL
    (68) EL -> . EL OR TL
    (69) TL -> . FL
    (70) TL -> . TL AND FL
    (71) FL -> . NL OPERATORS NL
    (72) FL -> . EA OPERATORS EA
    (73) FL -> . NL
    (74) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (75) NL -> . NOT EL
    (57) EA -> . TA
    (58) EA -> . EA PLUS TA
    (59) EA -> . EA MINUS TA
    (64) TA -> . FA
    (65) TA -> . TA MULTIPLY FA
    (66) TA -> . TA DIVISION FA
    (60) FA -> . CONSTANT
    (61) FA -> . ID
    (62) FA -> . MAT
    (63) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (80) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 117
    NOT             shift and go to state 120
    CONSTANT        shift and go to state 29
    ID              shift and go to state 30

    NL                             shift and go to state 116
    TA                             shift and go to state 31
    EL                             shift and go to state 130
    FL                             shift and go to state 119
    TL                             shift and go to state 122
    EA                             shift and go to state 121
    FA                             shift and go to state 35
    MAT                            shift and go to state 32

state 114

    (38) PRINTSTAT -> PRINT OPEN_PARENTH EA . CLOSING_PARENTH SEMICOLON
    (58) EA -> EA . PLUS TA
    (59) EA -> EA . MINUS TA

    CLOSING_PARENTH shift and go to state 131
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52


state 115

    (39) PRINTSTAT -> PRINT OPEN_PARENTH STRING . CLOSING_PARENTH SEMICOLON

    CLOSING_PARENTH shift and go to state 132


state 116

    (71) FL -> NL . OPERATORS NL
    (73) FL -> NL .
    (76) OPERATORS -> . NOT_EQUAL
    (77) OPERATORS -> . LOWER_THAN
    (78) OPERATORS -> . BIGGER_THAN
    (79) OPERATORS -> . EQUAL_EQUAL

  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LOWER_THAN resolved as shift
  ! shift/reduce conflict for BIGGER_THAN resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
    AND             reduce using rule 73 (FL -> NL .)
    CLOSING_PARENTH reduce using rule 73 (FL -> NL .)
    OR              reduce using rule 73 (FL -> NL .)
    SEMICOLON       reduce using rule 73 (FL -> NL .)
    NOT_EQUAL       shift and go to state 133
    LOWER_THAN      shift and go to state 136
    BIGGER_THAN     shift and go to state 137
    EQUAL_EQUAL     shift and go to state 134

  ! NOT_EQUAL       [ reduce using rule 73 (FL -> NL .) ]
  ! LOWER_THAN      [ reduce using rule 73 (FL -> NL .) ]
  ! BIGGER_THAN     [ reduce using rule 73 (FL -> NL .) ]
  ! EQUAL_EQUAL     [ reduce using rule 73 (FL -> NL .) ]

    OPERATORS                      shift and go to state 135

state 117

    (74) FL -> OPEN_PARENTH . EL CLOSING_PARENTH
    (63) FA -> OPEN_PARENTH . EA CLOSING_PARENTH
    (67) EL -> . TL
    (68) EL -> . EL OR TL
    (57) EA -> . TA
    (58) EA -> . EA PLUS TA
    (59) EA -> . EA MINUS TA
    (69) TL -> . FL
    (70) TL -> . TL AND FL
    (64) TA -> . FA
    (65) TA -> . TA MULTIPLY FA
    (66) TA -> . TA DIVISION FA
    (71) FL -> . NL OPERATORS NL
    (72) FL -> . EA OPERATORS EA
    (73) FL -> . NL
    (74) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (60) FA -> . CONSTANT
    (61) FA -> . ID
    (62) FA -> . MAT
    (63) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (75) NL -> . NOT EL
    (80) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 117
    CONSTANT        shift and go to state 29
    ID              shift and go to state 30
    NOT             shift and go to state 120

    EL                             shift and go to state 138
    FL                             shift and go to state 119
    TL                             shift and go to state 122
    TA                             shift and go to state 31
    EA                             shift and go to state 139
    FA                             shift and go to state 35
    NL                             shift and go to state 116
    MAT                            shift and go to state 32

state 118

    (41) IFSTAT -> IF OPEN_PARENTH EL . CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> IF OPEN_PARENTH EL . CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (68) EL -> EL . OR TL

    CLOSING_PARENTH shift and go to state 140
    OR              shift and go to state 141


state 119

    (69) TL -> FL .

    AND             reduce using rule 69 (TL -> FL .)
    OR              reduce using rule 69 (TL -> FL .)
    NOT_EQUAL       reduce using rule 69 (TL -> FL .)
    LOWER_THAN      reduce using rule 69 (TL -> FL .)
    BIGGER_THAN     reduce using rule 69 (TL -> FL .)
    EQUAL_EQUAL     reduce using rule 69 (TL -> FL .)
    CLOSING_PARENTH reduce using rule 69 (TL -> FL .)
    SEMICOLON       reduce using rule 69 (TL -> FL .)


state 120

    (75) NL -> NOT . EL
    (67) EL -> . TL
    (68) EL -> . EL OR TL
    (69) TL -> . FL
    (70) TL -> . TL AND FL
    (71) FL -> . NL OPERATORS NL
    (72) FL -> . EA OPERATORS EA
    (73) FL -> . NL
    (74) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (75) NL -> . NOT EL
    (57) EA -> . TA
    (58) EA -> . EA PLUS TA
    (59) EA -> . EA MINUS TA
    (64) TA -> . FA
    (65) TA -> . TA MULTIPLY FA
    (66) TA -> . TA DIVISION FA
    (60) FA -> . CONSTANT
    (61) FA -> . ID
    (62) FA -> . MAT
    (63) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (80) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 117
    NOT             shift and go to state 120
    CONSTANT        shift and go to state 29
    ID              shift and go to state 30

    EL                             shift and go to state 142
    FL                             shift and go to state 119
    TL                             shift and go to state 122
    NL                             shift and go to state 116
    FA                             shift and go to state 35
    TA                             shift and go to state 31
    MAT                            shift and go to state 32
    EA                             shift and go to state 121

state 121

    (72) FL -> EA . OPERATORS EA
    (58) EA -> EA . PLUS TA
    (59) EA -> EA . MINUS TA
    (76) OPERATORS -> . NOT_EQUAL
    (77) OPERATORS -> . LOWER_THAN
    (78) OPERATORS -> . BIGGER_THAN
    (79) OPERATORS -> . EQUAL_EQUAL

    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    NOT_EQUAL       shift and go to state 133
    LOWER_THAN      shift and go to state 136
    BIGGER_THAN     shift and go to state 137
    EQUAL_EQUAL     shift and go to state 134

    OPERATORS                      shift and go to state 143

state 122

    (67) EL -> TL .
    (70) TL -> TL . AND FL

  ! shift/reduce conflict for AND resolved as shift
    SEMICOLON       reduce using rule 67 (EL -> TL .)
    OR              reduce using rule 67 (EL -> TL .)
    CLOSING_PARENTH reduce using rule 67 (EL -> TL .)
    NOT_EQUAL       reduce using rule 67 (EL -> TL .)
    LOWER_THAN      reduce using rule 67 (EL -> TL .)
    BIGGER_THAN     reduce using rule 67 (EL -> TL .)
    EQUAL_EQUAL     reduce using rule 67 (EL -> TL .)
    AND             shift and go to state 144

  ! AND             [ reduce using rule 67 (EL -> TL .) ]


state 123

    (13) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S . CLOSING_BRACES RETURN IF_AUX3
    (24) S -> S . STATEMENTS
    (26) STATEMENTS -> . VAR
    (27) STATEMENTS -> . IDSTAT
    (28) STATEMENTS -> . PRINTSTAT
    (29) STATEMENTS -> . READSTAT
    (30) STATEMENTS -> . IFSTAT
    (31) STATEMENTS -> . WHILESTAT
    (32) STATEMENTS -> . DOSTAT
    (33) STATEMENTS -> . FORSTAT
    (34) STATEMENTS -> . FUNCSTAT
    (35) STATEMENTS -> . INC_STAT
    (36) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (37) IDSTAT -> . ASSIGN SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (39) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (40) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (47) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (50) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (51) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN FOR_INCREMENT CLOSING_PARENTH IN_S
    (53) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (54) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (55) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (80) MAT -> . ID MAT_BRACKET

  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  shift and go to state 145
    PRINT           shift and go to state 83
    READ            shift and go to state 75
    IF              shift and go to state 85
    WHILE           shift and go to state 81
    DO              shift and go to state 71
    FOR             shift and go to state 67
    ID              shift and go to state 79
    INT             shift and go to state 1
    DOUBLE          shift and go to state 3

  ! CLOSING_BRACES  [ reduce using rule 36 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 36 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    IFSTAT                         shift and go to state 70
    INC_STAT                       shift and go to state 72
    FUNCSTAT                       shift and go to state 73
    IDSTAT                         shift and go to state 76
    MAT                            shift and go to state 40
    STATEMENTS                     shift and go to state 95
    ASSIGN                         shift and go to state 80
    TIPO                           shift and go to state 2
    READSTAT                       shift and go to state 82
    WHILESTAT                      shift and go to state 68
    DOSTAT                         shift and go to state 84
    PRINTSTAT                      shift and go to state 74
    FORSTAT                        shift and go to state 69
    VAR                            shift and go to state 86

state 124

    (14) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S . CLOSING_BRACES RETURN IF_AUX3
    (24) S -> S . STATEMENTS
    (26) STATEMENTS -> . VAR
    (27) STATEMENTS -> . IDSTAT
    (28) STATEMENTS -> . PRINTSTAT
    (29) STATEMENTS -> . READSTAT
    (30) STATEMENTS -> . IFSTAT
    (31) STATEMENTS -> . WHILESTAT
    (32) STATEMENTS -> . DOSTAT
    (33) STATEMENTS -> . FORSTAT
    (34) STATEMENTS -> . FUNCSTAT
    (35) STATEMENTS -> . INC_STAT
    (36) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (37) IDSTAT -> . ASSIGN SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (39) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (40) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (47) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (50) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (51) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN FOR_INCREMENT CLOSING_PARENTH IN_S
    (53) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (54) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (55) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (80) MAT -> . ID MAT_BRACKET

  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  shift and go to state 146
    PRINT           shift and go to state 83
    READ            shift and go to state 75
    IF              shift and go to state 85
    WHILE           shift and go to state 81
    DO              shift and go to state 71
    FOR             shift and go to state 67
    ID              shift and go to state 79
    INT             shift and go to state 1
    DOUBLE          shift and go to state 3

  ! CLOSING_BRACES  [ reduce using rule 36 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 36 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    IFSTAT                         shift and go to state 70
    INC_STAT                       shift and go to state 72
    FUNCSTAT                       shift and go to state 73
    IDSTAT                         shift and go to state 76
    MAT                            shift and go to state 40
    STATEMENTS                     shift and go to state 95
    ASSIGN                         shift and go to state 80
    TIPO                           shift and go to state 2
    READSTAT                       shift and go to state 82
    WHILESTAT                      shift and go to state 68
    DOSTAT                         shift and go to state 84
    PRINTSTAT                      shift and go to state 74
    FORSTAT                        shift and go to state 69
    VAR                            shift and go to state 86

state 125

    (51) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON . WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN FOR_INCREMENT CLOSING_PARENTH IN_S
    (48) WHILE_AUX_1 -> . empty
    (46) empty -> .

    OPEN_PARENTH    reduce using rule 46 (empty -> .)
    NOT             reduce using rule 46 (empty -> .)
    CONSTANT        reduce using rule 46 (empty -> .)
    ID              reduce using rule 46 (empty -> .)

    WHILE_AUX_1                    shift and go to state 147
    empty                          shift and go to state 92

state 126

    (56) IN_S -> OPEN_BRACES S . CLOSING_BRACES
    (24) S -> S . STATEMENTS
    (26) STATEMENTS -> . VAR
    (27) STATEMENTS -> . IDSTAT
    (28) STATEMENTS -> . PRINTSTAT
    (29) STATEMENTS -> . READSTAT
    (30) STATEMENTS -> . IFSTAT
    (31) STATEMENTS -> . WHILESTAT
    (32) STATEMENTS -> . DOSTAT
    (33) STATEMENTS -> . FORSTAT
    (34) STATEMENTS -> . FUNCSTAT
    (35) STATEMENTS -> . INC_STAT
    (36) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (37) IDSTAT -> . ASSIGN SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (39) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (40) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (47) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (50) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (51) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN FOR_INCREMENT CLOSING_PARENTH IN_S
    (53) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (54) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (55) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (80) MAT -> . ID MAT_BRACKET

  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  shift and go to state 148
    PRINT           shift and go to state 83
    READ            shift and go to state 75
    IF              shift and go to state 85
    WHILE           shift and go to state 81
    DO              shift and go to state 71
    FOR             shift and go to state 67
    ID              shift and go to state 79
    INT             shift and go to state 1
    DOUBLE          shift and go to state 3

  ! CLOSING_BRACES  [ reduce using rule 36 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 36 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    IFSTAT                         shift and go to state 70
    INC_STAT                       shift and go to state 72
    FUNCSTAT                       shift and go to state 73
    IDSTAT                         shift and go to state 76
    MAT                            shift and go to state 40
    STATEMENTS                     shift and go to state 95
    ASSIGN                         shift and go to state 80
    TIPO                           shift and go to state 2
    READSTAT                       shift and go to state 82
    DOSTAT                         shift and go to state 84
    PRINTSTAT                      shift and go to state 74
    WHILESTAT                      shift and go to state 68
    FORSTAT                        shift and go to state 69
    VAR                            shift and go to state 86

state 127

    (50) DOSTAT -> DO WHILE_AUX_1 IN_S WHILE . OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON

    OPEN_PARENTH    shift and go to state 149


state 128

    (40) READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 150


state 129

    (53) FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 53 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 53 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 53 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 53 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 53 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 53 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 53 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 53 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 53 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 53 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)


state 130

    (47) WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL . CLOSING_PARENTH WHILE_AUX_2 IN_S
    (68) EL -> EL . OR TL

    CLOSING_PARENTH shift and go to state 151
    OR              shift and go to state 141


state 131

    (38) PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 152


state 132

    (39) PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 153


state 133

    (76) OPERATORS -> NOT_EQUAL .

    CONSTANT        reduce using rule 76 (OPERATORS -> NOT_EQUAL .)
    ID              reduce using rule 76 (OPERATORS -> NOT_EQUAL .)
    OPEN_PARENTH    reduce using rule 76 (OPERATORS -> NOT_EQUAL .)
    NOT             reduce using rule 76 (OPERATORS -> NOT_EQUAL .)


state 134

    (79) OPERATORS -> EQUAL_EQUAL .

    CONSTANT        reduce using rule 79 (OPERATORS -> EQUAL_EQUAL .)
    ID              reduce using rule 79 (OPERATORS -> EQUAL_EQUAL .)
    OPEN_PARENTH    reduce using rule 79 (OPERATORS -> EQUAL_EQUAL .)
    NOT             reduce using rule 79 (OPERATORS -> EQUAL_EQUAL .)


state 135

    (71) FL -> NL OPERATORS . NL
    (75) NL -> . NOT EL

    NOT             shift and go to state 120

    NL                             shift and go to state 154

state 136

    (77) OPERATORS -> LOWER_THAN .

    CONSTANT        reduce using rule 77 (OPERATORS -> LOWER_THAN .)
    ID              reduce using rule 77 (OPERATORS -> LOWER_THAN .)
    OPEN_PARENTH    reduce using rule 77 (OPERATORS -> LOWER_THAN .)
    NOT             reduce using rule 77 (OPERATORS -> LOWER_THAN .)


state 137

    (78) OPERATORS -> BIGGER_THAN .

    CONSTANT        reduce using rule 78 (OPERATORS -> BIGGER_THAN .)
    ID              reduce using rule 78 (OPERATORS -> BIGGER_THAN .)
    OPEN_PARENTH    reduce using rule 78 (OPERATORS -> BIGGER_THAN .)
    NOT             reduce using rule 78 (OPERATORS -> BIGGER_THAN .)


state 138

    (74) FL -> OPEN_PARENTH EL . CLOSING_PARENTH
    (68) EL -> EL . OR TL

    CLOSING_PARENTH shift and go to state 155
    OR              shift and go to state 141


state 139

    (63) FA -> OPEN_PARENTH EA . CLOSING_PARENTH
    (58) EA -> EA . PLUS TA
    (59) EA -> EA . MINUS TA
    (72) FL -> EA . OPERATORS EA
    (76) OPERATORS -> . NOT_EQUAL
    (77) OPERATORS -> . LOWER_THAN
    (78) OPERATORS -> . BIGGER_THAN
    (79) OPERATORS -> . EQUAL_EQUAL

    CLOSING_PARENTH shift and go to state 60
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    NOT_EQUAL       shift and go to state 133
    LOWER_THAN      shift and go to state 136
    BIGGER_THAN     shift and go to state 137
    EQUAL_EQUAL     shift and go to state 134

    OPERATORS                      shift and go to state 143

state 140

    (41) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH . IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH . IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (43) IF_AUX1 -> . empty
    (46) empty -> .

    OPEN_BRACES     reduce using rule 46 (empty -> .)

    IF_AUX1                        shift and go to state 156
    empty                          shift and go to state 157

state 141

    (68) EL -> EL OR . TL
    (69) TL -> . FL
    (70) TL -> . TL AND FL
    (71) FL -> . NL OPERATORS NL
    (72) FL -> . EA OPERATORS EA
    (73) FL -> . NL
    (74) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (75) NL -> . NOT EL
    (57) EA -> . TA
    (58) EA -> . EA PLUS TA
    (59) EA -> . EA MINUS TA
    (64) TA -> . FA
    (65) TA -> . TA MULTIPLY FA
    (66) TA -> . TA DIVISION FA
    (60) FA -> . CONSTANT
    (61) FA -> . ID
    (62) FA -> . MAT
    (63) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (80) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 117
    NOT             shift and go to state 120
    CONSTANT        shift and go to state 29
    ID              shift and go to state 30

    FL                             shift and go to state 119
    TL                             shift and go to state 158
    NL                             shift and go to state 116
    FA                             shift and go to state 35
    TA                             shift and go to state 31
    MAT                            shift and go to state 32
    EA                             shift and go to state 121

state 142

    (75) NL -> NOT EL .
    (68) EL -> EL . OR TL

  ! shift/reduce conflict for OR resolved as shift
    NOT_EQUAL       reduce using rule 75 (NL -> NOT EL .)
    LOWER_THAN      reduce using rule 75 (NL -> NOT EL .)
    BIGGER_THAN     reduce using rule 75 (NL -> NOT EL .)
    EQUAL_EQUAL     reduce using rule 75 (NL -> NOT EL .)
    AND             reduce using rule 75 (NL -> NOT EL .)
    CLOSING_PARENTH reduce using rule 75 (NL -> NOT EL .)
    SEMICOLON       reduce using rule 75 (NL -> NOT EL .)
    OR              shift and go to state 141

  ! OR              [ reduce using rule 75 (NL -> NOT EL .) ]


state 143

    (72) FL -> EA OPERATORS . EA
    (57) EA -> . TA
    (58) EA -> . EA PLUS TA
    (59) EA -> . EA MINUS TA
    (64) TA -> . FA
    (65) TA -> . TA MULTIPLY FA
    (66) TA -> . TA DIVISION FA
    (60) FA -> . CONSTANT
    (61) FA -> . ID
    (62) FA -> . MAT
    (63) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (80) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 29
    ID              shift and go to state 30
    OPEN_PARENTH    shift and go to state 33

    EA                             shift and go to state 159
    TA                             shift and go to state 31
    FA                             shift and go to state 35
    MAT                            shift and go to state 32

state 144

    (70) TL -> TL AND . FL
    (71) FL -> . NL OPERATORS NL
    (72) FL -> . EA OPERATORS EA
    (73) FL -> . NL
    (74) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (75) NL -> . NOT EL
    (57) EA -> . TA
    (58) EA -> . EA PLUS TA
    (59) EA -> . EA MINUS TA
    (64) TA -> . FA
    (65) TA -> . TA MULTIPLY FA
    (66) TA -> . TA DIVISION FA
    (60) FA -> . CONSTANT
    (61) FA -> . ID
    (62) FA -> . MAT
    (63) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (80) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 117
    NOT             shift and go to state 120
    CONSTANT        shift and go to state 29
    ID              shift and go to state 30

    NL                             shift and go to state 116
    FL                             shift and go to state 160
    EA                             shift and go to state 121
    FA                             shift and go to state 35
    TA                             shift and go to state 31
    MAT                            shift and go to state 32

state 145

    (13) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES . RETURN IF_AUX3
    (18) RETURN -> . empty
    (46) empty -> .

    MAIN            reduce using rule 46 (empty -> .)
    FUNCTION        reduce using rule 46 (empty -> .)

    RETURN                         shift and go to state 161
    empty                          shift and go to state 162

state 146

    (14) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES . RETURN IF_AUX3
    (18) RETURN -> . empty
    (46) empty -> .

    MAIN            reduce using rule 46 (empty -> .)
    FUNCTION        reduce using rule 46 (empty -> .)

    RETURN                         shift and go to state 163
    empty                          shift and go to state 162

state 147

    (51) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 . EL SEMICOLON WHILE_AUX_2 ASSIGN FOR_INCREMENT CLOSING_PARENTH IN_S
    (67) EL -> . TL
    (68) EL -> . EL OR TL
    (69) TL -> . FL
    (70) TL -> . TL AND FL
    (71) FL -> . NL OPERATORS NL
    (72) FL -> . EA OPERATORS EA
    (73) FL -> . NL
    (74) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (75) NL -> . NOT EL
    (57) EA -> . TA
    (58) EA -> . EA PLUS TA
    (59) EA -> . EA MINUS TA
    (64) TA -> . FA
    (65) TA -> . TA MULTIPLY FA
    (66) TA -> . TA DIVISION FA
    (60) FA -> . CONSTANT
    (61) FA -> . ID
    (62) FA -> . MAT
    (63) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (80) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 117
    NOT             shift and go to state 120
    CONSTANT        shift and go to state 29
    ID              shift and go to state 30

    NL                             shift and go to state 116
    TA                             shift and go to state 31
    EA                             shift and go to state 121
    EL                             shift and go to state 164
    FL                             shift and go to state 119
    TL                             shift and go to state 122
    FA                             shift and go to state 35
    MAT                            shift and go to state 32

state 148

    (56) IN_S -> OPEN_BRACES S CLOSING_BRACES .

    ELSE            reduce using rule 56 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    CLOSING_BRACES  reduce using rule 56 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    PRINT           reduce using rule 56 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    READ            reduce using rule 56 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    IF              reduce using rule 56 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    WHILE           reduce using rule 56 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    DO              reduce using rule 56 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    FOR             reduce using rule 56 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    ID              reduce using rule 56 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    INT             reduce using rule 56 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    DOUBLE          reduce using rule 56 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)


state 149

    (50) DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH . EL CLOSING_PARENTH SEMICOLON
    (67) EL -> . TL
    (68) EL -> . EL OR TL
    (69) TL -> . FL
    (70) TL -> . TL AND FL
    (71) FL -> . NL OPERATORS NL
    (72) FL -> . EA OPERATORS EA
    (73) FL -> . NL
    (74) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (75) NL -> . NOT EL
    (57) EA -> . TA
    (58) EA -> . EA PLUS TA
    (59) EA -> . EA MINUS TA
    (64) TA -> . FA
    (65) TA -> . TA MULTIPLY FA
    (66) TA -> . TA DIVISION FA
    (60) FA -> . CONSTANT
    (61) FA -> . ID
    (62) FA -> . MAT
    (63) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (80) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 117
    NOT             shift and go to state 120
    CONSTANT        shift and go to state 29
    ID              shift and go to state 30

    NL                             shift and go to state 116
    MAT                            shift and go to state 32
    TA                             shift and go to state 31
    EL                             shift and go to state 165
    FL                             shift and go to state 119
    TL                             shift and go to state 122
    EA                             shift and go to state 121
    FA                             shift and go to state 35

state 150

    (40) READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 40 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 40 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 40 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 40 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 40 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 40 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 40 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 40 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 40 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 40 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)


state 151

    (47) WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH . WHILE_AUX_2 IN_S
    (49) WHILE_AUX_2 -> . empty
    (46) empty -> .

    OPEN_BRACES     reduce using rule 46 (empty -> .)

    WHILE_AUX_2                    shift and go to state 166
    empty                          shift and go to state 167

state 152

    (38) PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)


state 153

    (39) PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 39 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 39 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 39 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 39 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 39 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 39 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 39 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 39 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 39 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 39 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)


state 154

    (71) FL -> NL OPERATORS NL .

    AND             reduce using rule 71 (FL -> NL OPERATORS NL .)
    CLOSING_PARENTH reduce using rule 71 (FL -> NL OPERATORS NL .)
    OR              reduce using rule 71 (FL -> NL OPERATORS NL .)
    SEMICOLON       reduce using rule 71 (FL -> NL OPERATORS NL .)
    NOT_EQUAL       reduce using rule 71 (FL -> NL OPERATORS NL .)
    LOWER_THAN      reduce using rule 71 (FL -> NL OPERATORS NL .)
    BIGGER_THAN     reduce using rule 71 (FL -> NL OPERATORS NL .)
    EQUAL_EQUAL     reduce using rule 71 (FL -> NL OPERATORS NL .)


state 155

    (74) FL -> OPEN_PARENTH EL CLOSING_PARENTH .

    AND             reduce using rule 74 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    CLOSING_PARENTH reduce using rule 74 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    OR              reduce using rule 74 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    SEMICOLON       reduce using rule 74 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    NOT_EQUAL       reduce using rule 74 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    LOWER_THAN      reduce using rule 74 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    BIGGER_THAN     reduce using rule 74 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    EQUAL_EQUAL     reduce using rule 74 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)


state 156

    (41) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 . IN_S IF_AUX3
    (42) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 . IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (56) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 107

    IN_S                           shift and go to state 168

state 157

    (43) IF_AUX1 -> empty .

    OPEN_BRACES     reduce using rule 43 (IF_AUX1 -> empty .)


state 158

    (68) EL -> EL OR TL .
    (70) TL -> TL . AND FL

  ! shift/reduce conflict for AND resolved as shift
    SEMICOLON       reduce using rule 68 (EL -> EL OR TL .)
    OR              reduce using rule 68 (EL -> EL OR TL .)
    CLOSING_PARENTH reduce using rule 68 (EL -> EL OR TL .)
    NOT_EQUAL       reduce using rule 68 (EL -> EL OR TL .)
    LOWER_THAN      reduce using rule 68 (EL -> EL OR TL .)
    BIGGER_THAN     reduce using rule 68 (EL -> EL OR TL .)
    EQUAL_EQUAL     reduce using rule 68 (EL -> EL OR TL .)
    AND             shift and go to state 144

  ! AND             [ reduce using rule 68 (EL -> EL OR TL .) ]


state 159

    (72) FL -> EA OPERATORS EA .
    (58) EA -> EA . PLUS TA
    (59) EA -> EA . MINUS TA

    AND             reduce using rule 72 (FL -> EA OPERATORS EA .)
    CLOSING_PARENTH reduce using rule 72 (FL -> EA OPERATORS EA .)
    OR              reduce using rule 72 (FL -> EA OPERATORS EA .)
    SEMICOLON       reduce using rule 72 (FL -> EA OPERATORS EA .)
    NOT_EQUAL       reduce using rule 72 (FL -> EA OPERATORS EA .)
    LOWER_THAN      reduce using rule 72 (FL -> EA OPERATORS EA .)
    BIGGER_THAN     reduce using rule 72 (FL -> EA OPERATORS EA .)
    EQUAL_EQUAL     reduce using rule 72 (FL -> EA OPERATORS EA .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52


state 160

    (70) TL -> TL AND FL .

    AND             reduce using rule 70 (TL -> TL AND FL .)
    OR              reduce using rule 70 (TL -> TL AND FL .)
    NOT_EQUAL       reduce using rule 70 (TL -> TL AND FL .)
    LOWER_THAN      reduce using rule 70 (TL -> TL AND FL .)
    BIGGER_THAN     reduce using rule 70 (TL -> TL AND FL .)
    EQUAL_EQUAL     reduce using rule 70 (TL -> TL AND FL .)
    CLOSING_PARENTH reduce using rule 70 (TL -> TL AND FL .)
    SEMICOLON       reduce using rule 70 (TL -> TL AND FL .)


state 161

    (13) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN . IF_AUX3
    (45) IF_AUX3 -> . empty
    (46) empty -> .

    MAIN            reduce using rule 46 (empty -> .)
    FUNCTION        reduce using rule 46 (empty -> .)

    IF_AUX3                        shift and go to state 170
    empty                          shift and go to state 169

state 162

    (18) RETURN -> empty .

    MAIN            reduce using rule 18 (RETURN -> empty .)
    FUNCTION        reduce using rule 18 (RETURN -> empty .)


state 163

    (14) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN . IF_AUX3
    (45) IF_AUX3 -> . empty
    (46) empty -> .

    MAIN            reduce using rule 46 (empty -> .)
    FUNCTION        reduce using rule 46 (empty -> .)

    IF_AUX3                        shift and go to state 171
    empty                          shift and go to state 169

state 164

    (51) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL . SEMICOLON WHILE_AUX_2 ASSIGN FOR_INCREMENT CLOSING_PARENTH IN_S
    (68) EL -> EL . OR TL

    SEMICOLON       shift and go to state 172
    OR              shift and go to state 141


state 165

    (50) DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL . CLOSING_PARENTH SEMICOLON
    (68) EL -> EL . OR TL

    CLOSING_PARENTH shift and go to state 173
    OR              shift and go to state 141


state 166

    (47) WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 . IN_S
    (56) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 107

    IN_S                           shift and go to state 174

state 167

    (49) WHILE_AUX_2 -> empty .

    ID              reduce using rule 49 (WHILE_AUX_2 -> empty .)
    OPEN_BRACES     reduce using rule 49 (WHILE_AUX_2 -> empty .)


state 168

    (41) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S . IF_AUX3
    (42) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S . ELSE IF_AUX2 IN_S IF_AUX3
    (45) IF_AUX3 -> . empty
    (46) empty -> .

    ELSE            shift and go to state 175
    CLOSING_BRACES  reduce using rule 46 (empty -> .)
    PRINT           reduce using rule 46 (empty -> .)
    READ            reduce using rule 46 (empty -> .)
    IF              reduce using rule 46 (empty -> .)
    WHILE           reduce using rule 46 (empty -> .)
    DO              reduce using rule 46 (empty -> .)
    FOR             reduce using rule 46 (empty -> .)
    ID              reduce using rule 46 (empty -> .)
    INT             reduce using rule 46 (empty -> .)
    DOUBLE          reduce using rule 46 (empty -> .)

    IF_AUX3                        shift and go to state 176
    empty                          shift and go to state 169

state 169

    (45) IF_AUX3 -> empty .

    CLOSING_BRACES  reduce using rule 45 (IF_AUX3 -> empty .)
    PRINT           reduce using rule 45 (IF_AUX3 -> empty .)
    READ            reduce using rule 45 (IF_AUX3 -> empty .)
    IF              reduce using rule 45 (IF_AUX3 -> empty .)
    WHILE           reduce using rule 45 (IF_AUX3 -> empty .)
    DO              reduce using rule 45 (IF_AUX3 -> empty .)
    FOR             reduce using rule 45 (IF_AUX3 -> empty .)
    ID              reduce using rule 45 (IF_AUX3 -> empty .)
    INT             reduce using rule 45 (IF_AUX3 -> empty .)
    DOUBLE          reduce using rule 45 (IF_AUX3 -> empty .)
    MAIN            reduce using rule 45 (IF_AUX3 -> empty .)
    FUNCTION        reduce using rule 45 (IF_AUX3 -> empty .)


state 170

    (13) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3 .

    MAIN            reduce using rule 13 (FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3 .)
    FUNCTION        reduce using rule 13 (FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3 .)


state 171

    (14) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3 .

    MAIN            reduce using rule 14 (FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3 .)
    FUNCTION        reduce using rule 14 (FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3 .)


state 172

    (51) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON . WHILE_AUX_2 ASSIGN FOR_INCREMENT CLOSING_PARENTH IN_S
    (49) WHILE_AUX_2 -> . empty
    (46) empty -> .

    ID              reduce using rule 46 (empty -> .)

    WHILE_AUX_2                    shift and go to state 177
    empty                          shift and go to state 167

state 173

    (50) DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 178


state 174

    (47) WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .

    CLOSING_BRACES  reduce using rule 47 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    PRINT           reduce using rule 47 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    READ            reduce using rule 47 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    IF              reduce using rule 47 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    WHILE           reduce using rule 47 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    DO              reduce using rule 47 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    FOR             reduce using rule 47 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    ID              reduce using rule 47 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    INT             reduce using rule 47 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    DOUBLE          reduce using rule 47 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)


state 175

    (42) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE . IF_AUX2 IN_S IF_AUX3
    (44) IF_AUX2 -> . empty
    (46) empty -> .

    OPEN_BRACES     reduce using rule 46 (empty -> .)

    IF_AUX2                        shift and go to state 180
    empty                          shift and go to state 179

state 176

    (41) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .

    CLOSING_BRACES  reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    PRINT           reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    READ            reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    IF              reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    WHILE           reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    DO              reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    FOR             reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    ID              reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    INT             reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    DOUBLE          reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)


state 177

    (51) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 . ASSIGN FOR_INCREMENT CLOSING_PARENTH IN_S
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (80) MAT -> . ID MAT_BRACKET

    ID              shift and go to state 105

    ASSIGN                         shift and go to state 181
    MAT                            shift and go to state 40

state 178

    (50) DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 50 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 50 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 50 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 50 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 50 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 50 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 50 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 50 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 50 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 50 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)


state 179

    (44) IF_AUX2 -> empty .

    OPEN_BRACES     reduce using rule 44 (IF_AUX2 -> empty .)


state 180

    (42) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 . IN_S IF_AUX3
    (56) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 107

    IN_S                           shift and go to state 182

state 181

    (51) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN . FOR_INCREMENT CLOSING_PARENTH IN_S
    (52) FOR_INCREMENT -> . empty
    (46) empty -> .

    CLOSING_PARENTH reduce using rule 46 (empty -> .)

    FOR_INCREMENT                  shift and go to state 183
    empty                          shift and go to state 184

state 182

    (42) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S . IF_AUX3
    (45) IF_AUX3 -> . empty
    (46) empty -> .

    CLOSING_BRACES  reduce using rule 46 (empty -> .)
    PRINT           reduce using rule 46 (empty -> .)
    READ            reduce using rule 46 (empty -> .)
    IF              reduce using rule 46 (empty -> .)
    WHILE           reduce using rule 46 (empty -> .)
    DO              reduce using rule 46 (empty -> .)
    FOR             reduce using rule 46 (empty -> .)
    ID              reduce using rule 46 (empty -> .)
    INT             reduce using rule 46 (empty -> .)
    DOUBLE          reduce using rule 46 (empty -> .)

    IF_AUX3                        shift and go to state 185
    empty                          shift and go to state 169

state 183

    (51) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN FOR_INCREMENT . CLOSING_PARENTH IN_S

    CLOSING_PARENTH shift and go to state 186


state 184

    (52) FOR_INCREMENT -> empty .

    CLOSING_PARENTH reduce using rule 52 (FOR_INCREMENT -> empty .)


state 185

    (42) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .

    CLOSING_BRACES  reduce using rule 42 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    PRINT           reduce using rule 42 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    READ            reduce using rule 42 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    IF              reduce using rule 42 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    WHILE           reduce using rule 42 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    DO              reduce using rule 42 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    FOR             reduce using rule 42 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    ID              reduce using rule 42 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    INT             reduce using rule 42 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    DOUBLE          reduce using rule 42 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)


state 186

    (51) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN FOR_INCREMENT CLOSING_PARENTH . IN_S
    (56) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 107

    IN_S                           shift and go to state 187

state 187

    (51) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN FOR_INCREMENT CLOSING_PARENTH IN_S .

    CLOSING_BRACES  reduce using rule 51 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN FOR_INCREMENT CLOSING_PARENTH IN_S .)
    PRINT           reduce using rule 51 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN FOR_INCREMENT CLOSING_PARENTH IN_S .)
    READ            reduce using rule 51 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN FOR_INCREMENT CLOSING_PARENTH IN_S .)
    IF              reduce using rule 51 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN FOR_INCREMENT CLOSING_PARENTH IN_S .)
    WHILE           reduce using rule 51 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN FOR_INCREMENT CLOSING_PARENTH IN_S .)
    DO              reduce using rule 51 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN FOR_INCREMENT CLOSING_PARENTH IN_S .)
    FOR             reduce using rule 51 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN FOR_INCREMENT CLOSING_PARENTH IN_S .)
    ID              reduce using rule 51 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN FOR_INCREMENT CLOSING_PARENTH IN_S .)
    INT             reduce using rule 51 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN FOR_INCREMENT CLOSING_PARENTH IN_S .)
    DOUBLE          reduce using rule 51 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN FOR_INCREMENT CLOSING_PARENTH IN_S .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 5 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 64 resolved as shift
WARNING: shift/reduce conflict for READ in state 64 resolved as shift
WARNING: shift/reduce conflict for IF in state 64 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 64 resolved as shift
WARNING: shift/reduce conflict for DO in state 64 resolved as shift
WARNING: shift/reduce conflict for FOR in state 64 resolved as shift
WARNING: shift/reduce conflict for ID in state 64 resolved as shift
WARNING: shift/reduce conflict for INT in state 64 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 64 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 77 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 77 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 77 resolved as shift
WARNING: shift/reduce conflict for READ in state 77 resolved as shift
WARNING: shift/reduce conflict for IF in state 77 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 77 resolved as shift
WARNING: shift/reduce conflict for DO in state 77 resolved as shift
WARNING: shift/reduce conflict for FOR in state 77 resolved as shift
WARNING: shift/reduce conflict for ID in state 77 resolved as shift
WARNING: shift/reduce conflict for INT in state 77 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 77 resolved as shift
WARNING: shift/reduce conflict for INT in state 86 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 86 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 103 resolved as shift
WARNING: shift/reduce conflict for READ in state 103 resolved as shift
WARNING: shift/reduce conflict for IF in state 103 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 103 resolved as shift
WARNING: shift/reduce conflict for DO in state 103 resolved as shift
WARNING: shift/reduce conflict for FOR in state 103 resolved as shift
WARNING: shift/reduce conflict for ID in state 103 resolved as shift
WARNING: shift/reduce conflict for INT in state 103 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 103 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 104 resolved as shift
WARNING: shift/reduce conflict for READ in state 104 resolved as shift
WARNING: shift/reduce conflict for IF in state 104 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 104 resolved as shift
WARNING: shift/reduce conflict for DO in state 104 resolved as shift
WARNING: shift/reduce conflict for FOR in state 104 resolved as shift
WARNING: shift/reduce conflict for ID in state 104 resolved as shift
WARNING: shift/reduce conflict for INT in state 104 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 104 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 107 resolved as shift
WARNING: shift/reduce conflict for READ in state 107 resolved as shift
WARNING: shift/reduce conflict for IF in state 107 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 107 resolved as shift
WARNING: shift/reduce conflict for DO in state 107 resolved as shift
WARNING: shift/reduce conflict for FOR in state 107 resolved as shift
WARNING: shift/reduce conflict for ID in state 107 resolved as shift
WARNING: shift/reduce conflict for INT in state 107 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 107 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for LOWER_THAN in state 116 resolved as shift
WARNING: shift/reduce conflict for BIGGER_THAN in state 116 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for AND in state 122 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 123 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 123 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 123 resolved as shift
WARNING: shift/reduce conflict for READ in state 123 resolved as shift
WARNING: shift/reduce conflict for IF in state 123 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 123 resolved as shift
WARNING: shift/reduce conflict for DO in state 123 resolved as shift
WARNING: shift/reduce conflict for FOR in state 123 resolved as shift
WARNING: shift/reduce conflict for ID in state 123 resolved as shift
WARNING: shift/reduce conflict for INT in state 123 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 123 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 124 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 124 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 124 resolved as shift
WARNING: shift/reduce conflict for READ in state 124 resolved as shift
WARNING: shift/reduce conflict for IF in state 124 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 124 resolved as shift
WARNING: shift/reduce conflict for DO in state 124 resolved as shift
WARNING: shift/reduce conflict for FOR in state 124 resolved as shift
WARNING: shift/reduce conflict for ID in state 124 resolved as shift
WARNING: shift/reduce conflict for INT in state 124 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 124 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 126 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 126 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 126 resolved as shift
WARNING: shift/reduce conflict for READ in state 126 resolved as shift
WARNING: shift/reduce conflict for IF in state 126 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 126 resolved as shift
WARNING: shift/reduce conflict for DO in state 126 resolved as shift
WARNING: shift/reduce conflict for FOR in state 126 resolved as shift
WARNING: shift/reduce conflict for ID in state 126 resolved as shift
WARNING: shift/reduce conflict for INT in state 126 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 126 resolved as shift
WARNING: shift/reduce conflict for OR in state 142 resolved as shift
WARNING: shift/reduce conflict for AND in state 158 resolved as shift
WARNING: reduce/reduce conflict in state 64 resolved using rule (S -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 64
WARNING: reduce/reduce conflict in state 64 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (S -> <empty>) in state 64
WARNING: reduce/reduce conflict in state 77 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 77
WARNING: reduce/reduce conflict in state 103 resolved using rule (S -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 103
WARNING: reduce/reduce conflict in state 103 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (S -> <empty>) in state 103
WARNING: reduce/reduce conflict in state 104 resolved using rule (S -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 104
WARNING: reduce/reduce conflict in state 104 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (S -> <empty>) in state 104
WARNING: reduce/reduce conflict in state 107 resolved using rule (S -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 107
WARNING: reduce/reduce conflict in state 107 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (S -> <empty>) in state 107
WARNING: reduce/reduce conflict in state 123 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 123
WARNING: reduce/reduce conflict in state 124 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 124
WARNING: reduce/reduce conflict in state 126 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 126
WARNING: Rule (STATEMENTS -> <empty>) is never reduced
WARNING: Rule (S -> <empty>) is never reduced
