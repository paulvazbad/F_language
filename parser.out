Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> VAR FUNC M
Rule 2     VAR -> TIPO DECLARE SEMICOLON
Rule 3     VAR -> TIPO MAT SEMICOLON
Rule 4     VAR -> VAR TIPO DECLARE SEMICOLON
Rule 5     VAR -> VAR TIPO MAT SEMICOLON
Rule 6     VAR -> <empty>
Rule 7     DECLARE -> ID
Rule 8     DECLARE -> DECLARE COMA ID
Rule 9     DECLARE -> ASSIGN
Rule 10    DECLARE -> DECLARE COMA ASSIGN
Rule 11    ASSIGN -> ID EQUAL EA
Rule 12    FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3
Rule 13    FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3
Rule 14    FUNC -> empty
Rule 15    SET_ID -> ID
Rule 16    DECLARE_FUNC -> empty
Rule 17    RETURN -> empty
Rule 18    AUX_FUNC -> empty
Rule 19    M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES
Rule 20    TIPO -> INT
Rule 21    TIPO -> DOUBLE
Rule 22    S -> STATEMENTS
Rule 23    S -> S STATEMENTS
Rule 24    S -> <empty>
Rule 25    STATEMENTS -> VAR
Rule 26    STATEMENTS -> IDSTAT
Rule 27    STATEMENTS -> PRINTSTAT
Rule 28    STATEMENTS -> READSTAT
Rule 29    STATEMENTS -> IFSTAT
Rule 30    STATEMENTS -> WHILESTAT
Rule 31    STATEMENTS -> DOSTAT
Rule 32    STATEMENTS -> FORSTAT
Rule 33    STATEMENTS -> FUNCSTAT
Rule 34    STATEMENTS -> INC_STAT
Rule 35    STATEMENTS -> <empty>
Rule 36    IDSTAT -> ASSIGN SEMICOLON
Rule 37    PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
Rule 38    PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
Rule 39    READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
Rule 40    IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
Rule 41    IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
Rule 42    IF_AUX1 -> empty
Rule 43    IF_AUX2 -> empty
Rule 44    IF_AUX3 -> empty
Rule 45    empty -> <empty>
Rule 46    WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
Rule 47    WHILE_AUX_1 -> empty
Rule 48    WHILE_AUX_2 -> empty
Rule 49    DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
Rule 50    FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
Rule 51    FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
Rule 52    INC_STAT -> ID PLUSPLUS SEMICOLON
Rule 53    INC_STAT -> ID MINUSMINUS SEMICOLON
Rule 54    IN_S -> OPEN_BRACES S CLOSING_BRACES
Rule 55    EA -> TA
Rule 56    EA -> EA PLUS TA
Rule 57    EA -> EA MINUS TA
Rule 58    FA -> CONSTANT
Rule 59    FA -> ID
Rule 60    FA -> MAT
Rule 61    FA -> OPEN_PARENTH EA CLOSING_PARENTH
Rule 62    TA -> FA
Rule 63    TA -> TA MULTIPLY FA
Rule 64    TA -> TA DIVISION FA
Rule 65    EL -> TL
Rule 66    EL -> EL OR TL
Rule 67    TL -> FL
Rule 68    TL -> TL AND FL
Rule 69    FL -> NL OPERATORS NL
Rule 70    FL -> EA OPERATORS EA
Rule 71    FL -> NL
Rule 72    FL -> OPEN_PARENTH EL CLOSING_PARENTH
Rule 73    NL -> NOT EL
Rule 74    OPERATORS -> NOT_EQUAL
Rule 75    OPERATORS -> LOWER_THAN
Rule 76    OPERATORS -> BIGGER_THAN
Rule 77    OPERATORS -> EQUAL_EQUAL
Rule 78    MAT -> ID MAT_BRACKET
Rule 79    MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET
Rule 80    MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET
Rule 81    MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET
Rule 82    MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET

Terminals, with rules where they appear

AND                  : 68
BIGGER_THAN          : 76
CLOSING_BRACES       : 12 13 19 54
CLOSING_BRACKET      : 79 80 81 82
CLOSING_PARENTH      : 12 13 19 37 38 39 40 41 46 49 50 51 61 72
COMA                 : 8 10
COMMENT              : 
CONSTANT             : 58 79 80
DIVISION             : 64
DO                   : 49
DOUBLE               : 21
ELSE                 : 41
EQUAL                : 11
EQUAL_EQUAL          : 77
FOR                  : 50
FUNCTION             : 12 13
ID                   : 7 8 11 15 51 52 53 59 78 81 82
IF                   : 40 41
INT                  : 20
LOWER_THAN           : 75
MAIN                 : 19
MINUS                : 57
MINUSMINUS           : 53
MULTIPLY             : 63
NOT                  : 73
NOT_EQUAL            : 74
OPEN_BRACES          : 12 13 19 54
OPEN_BRACKET         : 79 80 81 82
OPEN_PARENTH         : 12 13 19 37 38 39 40 41 46 49 50 51 61 72
OR                   : 66
PLUS                 : 56
PLUSPLUS             : 52
PRINT                : 37 38
READ                 : 39
SEMICOLON            : 2 3 4 5 36 37 38 39 49 50 50 51 52 53
STRING               : 38
WHILE                : 46 49
error                : 

Nonterminals, with rules where they appear

ASSIGN               : 9 10 36 50 50
AUX_FUNC             : 12 13
DECLARE              : 2 4 8 10
DECLARE_FUNC         : 12 13
DOSTAT               : 31
EA                   : 11 37 39 56 57 61 70 70
EL                   : 40 41 46 49 50 66 72 73
FA                   : 62 63 64
FL                   : 67 68
FORSTAT              : 32
FUNC                 : 1 13
FUNCSTAT             : 33
IDSTAT               : 26
IFSTAT               : 29
IF_AUX1              : 40 41
IF_AUX2              : 41
IF_AUX3              : 12 13 40 41
INC_STAT             : 34
IN_S                 : 40 41 41 46 49 50
M                    : 1
MAT                  : 3 5 60
MAT_BRACKET          : 78 80 82
NL                   : 69 69 71
OPERATORS            : 69 70
PRINTSTAT            : 27
PROGRAMA             : 0
READSTAT             : 28
RETURN               : 12 13
S                    : 12 13 19 23 54
SET_ID               : 12 13
STATEMENTS           : 22 23
TA                   : 55 56 57 63 64
TIPO                 : 2 3 4 5
TL                   : 65 66 68
VAR                  : 1 4 5 25
WHILESTAT            : 30
WHILE_AUX_1          : 46 49 50
WHILE_AUX_2          : 46 50
empty                : 14 16 17 18 42 43 44 47 48

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . VAR FUNC M
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (20) TIPO -> . INT
    (21) TIPO -> . DOUBLE

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    FUNCTION        reduce using rule 6 (VAR -> .)
    MAIN            reduce using rule 6 (VAR -> .)
    INT             shift and go to state 1
    DOUBLE          shift and go to state 3

  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]

    VAR                            shift and go to state 2
    TIPO                           shift and go to state 4
    PROGRAMA                       shift and go to state 5

state 1

    (20) TIPO -> INT .

    ID              reduce using rule 20 (TIPO -> INT .)


state 2

    (1) PROGRAMA -> VAR . FUNC M
    (4) VAR -> VAR . TIPO DECLARE SEMICOLON
    (5) VAR -> VAR . TIPO MAT SEMICOLON
    (12) FUNC -> . FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3
    (13) FUNC -> . FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3
    (14) FUNC -> . empty
    (20) TIPO -> . INT
    (21) TIPO -> . DOUBLE
    (45) empty -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 6
    INT             shift and go to state 1
    DOUBLE          shift and go to state 3
    MAIN            reduce using rule 45 (empty -> .)

  ! FUNCTION        [ reduce using rule 45 (empty -> .) ]

    empty                          shift and go to state 8
    FUNC                           shift and go to state 9
    TIPO                           shift and go to state 7

state 3

    (21) TIPO -> DOUBLE .

    ID              reduce using rule 21 (TIPO -> DOUBLE .)


state 4

    (2) VAR -> TIPO . DECLARE SEMICOLON
    (3) VAR -> TIPO . MAT SEMICOLON
    (7) DECLARE -> . ID
    (8) DECLARE -> . DECLARE COMA ID
    (9) DECLARE -> . ASSIGN
    (10) DECLARE -> . DECLARE COMA ASSIGN
    (78) MAT -> . ID MAT_BRACKET
    (11) ASSIGN -> . ID EQUAL EA

    ID              shift and go to state 11

    MAT                            shift and go to state 10
    ASSIGN                         shift and go to state 12
    DECLARE                        shift and go to state 13

state 5

    (0) S' -> PROGRAMA .



state 6

    (12) FUNC -> FUNCTION . AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3
    (18) AUX_FUNC -> . empty
    (45) empty -> .

    ID              reduce using rule 45 (empty -> .)

    empty                          shift and go to state 14
    AUX_FUNC                       shift and go to state 15

state 7

    (4) VAR -> VAR TIPO . DECLARE SEMICOLON
    (5) VAR -> VAR TIPO . MAT SEMICOLON
    (7) DECLARE -> . ID
    (8) DECLARE -> . DECLARE COMA ID
    (9) DECLARE -> . ASSIGN
    (10) DECLARE -> . DECLARE COMA ASSIGN
    (78) MAT -> . ID MAT_BRACKET
    (11) ASSIGN -> . ID EQUAL EA

    ID              shift and go to state 11

    MAT                            shift and go to state 16
    ASSIGN                         shift and go to state 12
    DECLARE                        shift and go to state 17

state 8

    (14) FUNC -> empty .

    MAIN            reduce using rule 14 (FUNC -> empty .)
    FUNCTION        reduce using rule 14 (FUNC -> empty .)


state 9

    (1) PROGRAMA -> VAR FUNC . M
    (13) FUNC -> FUNC . AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3
    (19) M -> . MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES
    (18) AUX_FUNC -> . empty
    (45) empty -> .

    MAIN            shift and go to state 19
    FUNCTION        reduce using rule 45 (empty -> .)

    empty                          shift and go to state 14
    AUX_FUNC                       shift and go to state 18
    M                              shift and go to state 20

state 10

    (3) VAR -> TIPO MAT . SEMICOLON

    SEMICOLON       shift and go to state 21


state 11

    (7) DECLARE -> ID .
    (78) MAT -> ID . MAT_BRACKET
    (11) ASSIGN -> ID . EQUAL EA
    (79) MAT_BRACKET -> . OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (80) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (81) MAT_BRACKET -> . OPEN_BRACKET ID CLOSING_BRACKET
    (82) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET

    SEMICOLON       reduce using rule 7 (DECLARE -> ID .)
    COMA            reduce using rule 7 (DECLARE -> ID .)
    EQUAL           shift and go to state 24
    OPEN_BRACKET    shift and go to state 22

    MAT_BRACKET                    shift and go to state 23

state 12

    (9) DECLARE -> ASSIGN .

    SEMICOLON       reduce using rule 9 (DECLARE -> ASSIGN .)
    COMA            reduce using rule 9 (DECLARE -> ASSIGN .)


state 13

    (2) VAR -> TIPO DECLARE . SEMICOLON
    (8) DECLARE -> DECLARE . COMA ID
    (10) DECLARE -> DECLARE . COMA ASSIGN

    SEMICOLON       shift and go to state 26
    COMA            shift and go to state 25


state 14

    (18) AUX_FUNC -> empty .

    FUNCTION        reduce using rule 18 (AUX_FUNC -> empty .)
    ID              reduce using rule 18 (AUX_FUNC -> empty .)


state 15

    (12) FUNC -> FUNCTION AUX_FUNC . SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3
    (15) SET_ID -> . ID

    ID              shift and go to state 27

    SET_ID                         shift and go to state 28

state 16

    (5) VAR -> VAR TIPO MAT . SEMICOLON

    SEMICOLON       shift and go to state 29


state 17

    (4) VAR -> VAR TIPO DECLARE . SEMICOLON
    (8) DECLARE -> DECLARE . COMA ID
    (10) DECLARE -> DECLARE . COMA ASSIGN

    SEMICOLON       shift and go to state 30
    COMA            shift and go to state 25


state 18

    (13) FUNC -> FUNC AUX_FUNC . FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3

    FUNCTION        shift and go to state 31


state 19

    (19) M -> MAIN . OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES

    OPEN_PARENTH    shift and go to state 32


state 20

    (1) PROGRAMA -> VAR FUNC M .

    $end            reduce using rule 1 (PROGRAMA -> VAR FUNC M .)


state 21

    (3) VAR -> TIPO MAT SEMICOLON .

    INT             reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    DOUBLE          reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    CLOSING_BRACES  reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    PRINT           reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    READ            reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    IF              reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    WHILE           reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    DO              reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    FOR             reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    ID              reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    FUNCTION        reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    MAIN            reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)


state 22

    (79) MAT_BRACKET -> OPEN_BRACKET . CONSTANT CLOSING_BRACKET
    (81) MAT_BRACKET -> OPEN_BRACKET . ID CLOSING_BRACKET

    CONSTANT        shift and go to state 34
    ID              shift and go to state 33


state 23

    (78) MAT -> ID MAT_BRACKET .
    (80) MAT_BRACKET -> MAT_BRACKET . OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (82) MAT_BRACKET -> MAT_BRACKET . OPEN_BRACKET ID CLOSING_BRACKET

    MULTIPLY        reduce using rule 78 (MAT -> ID MAT_BRACKET .)
    DIVISION        reduce using rule 78 (MAT -> ID MAT_BRACKET .)
    CLOSING_PARENTH reduce using rule 78 (MAT -> ID MAT_BRACKET .)
    PLUS            reduce using rule 78 (MAT -> ID MAT_BRACKET .)
    MINUS           reduce using rule 78 (MAT -> ID MAT_BRACKET .)
    SEMICOLON       reduce using rule 78 (MAT -> ID MAT_BRACKET .)
    COMA            reduce using rule 78 (MAT -> ID MAT_BRACKET .)
    NOT_EQUAL       reduce using rule 78 (MAT -> ID MAT_BRACKET .)
    LOWER_THAN      reduce using rule 78 (MAT -> ID MAT_BRACKET .)
    BIGGER_THAN     reduce using rule 78 (MAT -> ID MAT_BRACKET .)
    EQUAL_EQUAL     reduce using rule 78 (MAT -> ID MAT_BRACKET .)
    AND             reduce using rule 78 (MAT -> ID MAT_BRACKET .)
    OR              reduce using rule 78 (MAT -> ID MAT_BRACKET .)
    OPEN_BRACKET    shift and go to state 35


state 24

    (11) ASSIGN -> ID EQUAL . EA
    (55) EA -> . TA
    (56) EA -> . EA PLUS TA
    (57) EA -> . EA MINUS TA
    (62) TA -> . FA
    (63) TA -> . TA MULTIPLY FA
    (64) TA -> . TA DIVISION FA
    (58) FA -> . CONSTANT
    (59) FA -> . ID
    (60) FA -> . MAT
    (61) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (78) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 39
    ID              shift and go to state 40
    OPEN_PARENTH    shift and go to state 42

    TA                             shift and go to state 37
    MAT                            shift and go to state 36
    EA                             shift and go to state 38
    FA                             shift and go to state 41

state 25

    (8) DECLARE -> DECLARE COMA . ID
    (10) DECLARE -> DECLARE COMA . ASSIGN
    (11) ASSIGN -> . ID EQUAL EA

    ID              shift and go to state 43

    ASSIGN                         shift and go to state 44

state 26

    (2) VAR -> TIPO DECLARE SEMICOLON .

    INT             reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    DOUBLE          reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    CLOSING_BRACES  reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    PRINT           reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    READ            reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    IF              reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    WHILE           reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    DO              reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    FOR             reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    ID              reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    FUNCTION        reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    MAIN            reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)


state 27

    (15) SET_ID -> ID .

    OPEN_PARENTH    reduce using rule 15 (SET_ID -> ID .)


state 28

    (12) FUNC -> FUNCTION AUX_FUNC SET_ID . OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3

    OPEN_PARENTH    shift and go to state 45


state 29

    (5) VAR -> VAR TIPO MAT SEMICOLON .

    INT             reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    DOUBLE          reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    CLOSING_BRACES  reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    PRINT           reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    READ            reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    IF              reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    WHILE           reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    DO              reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    FOR             reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    ID              reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    FUNCTION        reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    MAIN            reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)


state 30

    (4) VAR -> VAR TIPO DECLARE SEMICOLON .

    INT             reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    DOUBLE          reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    CLOSING_BRACES  reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    PRINT           reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    READ            reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    IF              reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    WHILE           reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    DO              reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    FOR             reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    ID              reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    FUNCTION        reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    MAIN            reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)


state 31

    (13) FUNC -> FUNC AUX_FUNC FUNCTION . SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3
    (15) SET_ID -> . ID

    ID              shift and go to state 27

    SET_ID                         shift and go to state 46

state 32

    (19) M -> MAIN OPEN_PARENTH . CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES

    CLOSING_PARENTH shift and go to state 47


state 33

    (81) MAT_BRACKET -> OPEN_BRACKET ID . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 48


state 34

    (79) MAT_BRACKET -> OPEN_BRACKET CONSTANT . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 49


state 35

    (80) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET . CONSTANT CLOSING_BRACKET
    (82) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET . ID CLOSING_BRACKET

    CONSTANT        shift and go to state 51
    ID              shift and go to state 50


state 36

    (60) FA -> MAT .

    MULTIPLY        reduce using rule 60 (FA -> MAT .)
    DIVISION        reduce using rule 60 (FA -> MAT .)
    CLOSING_PARENTH reduce using rule 60 (FA -> MAT .)
    PLUS            reduce using rule 60 (FA -> MAT .)
    MINUS           reduce using rule 60 (FA -> MAT .)
    NOT_EQUAL       reduce using rule 60 (FA -> MAT .)
    LOWER_THAN      reduce using rule 60 (FA -> MAT .)
    BIGGER_THAN     reduce using rule 60 (FA -> MAT .)
    EQUAL_EQUAL     reduce using rule 60 (FA -> MAT .)
    SEMICOLON       reduce using rule 60 (FA -> MAT .)
    COMA            reduce using rule 60 (FA -> MAT .)
    AND             reduce using rule 60 (FA -> MAT .)
    OR              reduce using rule 60 (FA -> MAT .)


state 37

    (55) EA -> TA .
    (63) TA -> TA . MULTIPLY FA
    (64) TA -> TA . DIVISION FA

    PLUS            reduce using rule 55 (EA -> TA .)
    MINUS           reduce using rule 55 (EA -> TA .)
    NOT_EQUAL       reduce using rule 55 (EA -> TA .)
    LOWER_THAN      reduce using rule 55 (EA -> TA .)
    BIGGER_THAN     reduce using rule 55 (EA -> TA .)
    EQUAL_EQUAL     reduce using rule 55 (EA -> TA .)
    SEMICOLON       reduce using rule 55 (EA -> TA .)
    COMA            reduce using rule 55 (EA -> TA .)
    CLOSING_PARENTH reduce using rule 55 (EA -> TA .)
    AND             reduce using rule 55 (EA -> TA .)
    OR              reduce using rule 55 (EA -> TA .)
    MULTIPLY        shift and go to state 53
    DIVISION        shift and go to state 52


state 38

    (11) ASSIGN -> ID EQUAL EA .
    (56) EA -> EA . PLUS TA
    (57) EA -> EA . MINUS TA

    SEMICOLON       reduce using rule 11 (ASSIGN -> ID EQUAL EA .)
    CLOSING_PARENTH reduce using rule 11 (ASSIGN -> ID EQUAL EA .)
    COMA            reduce using rule 11 (ASSIGN -> ID EQUAL EA .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 54


state 39

    (58) FA -> CONSTANT .

    MULTIPLY        reduce using rule 58 (FA -> CONSTANT .)
    DIVISION        reduce using rule 58 (FA -> CONSTANT .)
    CLOSING_PARENTH reduce using rule 58 (FA -> CONSTANT .)
    PLUS            reduce using rule 58 (FA -> CONSTANT .)
    MINUS           reduce using rule 58 (FA -> CONSTANT .)
    NOT_EQUAL       reduce using rule 58 (FA -> CONSTANT .)
    LOWER_THAN      reduce using rule 58 (FA -> CONSTANT .)
    BIGGER_THAN     reduce using rule 58 (FA -> CONSTANT .)
    EQUAL_EQUAL     reduce using rule 58 (FA -> CONSTANT .)
    SEMICOLON       reduce using rule 58 (FA -> CONSTANT .)
    COMA            reduce using rule 58 (FA -> CONSTANT .)
    AND             reduce using rule 58 (FA -> CONSTANT .)
    OR              reduce using rule 58 (FA -> CONSTANT .)


state 40

    (59) FA -> ID .
    (78) MAT -> ID . MAT_BRACKET
    (79) MAT_BRACKET -> . OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (80) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (81) MAT_BRACKET -> . OPEN_BRACKET ID CLOSING_BRACKET
    (82) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET

    MULTIPLY        reduce using rule 59 (FA -> ID .)
    DIVISION        reduce using rule 59 (FA -> ID .)
    CLOSING_PARENTH reduce using rule 59 (FA -> ID .)
    PLUS            reduce using rule 59 (FA -> ID .)
    MINUS           reduce using rule 59 (FA -> ID .)
    NOT_EQUAL       reduce using rule 59 (FA -> ID .)
    LOWER_THAN      reduce using rule 59 (FA -> ID .)
    BIGGER_THAN     reduce using rule 59 (FA -> ID .)
    EQUAL_EQUAL     reduce using rule 59 (FA -> ID .)
    SEMICOLON       reduce using rule 59 (FA -> ID .)
    COMA            reduce using rule 59 (FA -> ID .)
    AND             reduce using rule 59 (FA -> ID .)
    OR              reduce using rule 59 (FA -> ID .)
    OPEN_BRACKET    shift and go to state 22

    MAT_BRACKET                    shift and go to state 23

state 41

    (62) TA -> FA .

    MULTIPLY        reduce using rule 62 (TA -> FA .)
    DIVISION        reduce using rule 62 (TA -> FA .)
    PLUS            reduce using rule 62 (TA -> FA .)
    MINUS           reduce using rule 62 (TA -> FA .)
    NOT_EQUAL       reduce using rule 62 (TA -> FA .)
    LOWER_THAN      reduce using rule 62 (TA -> FA .)
    BIGGER_THAN     reduce using rule 62 (TA -> FA .)
    EQUAL_EQUAL     reduce using rule 62 (TA -> FA .)
    CLOSING_PARENTH reduce using rule 62 (TA -> FA .)
    SEMICOLON       reduce using rule 62 (TA -> FA .)
    COMA            reduce using rule 62 (TA -> FA .)
    AND             reduce using rule 62 (TA -> FA .)
    OR              reduce using rule 62 (TA -> FA .)


state 42

    (61) FA -> OPEN_PARENTH . EA CLOSING_PARENTH
    (55) EA -> . TA
    (56) EA -> . EA PLUS TA
    (57) EA -> . EA MINUS TA
    (62) TA -> . FA
    (63) TA -> . TA MULTIPLY FA
    (64) TA -> . TA DIVISION FA
    (58) FA -> . CONSTANT
    (59) FA -> . ID
    (60) FA -> . MAT
    (61) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (78) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 39
    ID              shift and go to state 40
    OPEN_PARENTH    shift and go to state 42

    TA                             shift and go to state 37
    MAT                            shift and go to state 36
    EA                             shift and go to state 56
    FA                             shift and go to state 41

state 43

    (8) DECLARE -> DECLARE COMA ID .
    (11) ASSIGN -> ID . EQUAL EA

    SEMICOLON       reduce using rule 8 (DECLARE -> DECLARE COMA ID .)
    COMA            reduce using rule 8 (DECLARE -> DECLARE COMA ID .)
    EQUAL           shift and go to state 24


state 44

    (10) DECLARE -> DECLARE COMA ASSIGN .

    SEMICOLON       reduce using rule 10 (DECLARE -> DECLARE COMA ASSIGN .)
    COMA            reduce using rule 10 (DECLARE -> DECLARE COMA ASSIGN .)


state 45

    (12) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH . CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3

    CLOSING_PARENTH shift and go to state 57


state 46

    (13) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID . OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3

    OPEN_PARENTH    shift and go to state 58


state 47

    (19) M -> MAIN OPEN_PARENTH CLOSING_PARENTH . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 59


state 48

    (81) MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .

    OPEN_BRACKET    reduce using rule 81 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 81 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    MULTIPLY        reduce using rule 81 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    DIVISION        reduce using rule 81 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    PLUS            reduce using rule 81 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    MINUS           reduce using rule 81 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    COMA            reduce using rule 81 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    CLOSING_PARENTH reduce using rule 81 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    NOT_EQUAL       reduce using rule 81 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    LOWER_THAN      reduce using rule 81 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    BIGGER_THAN     reduce using rule 81 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    EQUAL_EQUAL     reduce using rule 81 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    AND             reduce using rule 81 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    OR              reduce using rule 81 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)


state 49

    (79) MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .

    OPEN_BRACKET    reduce using rule 79 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 79 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    MULTIPLY        reduce using rule 79 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    DIVISION        reduce using rule 79 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    PLUS            reduce using rule 79 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    MINUS           reduce using rule 79 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    COMA            reduce using rule 79 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    CLOSING_PARENTH reduce using rule 79 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    NOT_EQUAL       reduce using rule 79 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    LOWER_THAN      reduce using rule 79 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    BIGGER_THAN     reduce using rule 79 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    EQUAL_EQUAL     reduce using rule 79 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    AND             reduce using rule 79 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    OR              reduce using rule 79 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)


state 50

    (82) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 60


state 51

    (80) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 61


state 52

    (64) TA -> TA DIVISION . FA
    (58) FA -> . CONSTANT
    (59) FA -> . ID
    (60) FA -> . MAT
    (61) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (78) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 39
    ID              shift and go to state 40
    OPEN_PARENTH    shift and go to state 42

    MAT                            shift and go to state 36
    FA                             shift and go to state 62

state 53

    (63) TA -> TA MULTIPLY . FA
    (58) FA -> . CONSTANT
    (59) FA -> . ID
    (60) FA -> . MAT
    (61) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (78) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 39
    ID              shift and go to state 40
    OPEN_PARENTH    shift and go to state 42

    MAT                            shift and go to state 36
    FA                             shift and go to state 63

state 54

    (57) EA -> EA MINUS . TA
    (62) TA -> . FA
    (63) TA -> . TA MULTIPLY FA
    (64) TA -> . TA DIVISION FA
    (58) FA -> . CONSTANT
    (59) FA -> . ID
    (60) FA -> . MAT
    (61) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (78) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 39
    ID              shift and go to state 40
    OPEN_PARENTH    shift and go to state 42

    TA                             shift and go to state 64
    MAT                            shift and go to state 36
    FA                             shift and go to state 41

state 55

    (56) EA -> EA PLUS . TA
    (62) TA -> . FA
    (63) TA -> . TA MULTIPLY FA
    (64) TA -> . TA DIVISION FA
    (58) FA -> . CONSTANT
    (59) FA -> . ID
    (60) FA -> . MAT
    (61) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (78) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 39
    ID              shift and go to state 40
    OPEN_PARENTH    shift and go to state 42

    TA                             shift and go to state 65
    MAT                            shift and go to state 36
    FA                             shift and go to state 41

state 56

    (61) FA -> OPEN_PARENTH EA . CLOSING_PARENTH
    (56) EA -> EA . PLUS TA
    (57) EA -> EA . MINUS TA

    CLOSING_PARENTH shift and go to state 66
    PLUS            shift and go to state 55
    MINUS           shift and go to state 54


state 57

    (12) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH . DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3
    (16) DECLARE_FUNC -> . empty
    (45) empty -> .

    OPEN_BRACES     reduce using rule 45 (empty -> .)

    DECLARE_FUNC                   shift and go to state 67
    empty                          shift and go to state 68

state 58

    (13) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH . CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3

    CLOSING_PARENTH shift and go to state 69


state 59

    (19) M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES . S CLOSING_BRACES
    (22) S -> . STATEMENTS
    (23) S -> . S STATEMENTS
    (24) S -> .
    (25) STATEMENTS -> . VAR
    (26) STATEMENTS -> . IDSTAT
    (27) STATEMENTS -> . PRINTSTAT
    (28) STATEMENTS -> . READSTAT
    (29) STATEMENTS -> . IFSTAT
    (30) STATEMENTS -> . WHILESTAT
    (31) STATEMENTS -> . DOSTAT
    (32) STATEMENTS -> . FORSTAT
    (33) STATEMENTS -> . FUNCSTAT
    (34) STATEMENTS -> . INC_STAT
    (35) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (36) IDSTAT -> . ASSIGN SEMICOLON
    (37) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (39) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (40) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (46) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (49) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (50) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (51) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (52) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (53) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (20) TIPO -> . INT
    (21) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for READ resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for IF resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for DO resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for FOR resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for ID resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 6 (VAR -> .)
    PRINT           shift and go to state 85
    READ            shift and go to state 78
    IF              shift and go to state 72
    WHILE           shift and go to state 88
    DO              shift and go to state 77
    FOR             shift and go to state 74
    ID              shift and go to state 86
    INT             shift and go to state 1
    DOUBLE          shift and go to state 3

  ! CLOSING_BRACES  [ reduce using rule 24 (S -> .) ]
  ! PRINT           [ reduce using rule 24 (S -> .) ]
  ! READ            [ reduce using rule 24 (S -> .) ]
  ! IF              [ reduce using rule 24 (S -> .) ]
  ! WHILE           [ reduce using rule 24 (S -> .) ]
  ! DO              [ reduce using rule 24 (S -> .) ]
  ! FOR             [ reduce using rule 24 (S -> .) ]
  ! ID              [ reduce using rule 24 (S -> .) ]
  ! INT             [ reduce using rule 24 (S -> .) ]
  ! DOUBLE          [ reduce using rule 24 (S -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 35 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 35 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 35 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 35 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 35 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 35 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 35 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 35 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 35 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 35 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    DOSTAT                         shift and go to state 79
    WHILESTAT                      shift and go to state 70
    IDSTAT                         shift and go to state 71
    STATEMENTS                     shift and go to state 81
    FORSTAT                        shift and go to state 80
    IFSTAT                         shift and go to state 73
    ASSIGN                         shift and go to state 82
    INC_STAT                       shift and go to state 83
    FUNCSTAT                       shift and go to state 84
    VAR                            shift and go to state 75
    TIPO                           shift and go to state 4
    PRINTSTAT                      shift and go to state 76
    S                              shift and go to state 87
    READSTAT                       shift and go to state 89

state 60

    (82) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .

    OPEN_BRACKET    reduce using rule 82 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 82 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    MULTIPLY        reduce using rule 82 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    DIVISION        reduce using rule 82 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    PLUS            reduce using rule 82 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    MINUS           reduce using rule 82 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    COMA            reduce using rule 82 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    CLOSING_PARENTH reduce using rule 82 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    NOT_EQUAL       reduce using rule 82 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    LOWER_THAN      reduce using rule 82 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    BIGGER_THAN     reduce using rule 82 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    EQUAL_EQUAL     reduce using rule 82 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    AND             reduce using rule 82 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    OR              reduce using rule 82 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)


state 61

    (80) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .

    OPEN_BRACKET    reduce using rule 80 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 80 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    MULTIPLY        reduce using rule 80 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    DIVISION        reduce using rule 80 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    PLUS            reduce using rule 80 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    MINUS           reduce using rule 80 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    COMA            reduce using rule 80 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    CLOSING_PARENTH reduce using rule 80 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    NOT_EQUAL       reduce using rule 80 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    LOWER_THAN      reduce using rule 80 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    BIGGER_THAN     reduce using rule 80 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    EQUAL_EQUAL     reduce using rule 80 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    AND             reduce using rule 80 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    OR              reduce using rule 80 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)


state 62

    (64) TA -> TA DIVISION FA .

    MULTIPLY        reduce using rule 64 (TA -> TA DIVISION FA .)
    DIVISION        reduce using rule 64 (TA -> TA DIVISION FA .)
    PLUS            reduce using rule 64 (TA -> TA DIVISION FA .)
    MINUS           reduce using rule 64 (TA -> TA DIVISION FA .)
    NOT_EQUAL       reduce using rule 64 (TA -> TA DIVISION FA .)
    LOWER_THAN      reduce using rule 64 (TA -> TA DIVISION FA .)
    BIGGER_THAN     reduce using rule 64 (TA -> TA DIVISION FA .)
    EQUAL_EQUAL     reduce using rule 64 (TA -> TA DIVISION FA .)
    CLOSING_PARENTH reduce using rule 64 (TA -> TA DIVISION FA .)
    SEMICOLON       reduce using rule 64 (TA -> TA DIVISION FA .)
    COMA            reduce using rule 64 (TA -> TA DIVISION FA .)
    AND             reduce using rule 64 (TA -> TA DIVISION FA .)
    OR              reduce using rule 64 (TA -> TA DIVISION FA .)


state 63

    (63) TA -> TA MULTIPLY FA .

    MULTIPLY        reduce using rule 63 (TA -> TA MULTIPLY FA .)
    DIVISION        reduce using rule 63 (TA -> TA MULTIPLY FA .)
    PLUS            reduce using rule 63 (TA -> TA MULTIPLY FA .)
    MINUS           reduce using rule 63 (TA -> TA MULTIPLY FA .)
    NOT_EQUAL       reduce using rule 63 (TA -> TA MULTIPLY FA .)
    LOWER_THAN      reduce using rule 63 (TA -> TA MULTIPLY FA .)
    BIGGER_THAN     reduce using rule 63 (TA -> TA MULTIPLY FA .)
    EQUAL_EQUAL     reduce using rule 63 (TA -> TA MULTIPLY FA .)
    CLOSING_PARENTH reduce using rule 63 (TA -> TA MULTIPLY FA .)
    SEMICOLON       reduce using rule 63 (TA -> TA MULTIPLY FA .)
    COMA            reduce using rule 63 (TA -> TA MULTIPLY FA .)
    AND             reduce using rule 63 (TA -> TA MULTIPLY FA .)
    OR              reduce using rule 63 (TA -> TA MULTIPLY FA .)


state 64

    (57) EA -> EA MINUS TA .
    (63) TA -> TA . MULTIPLY FA
    (64) TA -> TA . DIVISION FA

    PLUS            reduce using rule 57 (EA -> EA MINUS TA .)
    MINUS           reduce using rule 57 (EA -> EA MINUS TA .)
    NOT_EQUAL       reduce using rule 57 (EA -> EA MINUS TA .)
    LOWER_THAN      reduce using rule 57 (EA -> EA MINUS TA .)
    BIGGER_THAN     reduce using rule 57 (EA -> EA MINUS TA .)
    EQUAL_EQUAL     reduce using rule 57 (EA -> EA MINUS TA .)
    SEMICOLON       reduce using rule 57 (EA -> EA MINUS TA .)
    COMA            reduce using rule 57 (EA -> EA MINUS TA .)
    CLOSING_PARENTH reduce using rule 57 (EA -> EA MINUS TA .)
    AND             reduce using rule 57 (EA -> EA MINUS TA .)
    OR              reduce using rule 57 (EA -> EA MINUS TA .)
    MULTIPLY        shift and go to state 53
    DIVISION        shift and go to state 52


state 65

    (56) EA -> EA PLUS TA .
    (63) TA -> TA . MULTIPLY FA
    (64) TA -> TA . DIVISION FA

    PLUS            reduce using rule 56 (EA -> EA PLUS TA .)
    MINUS           reduce using rule 56 (EA -> EA PLUS TA .)
    NOT_EQUAL       reduce using rule 56 (EA -> EA PLUS TA .)
    LOWER_THAN      reduce using rule 56 (EA -> EA PLUS TA .)
    BIGGER_THAN     reduce using rule 56 (EA -> EA PLUS TA .)
    EQUAL_EQUAL     reduce using rule 56 (EA -> EA PLUS TA .)
    SEMICOLON       reduce using rule 56 (EA -> EA PLUS TA .)
    COMA            reduce using rule 56 (EA -> EA PLUS TA .)
    CLOSING_PARENTH reduce using rule 56 (EA -> EA PLUS TA .)
    AND             reduce using rule 56 (EA -> EA PLUS TA .)
    OR              reduce using rule 56 (EA -> EA PLUS TA .)
    MULTIPLY        shift and go to state 53
    DIVISION        shift and go to state 52


state 66

    (61) FA -> OPEN_PARENTH EA CLOSING_PARENTH .

    MULTIPLY        reduce using rule 61 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    DIVISION        reduce using rule 61 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    CLOSING_PARENTH reduce using rule 61 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    PLUS            reduce using rule 61 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    MINUS           reduce using rule 61 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    NOT_EQUAL       reduce using rule 61 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    LOWER_THAN      reduce using rule 61 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    BIGGER_THAN     reduce using rule 61 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    EQUAL_EQUAL     reduce using rule 61 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    SEMICOLON       reduce using rule 61 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    COMA            reduce using rule 61 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    AND             reduce using rule 61 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    OR              reduce using rule 61 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)


state 67

    (12) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC . OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3

    OPEN_BRACES     shift and go to state 90


state 68

    (16) DECLARE_FUNC -> empty .

    OPEN_BRACES     reduce using rule 16 (DECLARE_FUNC -> empty .)
    PRINT           reduce using rule 16 (DECLARE_FUNC -> empty .)
    READ            reduce using rule 16 (DECLARE_FUNC -> empty .)
    IF              reduce using rule 16 (DECLARE_FUNC -> empty .)
    WHILE           reduce using rule 16 (DECLARE_FUNC -> empty .)
    DO              reduce using rule 16 (DECLARE_FUNC -> empty .)
    FOR             reduce using rule 16 (DECLARE_FUNC -> empty .)
    ID              reduce using rule 16 (DECLARE_FUNC -> empty .)
    INT             reduce using rule 16 (DECLARE_FUNC -> empty .)
    DOUBLE          reduce using rule 16 (DECLARE_FUNC -> empty .)
    CLOSING_BRACES  reduce using rule 16 (DECLARE_FUNC -> empty .)


state 69

    (13) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH . OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3

    OPEN_BRACES     shift and go to state 91


state 70

    (30) STATEMENTS -> WHILESTAT .

    CLOSING_BRACES  reduce using rule 30 (STATEMENTS -> WHILESTAT .)
    PRINT           reduce using rule 30 (STATEMENTS -> WHILESTAT .)
    READ            reduce using rule 30 (STATEMENTS -> WHILESTAT .)
    IF              reduce using rule 30 (STATEMENTS -> WHILESTAT .)
    WHILE           reduce using rule 30 (STATEMENTS -> WHILESTAT .)
    DO              reduce using rule 30 (STATEMENTS -> WHILESTAT .)
    FOR             reduce using rule 30 (STATEMENTS -> WHILESTAT .)
    ID              reduce using rule 30 (STATEMENTS -> WHILESTAT .)
    INT             reduce using rule 30 (STATEMENTS -> WHILESTAT .)
    DOUBLE          reduce using rule 30 (STATEMENTS -> WHILESTAT .)


state 71

    (26) STATEMENTS -> IDSTAT .

    CLOSING_BRACES  reduce using rule 26 (STATEMENTS -> IDSTAT .)
    PRINT           reduce using rule 26 (STATEMENTS -> IDSTAT .)
    READ            reduce using rule 26 (STATEMENTS -> IDSTAT .)
    IF              reduce using rule 26 (STATEMENTS -> IDSTAT .)
    WHILE           reduce using rule 26 (STATEMENTS -> IDSTAT .)
    DO              reduce using rule 26 (STATEMENTS -> IDSTAT .)
    FOR             reduce using rule 26 (STATEMENTS -> IDSTAT .)
    ID              reduce using rule 26 (STATEMENTS -> IDSTAT .)
    INT             reduce using rule 26 (STATEMENTS -> IDSTAT .)
    DOUBLE          reduce using rule 26 (STATEMENTS -> IDSTAT .)


state 72

    (40) IFSTAT -> IF . OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (41) IFSTAT -> IF . OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3

    OPEN_PARENTH    shift and go to state 92


state 73

    (29) STATEMENTS -> IFSTAT .

    CLOSING_BRACES  reduce using rule 29 (STATEMENTS -> IFSTAT .)
    PRINT           reduce using rule 29 (STATEMENTS -> IFSTAT .)
    READ            reduce using rule 29 (STATEMENTS -> IFSTAT .)
    IF              reduce using rule 29 (STATEMENTS -> IFSTAT .)
    WHILE           reduce using rule 29 (STATEMENTS -> IFSTAT .)
    DO              reduce using rule 29 (STATEMENTS -> IFSTAT .)
    FOR             reduce using rule 29 (STATEMENTS -> IFSTAT .)
    ID              reduce using rule 29 (STATEMENTS -> IFSTAT .)
    INT             reduce using rule 29 (STATEMENTS -> IFSTAT .)
    DOUBLE          reduce using rule 29 (STATEMENTS -> IFSTAT .)


state 74

    (50) FORSTAT -> FOR . OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S

    OPEN_PARENTH    shift and go to state 93


state 75

    (25) STATEMENTS -> VAR .
    (4) VAR -> VAR . TIPO DECLARE SEMICOLON
    (5) VAR -> VAR . TIPO MAT SEMICOLON
    (20) TIPO -> . INT
    (21) TIPO -> . DOUBLE

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 25 (STATEMENTS -> VAR .)
    PRINT           reduce using rule 25 (STATEMENTS -> VAR .)
    READ            reduce using rule 25 (STATEMENTS -> VAR .)
    IF              reduce using rule 25 (STATEMENTS -> VAR .)
    WHILE           reduce using rule 25 (STATEMENTS -> VAR .)
    DO              reduce using rule 25 (STATEMENTS -> VAR .)
    FOR             reduce using rule 25 (STATEMENTS -> VAR .)
    ID              reduce using rule 25 (STATEMENTS -> VAR .)
    INT             shift and go to state 1
    DOUBLE          shift and go to state 3

  ! INT             [ reduce using rule 25 (STATEMENTS -> VAR .) ]
  ! DOUBLE          [ reduce using rule 25 (STATEMENTS -> VAR .) ]

    TIPO                           shift and go to state 7

state 76

    (27) STATEMENTS -> PRINTSTAT .

    CLOSING_BRACES  reduce using rule 27 (STATEMENTS -> PRINTSTAT .)
    PRINT           reduce using rule 27 (STATEMENTS -> PRINTSTAT .)
    READ            reduce using rule 27 (STATEMENTS -> PRINTSTAT .)
    IF              reduce using rule 27 (STATEMENTS -> PRINTSTAT .)
    WHILE           reduce using rule 27 (STATEMENTS -> PRINTSTAT .)
    DO              reduce using rule 27 (STATEMENTS -> PRINTSTAT .)
    FOR             reduce using rule 27 (STATEMENTS -> PRINTSTAT .)
    ID              reduce using rule 27 (STATEMENTS -> PRINTSTAT .)
    INT             reduce using rule 27 (STATEMENTS -> PRINTSTAT .)
    DOUBLE          reduce using rule 27 (STATEMENTS -> PRINTSTAT .)


state 77

    (49) DOSTAT -> DO . WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (47) WHILE_AUX_1 -> . empty
    (45) empty -> .

    OPEN_BRACES     reduce using rule 45 (empty -> .)

    empty                          shift and go to state 94
    WHILE_AUX_1                    shift and go to state 95

state 78

    (39) READSTAT -> READ . OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON

    OPEN_PARENTH    shift and go to state 96


state 79

    (31) STATEMENTS -> DOSTAT .

    CLOSING_BRACES  reduce using rule 31 (STATEMENTS -> DOSTAT .)
    PRINT           reduce using rule 31 (STATEMENTS -> DOSTAT .)
    READ            reduce using rule 31 (STATEMENTS -> DOSTAT .)
    IF              reduce using rule 31 (STATEMENTS -> DOSTAT .)
    WHILE           reduce using rule 31 (STATEMENTS -> DOSTAT .)
    DO              reduce using rule 31 (STATEMENTS -> DOSTAT .)
    FOR             reduce using rule 31 (STATEMENTS -> DOSTAT .)
    ID              reduce using rule 31 (STATEMENTS -> DOSTAT .)
    INT             reduce using rule 31 (STATEMENTS -> DOSTAT .)
    DOUBLE          reduce using rule 31 (STATEMENTS -> DOSTAT .)


state 80

    (32) STATEMENTS -> FORSTAT .

    CLOSING_BRACES  reduce using rule 32 (STATEMENTS -> FORSTAT .)
    PRINT           reduce using rule 32 (STATEMENTS -> FORSTAT .)
    READ            reduce using rule 32 (STATEMENTS -> FORSTAT .)
    IF              reduce using rule 32 (STATEMENTS -> FORSTAT .)
    WHILE           reduce using rule 32 (STATEMENTS -> FORSTAT .)
    DO              reduce using rule 32 (STATEMENTS -> FORSTAT .)
    FOR             reduce using rule 32 (STATEMENTS -> FORSTAT .)
    ID              reduce using rule 32 (STATEMENTS -> FORSTAT .)
    INT             reduce using rule 32 (STATEMENTS -> FORSTAT .)
    DOUBLE          reduce using rule 32 (STATEMENTS -> FORSTAT .)


state 81

    (22) S -> STATEMENTS .

    CLOSING_BRACES  reduce using rule 22 (S -> STATEMENTS .)
    PRINT           reduce using rule 22 (S -> STATEMENTS .)
    READ            reduce using rule 22 (S -> STATEMENTS .)
    IF              reduce using rule 22 (S -> STATEMENTS .)
    WHILE           reduce using rule 22 (S -> STATEMENTS .)
    DO              reduce using rule 22 (S -> STATEMENTS .)
    FOR             reduce using rule 22 (S -> STATEMENTS .)
    ID              reduce using rule 22 (S -> STATEMENTS .)
    INT             reduce using rule 22 (S -> STATEMENTS .)
    DOUBLE          reduce using rule 22 (S -> STATEMENTS .)


state 82

    (36) IDSTAT -> ASSIGN . SEMICOLON

    SEMICOLON       shift and go to state 97


state 83

    (34) STATEMENTS -> INC_STAT .

    CLOSING_BRACES  reduce using rule 34 (STATEMENTS -> INC_STAT .)
    PRINT           reduce using rule 34 (STATEMENTS -> INC_STAT .)
    READ            reduce using rule 34 (STATEMENTS -> INC_STAT .)
    IF              reduce using rule 34 (STATEMENTS -> INC_STAT .)
    WHILE           reduce using rule 34 (STATEMENTS -> INC_STAT .)
    DO              reduce using rule 34 (STATEMENTS -> INC_STAT .)
    FOR             reduce using rule 34 (STATEMENTS -> INC_STAT .)
    ID              reduce using rule 34 (STATEMENTS -> INC_STAT .)
    INT             reduce using rule 34 (STATEMENTS -> INC_STAT .)
    DOUBLE          reduce using rule 34 (STATEMENTS -> INC_STAT .)


state 84

    (33) STATEMENTS -> FUNCSTAT .

    CLOSING_BRACES  reduce using rule 33 (STATEMENTS -> FUNCSTAT .)
    PRINT           reduce using rule 33 (STATEMENTS -> FUNCSTAT .)
    READ            reduce using rule 33 (STATEMENTS -> FUNCSTAT .)
    IF              reduce using rule 33 (STATEMENTS -> FUNCSTAT .)
    WHILE           reduce using rule 33 (STATEMENTS -> FUNCSTAT .)
    DO              reduce using rule 33 (STATEMENTS -> FUNCSTAT .)
    FOR             reduce using rule 33 (STATEMENTS -> FUNCSTAT .)
    ID              reduce using rule 33 (STATEMENTS -> FUNCSTAT .)
    INT             reduce using rule 33 (STATEMENTS -> FUNCSTAT .)
    DOUBLE          reduce using rule 33 (STATEMENTS -> FUNCSTAT .)


state 85

    (37) PRINTSTAT -> PRINT . OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (38) PRINTSTAT -> PRINT . OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON

    OPEN_PARENTH    shift and go to state 98


state 86

    (51) FUNCSTAT -> ID . OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (52) INC_STAT -> ID . PLUSPLUS SEMICOLON
    (53) INC_STAT -> ID . MINUSMINUS SEMICOLON
    (11) ASSIGN -> ID . EQUAL EA

    OPEN_PARENTH    shift and go to state 100
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 101
    EQUAL           shift and go to state 24


state 87

    (19) M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S . CLOSING_BRACES
    (23) S -> S . STATEMENTS
    (25) STATEMENTS -> . VAR
    (26) STATEMENTS -> . IDSTAT
    (27) STATEMENTS -> . PRINTSTAT
    (28) STATEMENTS -> . READSTAT
    (29) STATEMENTS -> . IFSTAT
    (30) STATEMENTS -> . WHILESTAT
    (31) STATEMENTS -> . DOSTAT
    (32) STATEMENTS -> . FORSTAT
    (33) STATEMENTS -> . FUNCSTAT
    (34) STATEMENTS -> . INC_STAT
    (35) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (36) IDSTAT -> . ASSIGN SEMICOLON
    (37) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (39) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (40) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (46) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (49) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (50) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (51) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (52) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (53) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (20) TIPO -> . INT
    (21) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  shift and go to state 102
    PRINT           shift and go to state 85
    READ            shift and go to state 78
    IF              shift and go to state 72
    WHILE           shift and go to state 88
    DO              shift and go to state 77
    FOR             shift and go to state 74
    ID              shift and go to state 86
    INT             shift and go to state 1
    DOUBLE          shift and go to state 3

  ! CLOSING_BRACES  [ reduce using rule 35 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 35 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 35 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 35 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 35 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 35 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 35 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 35 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 35 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 35 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    DOSTAT                         shift and go to state 79
    WHILESTAT                      shift and go to state 70
    IDSTAT                         shift and go to state 71
    STATEMENTS                     shift and go to state 103
    FORSTAT                        shift and go to state 80
    IFSTAT                         shift and go to state 73
    ASSIGN                         shift and go to state 82
    INC_STAT                       shift and go to state 83
    FUNCSTAT                       shift and go to state 84
    VAR                            shift and go to state 75
    TIPO                           shift and go to state 4
    PRINTSTAT                      shift and go to state 76
    READSTAT                       shift and go to state 89

state 88

    (46) WHILESTAT -> WHILE . WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (47) WHILE_AUX_1 -> . empty
    (45) empty -> .

    OPEN_PARENTH    reduce using rule 45 (empty -> .)

    empty                          shift and go to state 94
    WHILE_AUX_1                    shift and go to state 104

state 89

    (28) STATEMENTS -> READSTAT .

    CLOSING_BRACES  reduce using rule 28 (STATEMENTS -> READSTAT .)
    PRINT           reduce using rule 28 (STATEMENTS -> READSTAT .)
    READ            reduce using rule 28 (STATEMENTS -> READSTAT .)
    IF              reduce using rule 28 (STATEMENTS -> READSTAT .)
    WHILE           reduce using rule 28 (STATEMENTS -> READSTAT .)
    DO              reduce using rule 28 (STATEMENTS -> READSTAT .)
    FOR             reduce using rule 28 (STATEMENTS -> READSTAT .)
    ID              reduce using rule 28 (STATEMENTS -> READSTAT .)
    INT             reduce using rule 28 (STATEMENTS -> READSTAT .)
    DOUBLE          reduce using rule 28 (STATEMENTS -> READSTAT .)


state 90

    (12) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES . S CLOSING_BRACES RETURN IF_AUX3
    (22) S -> . STATEMENTS
    (23) S -> . S STATEMENTS
    (24) S -> .
    (25) STATEMENTS -> . VAR
    (26) STATEMENTS -> . IDSTAT
    (27) STATEMENTS -> . PRINTSTAT
    (28) STATEMENTS -> . READSTAT
    (29) STATEMENTS -> . IFSTAT
    (30) STATEMENTS -> . WHILESTAT
    (31) STATEMENTS -> . DOSTAT
    (32) STATEMENTS -> . FORSTAT
    (33) STATEMENTS -> . FUNCSTAT
    (34) STATEMENTS -> . INC_STAT
    (35) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (36) IDSTAT -> . ASSIGN SEMICOLON
    (37) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (39) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (40) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (46) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (49) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (50) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (51) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (52) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (53) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (20) TIPO -> . INT
    (21) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for READ resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for IF resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for DO resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for FOR resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for ID resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 6 (VAR -> .)
    PRINT           shift and go to state 85
    READ            shift and go to state 78
    IF              shift and go to state 72
    WHILE           shift and go to state 88
    DO              shift and go to state 77
    FOR             shift and go to state 74
    ID              shift and go to state 86
    INT             shift and go to state 1
    DOUBLE          shift and go to state 3

  ! CLOSING_BRACES  [ reduce using rule 24 (S -> .) ]
  ! PRINT           [ reduce using rule 24 (S -> .) ]
  ! READ            [ reduce using rule 24 (S -> .) ]
  ! IF              [ reduce using rule 24 (S -> .) ]
  ! WHILE           [ reduce using rule 24 (S -> .) ]
  ! DO              [ reduce using rule 24 (S -> .) ]
  ! FOR             [ reduce using rule 24 (S -> .) ]
  ! ID              [ reduce using rule 24 (S -> .) ]
  ! INT             [ reduce using rule 24 (S -> .) ]
  ! DOUBLE          [ reduce using rule 24 (S -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 35 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 35 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 35 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 35 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 35 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 35 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 35 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 35 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 35 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 35 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    DOSTAT                         shift and go to state 79
    WHILESTAT                      shift and go to state 70
    IDSTAT                         shift and go to state 71
    STATEMENTS                     shift and go to state 81
    FORSTAT                        shift and go to state 80
    IFSTAT                         shift and go to state 73
    ASSIGN                         shift and go to state 82
    INC_STAT                       shift and go to state 83
    FUNCSTAT                       shift and go to state 84
    VAR                            shift and go to state 75
    PRINTSTAT                      shift and go to state 76
    S                              shift and go to state 105
    TIPO                           shift and go to state 4
    READSTAT                       shift and go to state 89

state 91

    (13) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES . DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3
    (16) DECLARE_FUNC -> . empty
    (45) empty -> .

    PRINT           reduce using rule 45 (empty -> .)
    READ            reduce using rule 45 (empty -> .)
    IF              reduce using rule 45 (empty -> .)
    WHILE           reduce using rule 45 (empty -> .)
    DO              reduce using rule 45 (empty -> .)
    FOR             reduce using rule 45 (empty -> .)
    ID              reduce using rule 45 (empty -> .)
    INT             reduce using rule 45 (empty -> .)
    DOUBLE          reduce using rule 45 (empty -> .)
    CLOSING_BRACES  reduce using rule 45 (empty -> .)

    DECLARE_FUNC                   shift and go to state 106
    empty                          shift and go to state 68

state 92

    (40) IFSTAT -> IF OPEN_PARENTH . EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (41) IFSTAT -> IF OPEN_PARENTH . EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (65) EL -> . TL
    (66) EL -> . EL OR TL
    (67) TL -> . FL
    (68) TL -> . TL AND FL
    (69) FL -> . NL OPERATORS NL
    (70) FL -> . EA OPERATORS EA
    (71) FL -> . NL
    (72) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (73) NL -> . NOT EL
    (55) EA -> . TA
    (56) EA -> . EA PLUS TA
    (57) EA -> . EA MINUS TA
    (62) TA -> . FA
    (63) TA -> . TA MULTIPLY FA
    (64) TA -> . TA DIVISION FA
    (58) FA -> . CONSTANT
    (59) FA -> . ID
    (60) FA -> . MAT
    (61) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (78) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 109
    NOT             shift and go to state 108
    CONSTANT        shift and go to state 39
    ID              shift and go to state 40

    MAT                            shift and go to state 36
    EA                             shift and go to state 110
    FL                             shift and go to state 111
    TA                             shift and go to state 37
    FA                             shift and go to state 41
    TL                             shift and go to state 107
    NL                             shift and go to state 112
    EL                             shift and go to state 113

state 93

    (50) FORSTAT -> FOR OPEN_PARENTH . ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (11) ASSIGN -> . ID EQUAL EA

    ID              shift and go to state 115

    ASSIGN                         shift and go to state 114

state 94

    (47) WHILE_AUX_1 -> empty .

    OPEN_BRACES     reduce using rule 47 (WHILE_AUX_1 -> empty .)
    OPEN_PARENTH    reduce using rule 47 (WHILE_AUX_1 -> empty .)
    NOT             reduce using rule 47 (WHILE_AUX_1 -> empty .)
    CONSTANT        reduce using rule 47 (WHILE_AUX_1 -> empty .)
    ID              reduce using rule 47 (WHILE_AUX_1 -> empty .)


state 95

    (49) DOSTAT -> DO WHILE_AUX_1 . IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (54) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 116

    IN_S                           shift and go to state 117

state 96

    (39) READSTAT -> READ OPEN_PARENTH . EA CLOSING_PARENTH SEMICOLON
    (55) EA -> . TA
    (56) EA -> . EA PLUS TA
    (57) EA -> . EA MINUS TA
    (62) TA -> . FA
    (63) TA -> . TA MULTIPLY FA
    (64) TA -> . TA DIVISION FA
    (58) FA -> . CONSTANT
    (59) FA -> . ID
    (60) FA -> . MAT
    (61) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (78) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 39
    ID              shift and go to state 40
    OPEN_PARENTH    shift and go to state 42

    TA                             shift and go to state 37
    MAT                            shift and go to state 36
    EA                             shift and go to state 118
    FA                             shift and go to state 41

state 97

    (36) IDSTAT -> ASSIGN SEMICOLON .

    CLOSING_BRACES  reduce using rule 36 (IDSTAT -> ASSIGN SEMICOLON .)
    PRINT           reduce using rule 36 (IDSTAT -> ASSIGN SEMICOLON .)
    READ            reduce using rule 36 (IDSTAT -> ASSIGN SEMICOLON .)
    IF              reduce using rule 36 (IDSTAT -> ASSIGN SEMICOLON .)
    WHILE           reduce using rule 36 (IDSTAT -> ASSIGN SEMICOLON .)
    DO              reduce using rule 36 (IDSTAT -> ASSIGN SEMICOLON .)
    FOR             reduce using rule 36 (IDSTAT -> ASSIGN SEMICOLON .)
    ID              reduce using rule 36 (IDSTAT -> ASSIGN SEMICOLON .)
    INT             reduce using rule 36 (IDSTAT -> ASSIGN SEMICOLON .)
    DOUBLE          reduce using rule 36 (IDSTAT -> ASSIGN SEMICOLON .)


state 98

    (37) PRINTSTAT -> PRINT OPEN_PARENTH . EA CLOSING_PARENTH SEMICOLON
    (38) PRINTSTAT -> PRINT OPEN_PARENTH . STRING CLOSING_PARENTH SEMICOLON
    (55) EA -> . TA
    (56) EA -> . EA PLUS TA
    (57) EA -> . EA MINUS TA
    (62) TA -> . FA
    (63) TA -> . TA MULTIPLY FA
    (64) TA -> . TA DIVISION FA
    (58) FA -> . CONSTANT
    (59) FA -> . ID
    (60) FA -> . MAT
    (61) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (78) MAT -> . ID MAT_BRACKET

    STRING          shift and go to state 119
    CONSTANT        shift and go to state 39
    ID              shift and go to state 40
    OPEN_PARENTH    shift and go to state 42

    TA                             shift and go to state 37
    MAT                            shift and go to state 36
    EA                             shift and go to state 120
    FA                             shift and go to state 41

state 99

    (52) INC_STAT -> ID PLUSPLUS . SEMICOLON

    SEMICOLON       shift and go to state 121


state 100

    (51) FUNCSTAT -> ID OPEN_PARENTH . CLOSING_PARENTH SEMICOLON

    CLOSING_PARENTH shift and go to state 122


state 101

    (53) INC_STAT -> ID MINUSMINUS . SEMICOLON

    SEMICOLON       shift and go to state 123


state 102

    (19) M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES .

    $end            reduce using rule 19 (M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES .)


state 103

    (23) S -> S STATEMENTS .

    CLOSING_BRACES  reduce using rule 23 (S -> S STATEMENTS .)
    PRINT           reduce using rule 23 (S -> S STATEMENTS .)
    READ            reduce using rule 23 (S -> S STATEMENTS .)
    IF              reduce using rule 23 (S -> S STATEMENTS .)
    WHILE           reduce using rule 23 (S -> S STATEMENTS .)
    DO              reduce using rule 23 (S -> S STATEMENTS .)
    FOR             reduce using rule 23 (S -> S STATEMENTS .)
    ID              reduce using rule 23 (S -> S STATEMENTS .)
    INT             reduce using rule 23 (S -> S STATEMENTS .)
    DOUBLE          reduce using rule 23 (S -> S STATEMENTS .)


state 104

    (46) WHILESTAT -> WHILE WHILE_AUX_1 . OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S

    OPEN_PARENTH    shift and go to state 124


state 105

    (12) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S . CLOSING_BRACES RETURN IF_AUX3
    (23) S -> S . STATEMENTS
    (25) STATEMENTS -> . VAR
    (26) STATEMENTS -> . IDSTAT
    (27) STATEMENTS -> . PRINTSTAT
    (28) STATEMENTS -> . READSTAT
    (29) STATEMENTS -> . IFSTAT
    (30) STATEMENTS -> . WHILESTAT
    (31) STATEMENTS -> . DOSTAT
    (32) STATEMENTS -> . FORSTAT
    (33) STATEMENTS -> . FUNCSTAT
    (34) STATEMENTS -> . INC_STAT
    (35) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (36) IDSTAT -> . ASSIGN SEMICOLON
    (37) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (39) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (40) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (46) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (49) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (50) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (51) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (52) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (53) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (20) TIPO -> . INT
    (21) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  shift and go to state 125
    PRINT           shift and go to state 85
    READ            shift and go to state 78
    IF              shift and go to state 72
    WHILE           shift and go to state 88
    DO              shift and go to state 77
    FOR             shift and go to state 74
    ID              shift and go to state 86
    INT             shift and go to state 1
    DOUBLE          shift and go to state 3

  ! CLOSING_BRACES  [ reduce using rule 35 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 35 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 35 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 35 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 35 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 35 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 35 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 35 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 35 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 35 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    DOSTAT                         shift and go to state 79
    WHILESTAT                      shift and go to state 70
    IDSTAT                         shift and go to state 71
    STATEMENTS                     shift and go to state 103
    FORSTAT                        shift and go to state 80
    IFSTAT                         shift and go to state 73
    ASSIGN                         shift and go to state 82
    INC_STAT                       shift and go to state 83
    FUNCSTAT                       shift and go to state 84
    VAR                            shift and go to state 75
    PRINTSTAT                      shift and go to state 76
    TIPO                           shift and go to state 4
    READSTAT                       shift and go to state 89

state 106

    (13) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC . S CLOSING_BRACES RETURN IF_AUX3
    (22) S -> . STATEMENTS
    (23) S -> . S STATEMENTS
    (24) S -> .
    (25) STATEMENTS -> . VAR
    (26) STATEMENTS -> . IDSTAT
    (27) STATEMENTS -> . PRINTSTAT
    (28) STATEMENTS -> . READSTAT
    (29) STATEMENTS -> . IFSTAT
    (30) STATEMENTS -> . WHILESTAT
    (31) STATEMENTS -> . DOSTAT
    (32) STATEMENTS -> . FORSTAT
    (33) STATEMENTS -> . FUNCSTAT
    (34) STATEMENTS -> . INC_STAT
    (35) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (36) IDSTAT -> . ASSIGN SEMICOLON
    (37) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (39) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (40) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (46) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (49) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (50) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (51) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (52) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (53) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (20) TIPO -> . INT
    (21) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for READ resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for IF resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for DO resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for FOR resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for ID resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 6 (VAR -> .)
    PRINT           shift and go to state 85
    READ            shift and go to state 78
    IF              shift and go to state 72
    WHILE           shift and go to state 88
    DO              shift and go to state 77
    FOR             shift and go to state 74
    ID              shift and go to state 86
    INT             shift and go to state 1
    DOUBLE          shift and go to state 3

  ! CLOSING_BRACES  [ reduce using rule 24 (S -> .) ]
  ! PRINT           [ reduce using rule 24 (S -> .) ]
  ! READ            [ reduce using rule 24 (S -> .) ]
  ! IF              [ reduce using rule 24 (S -> .) ]
  ! WHILE           [ reduce using rule 24 (S -> .) ]
  ! DO              [ reduce using rule 24 (S -> .) ]
  ! FOR             [ reduce using rule 24 (S -> .) ]
  ! ID              [ reduce using rule 24 (S -> .) ]
  ! INT             [ reduce using rule 24 (S -> .) ]
  ! DOUBLE          [ reduce using rule 24 (S -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 35 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 35 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 35 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 35 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 35 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 35 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 35 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 35 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 35 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 35 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    DOSTAT                         shift and go to state 79
    WHILESTAT                      shift and go to state 70
    IDSTAT                         shift and go to state 71
    FORSTAT                        shift and go to state 80
    STATEMENTS                     shift and go to state 81
    IFSTAT                         shift and go to state 73
    ASSIGN                         shift and go to state 82
    INC_STAT                       shift and go to state 83
    FUNCSTAT                       shift and go to state 84
    VAR                            shift and go to state 75
    PRINTSTAT                      shift and go to state 76
    S                              shift and go to state 126
    TIPO                           shift and go to state 4
    READSTAT                       shift and go to state 89

state 107

    (65) EL -> TL .
    (68) TL -> TL . AND FL

  ! shift/reduce conflict for AND resolved as shift
    SEMICOLON       reduce using rule 65 (EL -> TL .)
    OR              reduce using rule 65 (EL -> TL .)
    NOT_EQUAL       reduce using rule 65 (EL -> TL .)
    LOWER_THAN      reduce using rule 65 (EL -> TL .)
    BIGGER_THAN     reduce using rule 65 (EL -> TL .)
    EQUAL_EQUAL     reduce using rule 65 (EL -> TL .)
    CLOSING_PARENTH reduce using rule 65 (EL -> TL .)
    AND             shift and go to state 127

  ! AND             [ reduce using rule 65 (EL -> TL .) ]


state 108

    (73) NL -> NOT . EL
    (65) EL -> . TL
    (66) EL -> . EL OR TL
    (67) TL -> . FL
    (68) TL -> . TL AND FL
    (69) FL -> . NL OPERATORS NL
    (70) FL -> . EA OPERATORS EA
    (71) FL -> . NL
    (72) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (73) NL -> . NOT EL
    (55) EA -> . TA
    (56) EA -> . EA PLUS TA
    (57) EA -> . EA MINUS TA
    (62) TA -> . FA
    (63) TA -> . TA MULTIPLY FA
    (64) TA -> . TA DIVISION FA
    (58) FA -> . CONSTANT
    (59) FA -> . ID
    (60) FA -> . MAT
    (61) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (78) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 109
    NOT             shift and go to state 108
    CONSTANT        shift and go to state 39
    ID              shift and go to state 40

    TA                             shift and go to state 37
    FA                             shift and go to state 41
    EA                             shift and go to state 110
    FL                             shift and go to state 111
    MAT                            shift and go to state 36
    TL                             shift and go to state 107
    NL                             shift and go to state 112
    EL                             shift and go to state 128

state 109

    (72) FL -> OPEN_PARENTH . EL CLOSING_PARENTH
    (61) FA -> OPEN_PARENTH . EA CLOSING_PARENTH
    (65) EL -> . TL
    (66) EL -> . EL OR TL
    (55) EA -> . TA
    (56) EA -> . EA PLUS TA
    (57) EA -> . EA MINUS TA
    (67) TL -> . FL
    (68) TL -> . TL AND FL
    (62) TA -> . FA
    (63) TA -> . TA MULTIPLY FA
    (64) TA -> . TA DIVISION FA
    (69) FL -> . NL OPERATORS NL
    (70) FL -> . EA OPERATORS EA
    (71) FL -> . NL
    (72) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (58) FA -> . CONSTANT
    (59) FA -> . ID
    (60) FA -> . MAT
    (61) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (73) NL -> . NOT EL
    (78) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 109
    CONSTANT        shift and go to state 39
    ID              shift and go to state 40
    NOT             shift and go to state 108

    TA                             shift and go to state 37
    MAT                            shift and go to state 36
    EA                             shift and go to state 129
    FL                             shift and go to state 111
    FA                             shift and go to state 41
    TL                             shift and go to state 107
    NL                             shift and go to state 112
    EL                             shift and go to state 130

state 110

    (70) FL -> EA . OPERATORS EA
    (56) EA -> EA . PLUS TA
    (57) EA -> EA . MINUS TA
    (74) OPERATORS -> . NOT_EQUAL
    (75) OPERATORS -> . LOWER_THAN
    (76) OPERATORS -> . BIGGER_THAN
    (77) OPERATORS -> . EQUAL_EQUAL

    PLUS            shift and go to state 55
    MINUS           shift and go to state 54
    NOT_EQUAL       shift and go to state 135
    LOWER_THAN      shift and go to state 134
    BIGGER_THAN     shift and go to state 132
    EQUAL_EQUAL     shift and go to state 131

    OPERATORS                      shift and go to state 133

state 111

    (67) TL -> FL .

    AND             reduce using rule 67 (TL -> FL .)
    CLOSING_PARENTH reduce using rule 67 (TL -> FL .)
    OR              reduce using rule 67 (TL -> FL .)
    NOT_EQUAL       reduce using rule 67 (TL -> FL .)
    LOWER_THAN      reduce using rule 67 (TL -> FL .)
    BIGGER_THAN     reduce using rule 67 (TL -> FL .)
    EQUAL_EQUAL     reduce using rule 67 (TL -> FL .)
    SEMICOLON       reduce using rule 67 (TL -> FL .)


state 112

    (69) FL -> NL . OPERATORS NL
    (71) FL -> NL .
    (74) OPERATORS -> . NOT_EQUAL
    (75) OPERATORS -> . LOWER_THAN
    (76) OPERATORS -> . BIGGER_THAN
    (77) OPERATORS -> . EQUAL_EQUAL

  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LOWER_THAN resolved as shift
  ! shift/reduce conflict for BIGGER_THAN resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
    AND             reduce using rule 71 (FL -> NL .)
    OR              reduce using rule 71 (FL -> NL .)
    CLOSING_PARENTH reduce using rule 71 (FL -> NL .)
    SEMICOLON       reduce using rule 71 (FL -> NL .)
    NOT_EQUAL       shift and go to state 135
    LOWER_THAN      shift and go to state 134
    BIGGER_THAN     shift and go to state 132
    EQUAL_EQUAL     shift and go to state 131

  ! NOT_EQUAL       [ reduce using rule 71 (FL -> NL .) ]
  ! LOWER_THAN      [ reduce using rule 71 (FL -> NL .) ]
  ! BIGGER_THAN     [ reduce using rule 71 (FL -> NL .) ]
  ! EQUAL_EQUAL     [ reduce using rule 71 (FL -> NL .) ]

    OPERATORS                      shift and go to state 136

state 113

    (40) IFSTAT -> IF OPEN_PARENTH EL . CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (41) IFSTAT -> IF OPEN_PARENTH EL . CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (66) EL -> EL . OR TL

    CLOSING_PARENTH shift and go to state 138
    OR              shift and go to state 137


state 114

    (50) FORSTAT -> FOR OPEN_PARENTH ASSIGN . SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S

    SEMICOLON       shift and go to state 139


state 115

    (11) ASSIGN -> ID . EQUAL EA

    EQUAL           shift and go to state 24


state 116

    (54) IN_S -> OPEN_BRACES . S CLOSING_BRACES
    (22) S -> . STATEMENTS
    (23) S -> . S STATEMENTS
    (24) S -> .
    (25) STATEMENTS -> . VAR
    (26) STATEMENTS -> . IDSTAT
    (27) STATEMENTS -> . PRINTSTAT
    (28) STATEMENTS -> . READSTAT
    (29) STATEMENTS -> . IFSTAT
    (30) STATEMENTS -> . WHILESTAT
    (31) STATEMENTS -> . DOSTAT
    (32) STATEMENTS -> . FORSTAT
    (33) STATEMENTS -> . FUNCSTAT
    (34) STATEMENTS -> . INC_STAT
    (35) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (36) IDSTAT -> . ASSIGN SEMICOLON
    (37) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (39) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (40) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (46) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (49) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (50) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (51) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (52) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (53) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (20) TIPO -> . INT
    (21) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for READ resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for IF resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for DO resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for FOR resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for ID resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 24 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 6 (VAR -> .)
    PRINT           shift and go to state 85
    READ            shift and go to state 78
    IF              shift and go to state 72
    WHILE           shift and go to state 88
    DO              shift and go to state 77
    FOR             shift and go to state 74
    ID              shift and go to state 86
    INT             shift and go to state 1
    DOUBLE          shift and go to state 3

  ! CLOSING_BRACES  [ reduce using rule 24 (S -> .) ]
  ! PRINT           [ reduce using rule 24 (S -> .) ]
  ! READ            [ reduce using rule 24 (S -> .) ]
  ! IF              [ reduce using rule 24 (S -> .) ]
  ! WHILE           [ reduce using rule 24 (S -> .) ]
  ! DO              [ reduce using rule 24 (S -> .) ]
  ! FOR             [ reduce using rule 24 (S -> .) ]
  ! ID              [ reduce using rule 24 (S -> .) ]
  ! INT             [ reduce using rule 24 (S -> .) ]
  ! DOUBLE          [ reduce using rule 24 (S -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 35 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 35 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 35 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 35 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 35 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 35 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 35 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 35 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 35 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 35 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    DOSTAT                         shift and go to state 79
    WHILESTAT                      shift and go to state 70
    IDSTAT                         shift and go to state 71
    STATEMENTS                     shift and go to state 81
    FORSTAT                        shift and go to state 80
    IFSTAT                         shift and go to state 73
    ASSIGN                         shift and go to state 82
    INC_STAT                       shift and go to state 83
    FUNCSTAT                       shift and go to state 84
    VAR                            shift and go to state 75
    TIPO                           shift and go to state 4
    PRINTSTAT                      shift and go to state 76
    S                              shift and go to state 140
    READSTAT                       shift and go to state 89

state 117

    (49) DOSTAT -> DO WHILE_AUX_1 IN_S . WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON

    WHILE           shift and go to state 141


state 118

    (39) READSTAT -> READ OPEN_PARENTH EA . CLOSING_PARENTH SEMICOLON
    (56) EA -> EA . PLUS TA
    (57) EA -> EA . MINUS TA

    CLOSING_PARENTH shift and go to state 142
    PLUS            shift and go to state 55
    MINUS           shift and go to state 54


state 119

    (38) PRINTSTAT -> PRINT OPEN_PARENTH STRING . CLOSING_PARENTH SEMICOLON

    CLOSING_PARENTH shift and go to state 143


state 120

    (37) PRINTSTAT -> PRINT OPEN_PARENTH EA . CLOSING_PARENTH SEMICOLON
    (56) EA -> EA . PLUS TA
    (57) EA -> EA . MINUS TA

    CLOSING_PARENTH shift and go to state 144
    PLUS            shift and go to state 55
    MINUS           shift and go to state 54


state 121

    (52) INC_STAT -> ID PLUSPLUS SEMICOLON .

    CLOSING_BRACES  reduce using rule 52 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    PRINT           reduce using rule 52 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    READ            reduce using rule 52 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    IF              reduce using rule 52 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    WHILE           reduce using rule 52 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    DO              reduce using rule 52 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    FOR             reduce using rule 52 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    ID              reduce using rule 52 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    INT             reduce using rule 52 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    DOUBLE          reduce using rule 52 (INC_STAT -> ID PLUSPLUS SEMICOLON .)


state 122

    (51) FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 145


state 123

    (53) INC_STAT -> ID MINUSMINUS SEMICOLON .

    CLOSING_BRACES  reduce using rule 53 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    PRINT           reduce using rule 53 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    READ            reduce using rule 53 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    IF              reduce using rule 53 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    WHILE           reduce using rule 53 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    DO              reduce using rule 53 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    FOR             reduce using rule 53 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    ID              reduce using rule 53 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    INT             reduce using rule 53 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    DOUBLE          reduce using rule 53 (INC_STAT -> ID MINUSMINUS SEMICOLON .)


state 124

    (46) WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH . EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (65) EL -> . TL
    (66) EL -> . EL OR TL
    (67) TL -> . FL
    (68) TL -> . TL AND FL
    (69) FL -> . NL OPERATORS NL
    (70) FL -> . EA OPERATORS EA
    (71) FL -> . NL
    (72) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (73) NL -> . NOT EL
    (55) EA -> . TA
    (56) EA -> . EA PLUS TA
    (57) EA -> . EA MINUS TA
    (62) TA -> . FA
    (63) TA -> . TA MULTIPLY FA
    (64) TA -> . TA DIVISION FA
    (58) FA -> . CONSTANT
    (59) FA -> . ID
    (60) FA -> . MAT
    (61) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (78) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 109
    NOT             shift and go to state 108
    CONSTANT        shift and go to state 39
    ID              shift and go to state 40

    MAT                            shift and go to state 36
    EA                             shift and go to state 110
    FL                             shift and go to state 111
    TA                             shift and go to state 37
    FA                             shift and go to state 41
    TL                             shift and go to state 107
    NL                             shift and go to state 112
    EL                             shift and go to state 146

state 125

    (12) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES . RETURN IF_AUX3
    (17) RETURN -> . empty
    (45) empty -> .

    MAIN            reduce using rule 45 (empty -> .)
    FUNCTION        reduce using rule 45 (empty -> .)

    RETURN                         shift and go to state 148
    empty                          shift and go to state 147

state 126

    (13) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S . CLOSING_BRACES RETURN IF_AUX3
    (23) S -> S . STATEMENTS
    (25) STATEMENTS -> . VAR
    (26) STATEMENTS -> . IDSTAT
    (27) STATEMENTS -> . PRINTSTAT
    (28) STATEMENTS -> . READSTAT
    (29) STATEMENTS -> . IFSTAT
    (30) STATEMENTS -> . WHILESTAT
    (31) STATEMENTS -> . DOSTAT
    (32) STATEMENTS -> . FORSTAT
    (33) STATEMENTS -> . FUNCSTAT
    (34) STATEMENTS -> . INC_STAT
    (35) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (36) IDSTAT -> . ASSIGN SEMICOLON
    (37) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (39) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (40) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (46) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (49) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (50) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (51) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (52) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (53) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (20) TIPO -> . INT
    (21) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  shift and go to state 149
    PRINT           shift and go to state 85
    READ            shift and go to state 78
    IF              shift and go to state 72
    WHILE           shift and go to state 88
    DO              shift and go to state 77
    FOR             shift and go to state 74
    ID              shift and go to state 86
    INT             shift and go to state 1
    DOUBLE          shift and go to state 3

  ! CLOSING_BRACES  [ reduce using rule 35 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 35 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 35 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 35 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 35 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 35 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 35 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 35 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 35 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 35 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    DOSTAT                         shift and go to state 79
    WHILESTAT                      shift and go to state 70
    IDSTAT                         shift and go to state 71
    FORSTAT                        shift and go to state 80
    STATEMENTS                     shift and go to state 103
    IFSTAT                         shift and go to state 73
    ASSIGN                         shift and go to state 82
    INC_STAT                       shift and go to state 83
    FUNCSTAT                       shift and go to state 84
    VAR                            shift and go to state 75
    PRINTSTAT                      shift and go to state 76
    TIPO                           shift and go to state 4
    READSTAT                       shift and go to state 89

state 127

    (68) TL -> TL AND . FL
    (69) FL -> . NL OPERATORS NL
    (70) FL -> . EA OPERATORS EA
    (71) FL -> . NL
    (72) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (73) NL -> . NOT EL
    (55) EA -> . TA
    (56) EA -> . EA PLUS TA
    (57) EA -> . EA MINUS TA
    (62) TA -> . FA
    (63) TA -> . TA MULTIPLY FA
    (64) TA -> . TA DIVISION FA
    (58) FA -> . CONSTANT
    (59) FA -> . ID
    (60) FA -> . MAT
    (61) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (78) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 109
    NOT             shift and go to state 108
    CONSTANT        shift and go to state 39
    ID              shift and go to state 40

    TA                             shift and go to state 37
    FA                             shift and go to state 41
    EA                             shift and go to state 110
    FL                             shift and go to state 150
    MAT                            shift and go to state 36
    NL                             shift and go to state 112

state 128

    (73) NL -> NOT EL .
    (66) EL -> EL . OR TL

  ! shift/reduce conflict for OR resolved as shift
    NOT_EQUAL       reduce using rule 73 (NL -> NOT EL .)
    LOWER_THAN      reduce using rule 73 (NL -> NOT EL .)
    BIGGER_THAN     reduce using rule 73 (NL -> NOT EL .)
    EQUAL_EQUAL     reduce using rule 73 (NL -> NOT EL .)
    AND             reduce using rule 73 (NL -> NOT EL .)
    SEMICOLON       reduce using rule 73 (NL -> NOT EL .)
    CLOSING_PARENTH reduce using rule 73 (NL -> NOT EL .)
    OR              shift and go to state 137

  ! OR              [ reduce using rule 73 (NL -> NOT EL .) ]


state 129

    (61) FA -> OPEN_PARENTH EA . CLOSING_PARENTH
    (56) EA -> EA . PLUS TA
    (57) EA -> EA . MINUS TA
    (70) FL -> EA . OPERATORS EA
    (74) OPERATORS -> . NOT_EQUAL
    (75) OPERATORS -> . LOWER_THAN
    (76) OPERATORS -> . BIGGER_THAN
    (77) OPERATORS -> . EQUAL_EQUAL

    CLOSING_PARENTH shift and go to state 66
    PLUS            shift and go to state 55
    MINUS           shift and go to state 54
    NOT_EQUAL       shift and go to state 135
    LOWER_THAN      shift and go to state 134
    BIGGER_THAN     shift and go to state 132
    EQUAL_EQUAL     shift and go to state 131

    OPERATORS                      shift and go to state 133

state 130

    (72) FL -> OPEN_PARENTH EL . CLOSING_PARENTH
    (66) EL -> EL . OR TL

    CLOSING_PARENTH shift and go to state 151
    OR              shift and go to state 137


state 131

    (77) OPERATORS -> EQUAL_EQUAL .

    CONSTANT        reduce using rule 77 (OPERATORS -> EQUAL_EQUAL .)
    ID              reduce using rule 77 (OPERATORS -> EQUAL_EQUAL .)
    OPEN_PARENTH    reduce using rule 77 (OPERATORS -> EQUAL_EQUAL .)
    NOT             reduce using rule 77 (OPERATORS -> EQUAL_EQUAL .)


state 132

    (76) OPERATORS -> BIGGER_THAN .

    CONSTANT        reduce using rule 76 (OPERATORS -> BIGGER_THAN .)
    ID              reduce using rule 76 (OPERATORS -> BIGGER_THAN .)
    OPEN_PARENTH    reduce using rule 76 (OPERATORS -> BIGGER_THAN .)
    NOT             reduce using rule 76 (OPERATORS -> BIGGER_THAN .)


state 133

    (70) FL -> EA OPERATORS . EA
    (55) EA -> . TA
    (56) EA -> . EA PLUS TA
    (57) EA -> . EA MINUS TA
    (62) TA -> . FA
    (63) TA -> . TA MULTIPLY FA
    (64) TA -> . TA DIVISION FA
    (58) FA -> . CONSTANT
    (59) FA -> . ID
    (60) FA -> . MAT
    (61) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (78) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 39
    ID              shift and go to state 40
    OPEN_PARENTH    shift and go to state 42

    TA                             shift and go to state 37
    MAT                            shift and go to state 36
    EA                             shift and go to state 152
    FA                             shift and go to state 41

state 134

    (75) OPERATORS -> LOWER_THAN .

    CONSTANT        reduce using rule 75 (OPERATORS -> LOWER_THAN .)
    ID              reduce using rule 75 (OPERATORS -> LOWER_THAN .)
    OPEN_PARENTH    reduce using rule 75 (OPERATORS -> LOWER_THAN .)
    NOT             reduce using rule 75 (OPERATORS -> LOWER_THAN .)


state 135

    (74) OPERATORS -> NOT_EQUAL .

    CONSTANT        reduce using rule 74 (OPERATORS -> NOT_EQUAL .)
    ID              reduce using rule 74 (OPERATORS -> NOT_EQUAL .)
    OPEN_PARENTH    reduce using rule 74 (OPERATORS -> NOT_EQUAL .)
    NOT             reduce using rule 74 (OPERATORS -> NOT_EQUAL .)


state 136

    (69) FL -> NL OPERATORS . NL
    (73) NL -> . NOT EL

    NOT             shift and go to state 108

    NL                             shift and go to state 153

state 137

    (66) EL -> EL OR . TL
    (67) TL -> . FL
    (68) TL -> . TL AND FL
    (69) FL -> . NL OPERATORS NL
    (70) FL -> . EA OPERATORS EA
    (71) FL -> . NL
    (72) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (73) NL -> . NOT EL
    (55) EA -> . TA
    (56) EA -> . EA PLUS TA
    (57) EA -> . EA MINUS TA
    (62) TA -> . FA
    (63) TA -> . TA MULTIPLY FA
    (64) TA -> . TA DIVISION FA
    (58) FA -> . CONSTANT
    (59) FA -> . ID
    (60) FA -> . MAT
    (61) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (78) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 109
    NOT             shift and go to state 108
    CONSTANT        shift and go to state 39
    ID              shift and go to state 40

    TA                             shift and go to state 37
    FA                             shift and go to state 41
    EA                             shift and go to state 110
    FL                             shift and go to state 111
    MAT                            shift and go to state 36
    TL                             shift and go to state 154
    NL                             shift and go to state 112

state 138

    (40) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH . IF_AUX1 IN_S IF_AUX3
    (41) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH . IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (42) IF_AUX1 -> . empty
    (45) empty -> .

    OPEN_BRACES     reduce using rule 45 (empty -> .)

    empty                          shift and go to state 155
    IF_AUX1                        shift and go to state 156

state 139

    (50) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON . WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (47) WHILE_AUX_1 -> . empty
    (45) empty -> .

    OPEN_PARENTH    reduce using rule 45 (empty -> .)
    NOT             reduce using rule 45 (empty -> .)
    CONSTANT        reduce using rule 45 (empty -> .)
    ID              reduce using rule 45 (empty -> .)

    empty                          shift and go to state 94
    WHILE_AUX_1                    shift and go to state 157

state 140

    (54) IN_S -> OPEN_BRACES S . CLOSING_BRACES
    (23) S -> S . STATEMENTS
    (25) STATEMENTS -> . VAR
    (26) STATEMENTS -> . IDSTAT
    (27) STATEMENTS -> . PRINTSTAT
    (28) STATEMENTS -> . READSTAT
    (29) STATEMENTS -> . IFSTAT
    (30) STATEMENTS -> . WHILESTAT
    (31) STATEMENTS -> . DOSTAT
    (32) STATEMENTS -> . FORSTAT
    (33) STATEMENTS -> . FUNCSTAT
    (34) STATEMENTS -> . INC_STAT
    (35) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (36) IDSTAT -> . ASSIGN SEMICOLON
    (37) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (39) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (40) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (46) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (49) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (50) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (51) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (52) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (53) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (20) TIPO -> . INT
    (21) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  shift and go to state 158
    PRINT           shift and go to state 85
    READ            shift and go to state 78
    IF              shift and go to state 72
    WHILE           shift and go to state 88
    DO              shift and go to state 77
    FOR             shift and go to state 74
    ID              shift and go to state 86
    INT             shift and go to state 1
    DOUBLE          shift and go to state 3

  ! CLOSING_BRACES  [ reduce using rule 35 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 35 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 35 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 35 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 35 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 35 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 35 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 35 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 35 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 35 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    DOSTAT                         shift and go to state 79
    WHILESTAT                      shift and go to state 70
    IDSTAT                         shift and go to state 71
    STATEMENTS                     shift and go to state 103
    FORSTAT                        shift and go to state 80
    IFSTAT                         shift and go to state 73
    ASSIGN                         shift and go to state 82
    INC_STAT                       shift and go to state 83
    FUNCSTAT                       shift and go to state 84
    VAR                            shift and go to state 75
    TIPO                           shift and go to state 4
    PRINTSTAT                      shift and go to state 76
    READSTAT                       shift and go to state 89

state 141

    (49) DOSTAT -> DO WHILE_AUX_1 IN_S WHILE . OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON

    OPEN_PARENTH    shift and go to state 159


state 142

    (39) READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 160


state 143

    (38) PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 161


state 144

    (37) PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 162


state 145

    (51) FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 51 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 51 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 51 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 51 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 51 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 51 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 51 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 51 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 51 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 51 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)


state 146

    (46) WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL . CLOSING_PARENTH WHILE_AUX_2 IN_S
    (66) EL -> EL . OR TL

    CLOSING_PARENTH shift and go to state 163
    OR              shift and go to state 137


state 147

    (17) RETURN -> empty .

    MAIN            reduce using rule 17 (RETURN -> empty .)
    FUNCTION        reduce using rule 17 (RETURN -> empty .)


state 148

    (12) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN . IF_AUX3
    (44) IF_AUX3 -> . empty
    (45) empty -> .

    MAIN            reduce using rule 45 (empty -> .)
    FUNCTION        reduce using rule 45 (empty -> .)

    empty                          shift and go to state 164
    IF_AUX3                        shift and go to state 165

state 149

    (13) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES . RETURN IF_AUX3
    (17) RETURN -> . empty
    (45) empty -> .

    MAIN            reduce using rule 45 (empty -> .)
    FUNCTION        reduce using rule 45 (empty -> .)

    RETURN                         shift and go to state 166
    empty                          shift and go to state 147

state 150

    (68) TL -> TL AND FL .

    AND             reduce using rule 68 (TL -> TL AND FL .)
    CLOSING_PARENTH reduce using rule 68 (TL -> TL AND FL .)
    OR              reduce using rule 68 (TL -> TL AND FL .)
    NOT_EQUAL       reduce using rule 68 (TL -> TL AND FL .)
    LOWER_THAN      reduce using rule 68 (TL -> TL AND FL .)
    BIGGER_THAN     reduce using rule 68 (TL -> TL AND FL .)
    EQUAL_EQUAL     reduce using rule 68 (TL -> TL AND FL .)
    SEMICOLON       reduce using rule 68 (TL -> TL AND FL .)


state 151

    (72) FL -> OPEN_PARENTH EL CLOSING_PARENTH .

    AND             reduce using rule 72 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    OR              reduce using rule 72 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    NOT_EQUAL       reduce using rule 72 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    LOWER_THAN      reduce using rule 72 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    BIGGER_THAN     reduce using rule 72 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    EQUAL_EQUAL     reduce using rule 72 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    CLOSING_PARENTH reduce using rule 72 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    SEMICOLON       reduce using rule 72 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)


state 152

    (70) FL -> EA OPERATORS EA .
    (56) EA -> EA . PLUS TA
    (57) EA -> EA . MINUS TA

    AND             reduce using rule 70 (FL -> EA OPERATORS EA .)
    OR              reduce using rule 70 (FL -> EA OPERATORS EA .)
    NOT_EQUAL       reduce using rule 70 (FL -> EA OPERATORS EA .)
    LOWER_THAN      reduce using rule 70 (FL -> EA OPERATORS EA .)
    BIGGER_THAN     reduce using rule 70 (FL -> EA OPERATORS EA .)
    EQUAL_EQUAL     reduce using rule 70 (FL -> EA OPERATORS EA .)
    CLOSING_PARENTH reduce using rule 70 (FL -> EA OPERATORS EA .)
    SEMICOLON       reduce using rule 70 (FL -> EA OPERATORS EA .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 54


state 153

    (69) FL -> NL OPERATORS NL .

    AND             reduce using rule 69 (FL -> NL OPERATORS NL .)
    OR              reduce using rule 69 (FL -> NL OPERATORS NL .)
    NOT_EQUAL       reduce using rule 69 (FL -> NL OPERATORS NL .)
    LOWER_THAN      reduce using rule 69 (FL -> NL OPERATORS NL .)
    BIGGER_THAN     reduce using rule 69 (FL -> NL OPERATORS NL .)
    EQUAL_EQUAL     reduce using rule 69 (FL -> NL OPERATORS NL .)
    CLOSING_PARENTH reduce using rule 69 (FL -> NL OPERATORS NL .)
    SEMICOLON       reduce using rule 69 (FL -> NL OPERATORS NL .)


state 154

    (66) EL -> EL OR TL .
    (68) TL -> TL . AND FL

  ! shift/reduce conflict for AND resolved as shift
    SEMICOLON       reduce using rule 66 (EL -> EL OR TL .)
    OR              reduce using rule 66 (EL -> EL OR TL .)
    NOT_EQUAL       reduce using rule 66 (EL -> EL OR TL .)
    LOWER_THAN      reduce using rule 66 (EL -> EL OR TL .)
    BIGGER_THAN     reduce using rule 66 (EL -> EL OR TL .)
    EQUAL_EQUAL     reduce using rule 66 (EL -> EL OR TL .)
    CLOSING_PARENTH reduce using rule 66 (EL -> EL OR TL .)
    AND             shift and go to state 127

  ! AND             [ reduce using rule 66 (EL -> EL OR TL .) ]


state 155

    (42) IF_AUX1 -> empty .

    OPEN_BRACES     reduce using rule 42 (IF_AUX1 -> empty .)


state 156

    (40) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 . IN_S IF_AUX3
    (41) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 . IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (54) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 116

    IN_S                           shift and go to state 167

state 157

    (50) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 . EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (65) EL -> . TL
    (66) EL -> . EL OR TL
    (67) TL -> . FL
    (68) TL -> . TL AND FL
    (69) FL -> . NL OPERATORS NL
    (70) FL -> . EA OPERATORS EA
    (71) FL -> . NL
    (72) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (73) NL -> . NOT EL
    (55) EA -> . TA
    (56) EA -> . EA PLUS TA
    (57) EA -> . EA MINUS TA
    (62) TA -> . FA
    (63) TA -> . TA MULTIPLY FA
    (64) TA -> . TA DIVISION FA
    (58) FA -> . CONSTANT
    (59) FA -> . ID
    (60) FA -> . MAT
    (61) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (78) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 109
    NOT             shift and go to state 108
    CONSTANT        shift and go to state 39
    ID              shift and go to state 40

    MAT                            shift and go to state 36
    EA                             shift and go to state 110
    FL                             shift and go to state 111
    TA                             shift and go to state 37
    FA                             shift and go to state 41
    TL                             shift and go to state 107
    NL                             shift and go to state 112
    EL                             shift and go to state 168

state 158

    (54) IN_S -> OPEN_BRACES S CLOSING_BRACES .

    CLOSING_BRACES  reduce using rule 54 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    PRINT           reduce using rule 54 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    READ            reduce using rule 54 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    IF              reduce using rule 54 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    WHILE           reduce using rule 54 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    DO              reduce using rule 54 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    FOR             reduce using rule 54 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    ID              reduce using rule 54 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    INT             reduce using rule 54 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    DOUBLE          reduce using rule 54 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    ELSE            reduce using rule 54 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)


state 159

    (49) DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH . EL CLOSING_PARENTH SEMICOLON
    (65) EL -> . TL
    (66) EL -> . EL OR TL
    (67) TL -> . FL
    (68) TL -> . TL AND FL
    (69) FL -> . NL OPERATORS NL
    (70) FL -> . EA OPERATORS EA
    (71) FL -> . NL
    (72) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (73) NL -> . NOT EL
    (55) EA -> . TA
    (56) EA -> . EA PLUS TA
    (57) EA -> . EA MINUS TA
    (62) TA -> . FA
    (63) TA -> . TA MULTIPLY FA
    (64) TA -> . TA DIVISION FA
    (58) FA -> . CONSTANT
    (59) FA -> . ID
    (60) FA -> . MAT
    (61) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (78) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 109
    NOT             shift and go to state 108
    CONSTANT        shift and go to state 39
    ID              shift and go to state 40

    MAT                            shift and go to state 36
    EA                             shift and go to state 110
    FL                             shift and go to state 111
    TA                             shift and go to state 37
    FA                             shift and go to state 41
    TL                             shift and go to state 107
    NL                             shift and go to state 112
    EL                             shift and go to state 169

state 160

    (39) READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 39 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 39 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 39 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 39 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 39 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 39 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 39 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 39 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 39 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 39 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)


state 161

    (38) PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)


state 162

    (37) PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 37 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 37 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 37 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 37 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 37 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 37 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 37 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 37 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 37 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 37 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)


state 163

    (46) WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH . WHILE_AUX_2 IN_S
    (48) WHILE_AUX_2 -> . empty
    (45) empty -> .

    OPEN_BRACES     reduce using rule 45 (empty -> .)

    empty                          shift and go to state 170
    WHILE_AUX_2                    shift and go to state 171

state 164

    (44) IF_AUX3 -> empty .

    MAIN            reduce using rule 44 (IF_AUX3 -> empty .)
    FUNCTION        reduce using rule 44 (IF_AUX3 -> empty .)
    CLOSING_BRACES  reduce using rule 44 (IF_AUX3 -> empty .)
    PRINT           reduce using rule 44 (IF_AUX3 -> empty .)
    READ            reduce using rule 44 (IF_AUX3 -> empty .)
    IF              reduce using rule 44 (IF_AUX3 -> empty .)
    WHILE           reduce using rule 44 (IF_AUX3 -> empty .)
    DO              reduce using rule 44 (IF_AUX3 -> empty .)
    FOR             reduce using rule 44 (IF_AUX3 -> empty .)
    ID              reduce using rule 44 (IF_AUX3 -> empty .)
    INT             reduce using rule 44 (IF_AUX3 -> empty .)
    DOUBLE          reduce using rule 44 (IF_AUX3 -> empty .)


state 165

    (12) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3 .

    MAIN            reduce using rule 12 (FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3 .)
    FUNCTION        reduce using rule 12 (FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3 .)


state 166

    (13) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN . IF_AUX3
    (44) IF_AUX3 -> . empty
    (45) empty -> .

    MAIN            reduce using rule 45 (empty -> .)
    FUNCTION        reduce using rule 45 (empty -> .)

    empty                          shift and go to state 164
    IF_AUX3                        shift and go to state 172

state 167

    (40) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S . IF_AUX3
    (41) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S . ELSE IF_AUX2 IN_S IF_AUX3
    (44) IF_AUX3 -> . empty
    (45) empty -> .

    ELSE            shift and go to state 173
    CLOSING_BRACES  reduce using rule 45 (empty -> .)
    PRINT           reduce using rule 45 (empty -> .)
    READ            reduce using rule 45 (empty -> .)
    IF              reduce using rule 45 (empty -> .)
    WHILE           reduce using rule 45 (empty -> .)
    DO              reduce using rule 45 (empty -> .)
    FOR             reduce using rule 45 (empty -> .)
    ID              reduce using rule 45 (empty -> .)
    INT             reduce using rule 45 (empty -> .)
    DOUBLE          reduce using rule 45 (empty -> .)

    empty                          shift and go to state 164
    IF_AUX3                        shift and go to state 174

state 168

    (50) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL . SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (66) EL -> EL . OR TL

    SEMICOLON       shift and go to state 175
    OR              shift and go to state 137


state 169

    (49) DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL . CLOSING_PARENTH SEMICOLON
    (66) EL -> EL . OR TL

    CLOSING_PARENTH shift and go to state 176
    OR              shift and go to state 137


state 170

    (48) WHILE_AUX_2 -> empty .

    ID              reduce using rule 48 (WHILE_AUX_2 -> empty .)
    OPEN_BRACES     reduce using rule 48 (WHILE_AUX_2 -> empty .)


state 171

    (46) WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 . IN_S
    (54) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 116

    IN_S                           shift and go to state 177

state 172

    (13) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3 .

    MAIN            reduce using rule 13 (FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3 .)
    FUNCTION        reduce using rule 13 (FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3 .)


state 173

    (41) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE . IF_AUX2 IN_S IF_AUX3
    (43) IF_AUX2 -> . empty
    (45) empty -> .

    OPEN_BRACES     reduce using rule 45 (empty -> .)

    empty                          shift and go to state 179
    IF_AUX2                        shift and go to state 178

state 174

    (40) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .

    CLOSING_BRACES  reduce using rule 40 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    PRINT           reduce using rule 40 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    READ            reduce using rule 40 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    IF              reduce using rule 40 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    WHILE           reduce using rule 40 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    DO              reduce using rule 40 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    FOR             reduce using rule 40 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    ID              reduce using rule 40 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    INT             reduce using rule 40 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    DOUBLE          reduce using rule 40 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)


state 175

    (50) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON . WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (48) WHILE_AUX_2 -> . empty
    (45) empty -> .

    ID              reduce using rule 45 (empty -> .)

    empty                          shift and go to state 170
    WHILE_AUX_2                    shift and go to state 180

state 176

    (49) DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 181


state 177

    (46) WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .

    CLOSING_BRACES  reduce using rule 46 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    PRINT           reduce using rule 46 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    READ            reduce using rule 46 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    IF              reduce using rule 46 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    WHILE           reduce using rule 46 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    DO              reduce using rule 46 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    FOR             reduce using rule 46 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    ID              reduce using rule 46 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    INT             reduce using rule 46 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    DOUBLE          reduce using rule 46 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)


state 178

    (41) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 . IN_S IF_AUX3
    (54) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 116

    IN_S                           shift and go to state 182

state 179

    (43) IF_AUX2 -> empty .

    OPEN_BRACES     reduce using rule 43 (IF_AUX2 -> empty .)


state 180

    (50) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 . ASSIGN CLOSING_PARENTH IN_S
    (11) ASSIGN -> . ID EQUAL EA

    ID              shift and go to state 115

    ASSIGN                         shift and go to state 183

state 181

    (49) DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 49 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 49 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 49 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 49 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 49 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 49 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 49 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 49 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 49 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 49 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)


state 182

    (41) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S . IF_AUX3
    (44) IF_AUX3 -> . empty
    (45) empty -> .

    CLOSING_BRACES  reduce using rule 45 (empty -> .)
    PRINT           reduce using rule 45 (empty -> .)
    READ            reduce using rule 45 (empty -> .)
    IF              reduce using rule 45 (empty -> .)
    WHILE           reduce using rule 45 (empty -> .)
    DO              reduce using rule 45 (empty -> .)
    FOR             reduce using rule 45 (empty -> .)
    ID              reduce using rule 45 (empty -> .)
    INT             reduce using rule 45 (empty -> .)
    DOUBLE          reduce using rule 45 (empty -> .)

    empty                          shift and go to state 164
    IF_AUX3                        shift and go to state 184

state 183

    (50) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN . CLOSING_PARENTH IN_S

    CLOSING_PARENTH shift and go to state 185


state 184

    (41) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .

    CLOSING_BRACES  reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    PRINT           reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    READ            reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    IF              reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    WHILE           reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    DO              reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    FOR             reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    ID              reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    INT             reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    DOUBLE          reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)


state 185

    (50) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH . IN_S
    (54) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 116

    IN_S                           shift and go to state 186

state 186

    (50) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .

    CLOSING_BRACES  reduce using rule 50 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    PRINT           reduce using rule 50 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    READ            reduce using rule 50 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    IF              reduce using rule 50 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    WHILE           reduce using rule 50 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    DO              reduce using rule 50 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    FOR             reduce using rule 50 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    ID              reduce using rule 50 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    INT             reduce using rule 50 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    DOUBLE          reduce using rule 50 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 2 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 59 resolved as shift
WARNING: shift/reduce conflict for READ in state 59 resolved as shift
WARNING: shift/reduce conflict for IF in state 59 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 59 resolved as shift
WARNING: shift/reduce conflict for DO in state 59 resolved as shift
WARNING: shift/reduce conflict for FOR in state 59 resolved as shift
WARNING: shift/reduce conflict for ID in state 59 resolved as shift
WARNING: shift/reduce conflict for INT in state 59 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 59 resolved as shift
WARNING: shift/reduce conflict for INT in state 75 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 75 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 87 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 87 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 87 resolved as shift
WARNING: shift/reduce conflict for READ in state 87 resolved as shift
WARNING: shift/reduce conflict for IF in state 87 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 87 resolved as shift
WARNING: shift/reduce conflict for DO in state 87 resolved as shift
WARNING: shift/reduce conflict for FOR in state 87 resolved as shift
WARNING: shift/reduce conflict for ID in state 87 resolved as shift
WARNING: shift/reduce conflict for INT in state 87 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 87 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 90 resolved as shift
WARNING: shift/reduce conflict for READ in state 90 resolved as shift
WARNING: shift/reduce conflict for IF in state 90 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 90 resolved as shift
WARNING: shift/reduce conflict for DO in state 90 resolved as shift
WARNING: shift/reduce conflict for FOR in state 90 resolved as shift
WARNING: shift/reduce conflict for ID in state 90 resolved as shift
WARNING: shift/reduce conflict for INT in state 90 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 90 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 105 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 105 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 105 resolved as shift
WARNING: shift/reduce conflict for READ in state 105 resolved as shift
WARNING: shift/reduce conflict for IF in state 105 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 105 resolved as shift
WARNING: shift/reduce conflict for DO in state 105 resolved as shift
WARNING: shift/reduce conflict for FOR in state 105 resolved as shift
WARNING: shift/reduce conflict for ID in state 105 resolved as shift
WARNING: shift/reduce conflict for INT in state 105 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 105 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 106 resolved as shift
WARNING: shift/reduce conflict for READ in state 106 resolved as shift
WARNING: shift/reduce conflict for IF in state 106 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 106 resolved as shift
WARNING: shift/reduce conflict for DO in state 106 resolved as shift
WARNING: shift/reduce conflict for FOR in state 106 resolved as shift
WARNING: shift/reduce conflict for ID in state 106 resolved as shift
WARNING: shift/reduce conflict for INT in state 106 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 106 resolved as shift
WARNING: shift/reduce conflict for AND in state 107 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 112 resolved as shift
WARNING: shift/reduce conflict for LOWER_THAN in state 112 resolved as shift
WARNING: shift/reduce conflict for BIGGER_THAN in state 112 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 112 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 116 resolved as shift
WARNING: shift/reduce conflict for READ in state 116 resolved as shift
WARNING: shift/reduce conflict for IF in state 116 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 116 resolved as shift
WARNING: shift/reduce conflict for DO in state 116 resolved as shift
WARNING: shift/reduce conflict for FOR in state 116 resolved as shift
WARNING: shift/reduce conflict for ID in state 116 resolved as shift
WARNING: shift/reduce conflict for INT in state 116 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 116 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 126 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 126 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 126 resolved as shift
WARNING: shift/reduce conflict for READ in state 126 resolved as shift
WARNING: shift/reduce conflict for IF in state 126 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 126 resolved as shift
WARNING: shift/reduce conflict for DO in state 126 resolved as shift
WARNING: shift/reduce conflict for FOR in state 126 resolved as shift
WARNING: shift/reduce conflict for ID in state 126 resolved as shift
WARNING: shift/reduce conflict for INT in state 126 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 126 resolved as shift
WARNING: shift/reduce conflict for OR in state 128 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 140 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 140 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 140 resolved as shift
WARNING: shift/reduce conflict for READ in state 140 resolved as shift
WARNING: shift/reduce conflict for IF in state 140 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 140 resolved as shift
WARNING: shift/reduce conflict for DO in state 140 resolved as shift
WARNING: shift/reduce conflict for FOR in state 140 resolved as shift
WARNING: shift/reduce conflict for ID in state 140 resolved as shift
WARNING: shift/reduce conflict for INT in state 140 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 140 resolved as shift
WARNING: shift/reduce conflict for AND in state 154 resolved as shift
WARNING: reduce/reduce conflict in state 59 resolved using rule (S -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 59
WARNING: reduce/reduce conflict in state 59 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (S -> <empty>) in state 59
WARNING: reduce/reduce conflict in state 87 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 87
WARNING: reduce/reduce conflict in state 90 resolved using rule (S -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 90
WARNING: reduce/reduce conflict in state 90 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (S -> <empty>) in state 90
WARNING: reduce/reduce conflict in state 105 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 105
WARNING: reduce/reduce conflict in state 106 resolved using rule (S -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 106
WARNING: reduce/reduce conflict in state 106 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (S -> <empty>) in state 106
WARNING: reduce/reduce conflict in state 116 resolved using rule (S -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 116
WARNING: reduce/reduce conflict in state 116 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (S -> <empty>) in state 116
WARNING: reduce/reduce conflict in state 126 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 126
WARNING: reduce/reduce conflict in state 140 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 140
WARNING: Rule (STATEMENTS -> <empty>) is never reduced
WARNING: Rule (S -> <empty>) is never reduced
