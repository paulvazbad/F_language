Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> VAR FUNC M
Rule 2     VAR -> TIPO DECLARE SEMICOLON
Rule 3     VAR -> TIPO MAT SEMICOLON
Rule 4     VAR -> VAR TIPO DECLARE SEMICOLON
Rule 5     VAR -> VAR TIPO MAT SEMICOLON
Rule 6     VAR -> <empty>
Rule 7     DECLARE -> ID
Rule 8     DECLARE -> DECLARE COMA ID
Rule 9     DECLARE -> ASSIGN
Rule 10    DECLARE -> DECLARE COMA ASSIGN
Rule 11    ASSIGN -> ID EQUAL EA
Rule 12    FUNC -> FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES
Rule 13    FUNC -> FUNC FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES
Rule 14    FUNC -> <empty>
Rule 15    M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES
Rule 16    TIPO -> INT
Rule 17    TIPO -> DOUBLE
Rule 18    S -> STATEMENTS
Rule 19    S -> S STATEMENTS
Rule 20    S -> <empty>
Rule 21    STATEMENTS -> VAR
Rule 22    STATEMENTS -> IDSTAT
Rule 23    STATEMENTS -> PRINTSTAT
Rule 24    STATEMENTS -> READSTAT
Rule 25    STATEMENTS -> IFSTAT
Rule 26    STATEMENTS -> WHILESTAT
Rule 27    STATEMENTS -> DOSTAT
Rule 28    STATEMENTS -> FORSTAT
Rule 29    STATEMENTS -> FUNCSTAT
Rule 30    STATEMENTS -> INC_STAT
Rule 31    STATEMENTS -> <empty>
Rule 32    IDSTAT -> ASSIGN SEMICOLON
Rule 33    PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
Rule 34    PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
Rule 35    READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
Rule 36    IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IN_S
Rule 37    IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IN_S ELSE AUX2 IN_S
Rule 38    empty -> <empty>
Rule 39    AUX2 -> empty
Rule 40    WHILESTAT -> WHILE OPEN_PARENTH EL CLOSING_PARENTH IN_S
Rule 41    DOSTAT -> DO IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
Rule 42    FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S
Rule 43    FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
Rule 44    INC_STAT -> ID PLUSPLUS SEMICOLON
Rule 45    INC_STAT -> ID MINUSMINUS SEMICOLON
Rule 46    IN_S -> OPEN_BRACES S CLOSING_BRACES
Rule 47    EA -> TA
Rule 48    EA -> EA PLUS TA
Rule 49    EA -> EA MINUS TA
Rule 50    FA -> CONSTANT
Rule 51    FA -> ID
Rule 52    FA -> MAT
Rule 53    FA -> OPEN_PARENTH EA CLOSING_PARENTH
Rule 54    TA -> FA
Rule 55    TA -> TA MULTIPLY FA
Rule 56    TA -> TA DIVISION FA
Rule 57    EL -> TL
Rule 58    EL -> EL OR TL
Rule 59    TL -> FL
Rule 60    TL -> TL AND FL
Rule 61    FL -> NL OPERATORS NL
Rule 62    FL -> EA OPERATORS EA
Rule 63    FL -> NL
Rule 64    FL -> OPEN_PARENTH EL CLOSING_PARENTH
Rule 65    NL -> NOT EL
Rule 66    OPERATORS -> NOT_EQUAL
Rule 67    OPERATORS -> LOWER_THAN
Rule 68    OPERATORS -> BIGGER_THAN
Rule 69    OPERATORS -> EQUAL_EQUAL
Rule 70    MAT -> ID MAT_BRACKET
Rule 71    MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET
Rule 72    MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET
Rule 73    MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET
Rule 74    MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET

Terminals, with rules where they appear

AND                  : 60
BIGGER_THAN          : 68
CLOSING_BRACES       : 12 13 15 46
CLOSING_BRACKET      : 71 72 73 74
CLOSING_PARENTH      : 12 13 15 33 34 35 36 37 40 41 42 43 53 64
COMA                 : 8 10
COMMENT              : 
CONSTANT             : 50 71 72
DIVISION             : 56
DO                   : 41
DOUBLE               : 17
ELSE                 : 37
EQUAL                : 11 42 42
EQUAL_EQUAL          : 69
FOR                  : 42
FUNCTION             : 12 13
ID                   : 7 8 11 12 13 42 42 43 44 45 51 70 73 74
IF                   : 36 37
INT                  : 16
LOWER_THAN           : 67
MAIN                 : 15
MINUS                : 49
MINUSMINUS           : 45
MULTIPLY             : 55
NOT                  : 65
NOT_EQUAL            : 66
OPEN_BRACES          : 12 13 15 46
OPEN_BRACKET         : 71 72 73 74
OPEN_PARENTH         : 12 13 15 33 34 35 36 37 40 41 42 43 53 64
OR                   : 58
PLUS                 : 48
PLUSPLUS             : 44
PRINT                : 33 34
READ                 : 35
SEMICOLON            : 2 3 4 5 32 33 34 35 41 42 42 43 44 45
STRING               : 34
WHILE                : 40 41
error                : 

Nonterminals, with rules where they appear

ASSIGN               : 9 10 32
AUX2                 : 37
DECLARE              : 2 4 8 10
DOSTAT               : 27
EA                   : 11 33 35 42 42 48 49 53 62 62
EL                   : 36 37 40 41 42 58 64 65
FA                   : 54 55 56
FL                   : 59 60
FORSTAT              : 28
FUNC                 : 1 13
FUNCSTAT             : 29
IDSTAT               : 22
IFSTAT               : 25
INC_STAT             : 30
IN_S                 : 36 37 37 40 41 42
M                    : 1
MAT                  : 3 5 52
MAT_BRACKET          : 70 72 74
NL                   : 61 61 63
OPERATORS            : 61 62
PRINTSTAT            : 23
PROGRAMA             : 0
READSTAT             : 24
S                    : 12 13 15 19 46
STATEMENTS           : 18 19
TA                   : 47 48 49 55 56
TIPO                 : 2 3 4 5
TL                   : 57 58 60
VAR                  : 1 4 5 21
WHILESTAT            : 26
empty                : 39

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . VAR FUNC M
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (16) TIPO -> . INT
    (17) TIPO -> . DOUBLE

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    FUNCTION        reduce using rule 6 (VAR -> .)
    MAIN            reduce using rule 6 (VAR -> .)
    INT             shift and go to state 2
    DOUBLE          shift and go to state 5

  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]

    PROGRAMA                       shift and go to state 1
    VAR                            shift and go to state 3
    TIPO                           shift and go to state 4

state 1

    (0) S' -> PROGRAMA .



state 2

    (16) TIPO -> INT .

    ID              reduce using rule 16 (TIPO -> INT .)


state 3

    (1) PROGRAMA -> VAR . FUNC M
    (4) VAR -> VAR . TIPO DECLARE SEMICOLON
    (5) VAR -> VAR . TIPO MAT SEMICOLON
    (12) FUNC -> . FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES
    (13) FUNC -> . FUNC FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES
    (14) FUNC -> .
    (16) TIPO -> . INT
    (17) TIPO -> . DOUBLE

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 6
    MAIN            reduce using rule 14 (FUNC -> .)
    INT             shift and go to state 2
    DOUBLE          shift and go to state 5

  ! FUNCTION        [ reduce using rule 14 (FUNC -> .) ]

    FUNC                           shift and go to state 8
    TIPO                           shift and go to state 7

state 4

    (2) VAR -> TIPO . DECLARE SEMICOLON
    (3) VAR -> TIPO . MAT SEMICOLON
    (7) DECLARE -> . ID
    (8) DECLARE -> . DECLARE COMA ID
    (9) DECLARE -> . ASSIGN
    (10) DECLARE -> . DECLARE COMA ASSIGN
    (70) MAT -> . ID MAT_BRACKET
    (11) ASSIGN -> . ID EQUAL EA

    ID              shift and go to state 9

    MAT                            shift and go to state 10
    ASSIGN                         shift and go to state 12
    DECLARE                        shift and go to state 11

state 5

    (17) TIPO -> DOUBLE .

    ID              reduce using rule 17 (TIPO -> DOUBLE .)


state 6

    (12) FUNC -> FUNCTION . ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES

    ID              shift and go to state 13


state 7

    (4) VAR -> VAR TIPO . DECLARE SEMICOLON
    (5) VAR -> VAR TIPO . MAT SEMICOLON
    (7) DECLARE -> . ID
    (8) DECLARE -> . DECLARE COMA ID
    (9) DECLARE -> . ASSIGN
    (10) DECLARE -> . DECLARE COMA ASSIGN
    (70) MAT -> . ID MAT_BRACKET
    (11) ASSIGN -> . ID EQUAL EA

    ID              shift and go to state 9

    ASSIGN                         shift and go to state 12
    MAT                            shift and go to state 14
    DECLARE                        shift and go to state 15

state 8

    (1) PROGRAMA -> VAR FUNC . M
    (13) FUNC -> FUNC . FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES
    (15) M -> . MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES

    FUNCTION        shift and go to state 16
    MAIN            shift and go to state 17

    M                              shift and go to state 18

state 9

    (7) DECLARE -> ID .
    (70) MAT -> ID . MAT_BRACKET
    (11) ASSIGN -> ID . EQUAL EA
    (71) MAT_BRACKET -> . OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (72) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (73) MAT_BRACKET -> . OPEN_BRACKET ID CLOSING_BRACKET
    (74) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET

    SEMICOLON       reduce using rule 7 (DECLARE -> ID .)
    COMA            reduce using rule 7 (DECLARE -> ID .)
    EQUAL           shift and go to state 20
    OPEN_BRACKET    shift and go to state 19

    MAT_BRACKET                    shift and go to state 21

state 10

    (3) VAR -> TIPO MAT . SEMICOLON

    SEMICOLON       shift and go to state 22


state 11

    (2) VAR -> TIPO DECLARE . SEMICOLON
    (8) DECLARE -> DECLARE . COMA ID
    (10) DECLARE -> DECLARE . COMA ASSIGN

    SEMICOLON       shift and go to state 24
    COMA            shift and go to state 23


state 12

    (9) DECLARE -> ASSIGN .

    SEMICOLON       reduce using rule 9 (DECLARE -> ASSIGN .)
    COMA            reduce using rule 9 (DECLARE -> ASSIGN .)


state 13

    (12) FUNC -> FUNCTION ID . OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES

    OPEN_PARENTH    shift and go to state 25


state 14

    (5) VAR -> VAR TIPO MAT . SEMICOLON

    SEMICOLON       shift and go to state 26


state 15

    (4) VAR -> VAR TIPO DECLARE . SEMICOLON
    (8) DECLARE -> DECLARE . COMA ID
    (10) DECLARE -> DECLARE . COMA ASSIGN

    SEMICOLON       shift and go to state 27
    COMA            shift and go to state 23


state 16

    (13) FUNC -> FUNC FUNCTION . ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES

    ID              shift and go to state 28


state 17

    (15) M -> MAIN . OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES

    OPEN_PARENTH    shift and go to state 29


state 18

    (1) PROGRAMA -> VAR FUNC M .

    $end            reduce using rule 1 (PROGRAMA -> VAR FUNC M .)


state 19

    (71) MAT_BRACKET -> OPEN_BRACKET . CONSTANT CLOSING_BRACKET
    (73) MAT_BRACKET -> OPEN_BRACKET . ID CLOSING_BRACKET

    CONSTANT        shift and go to state 30
    ID              shift and go to state 31


state 20

    (11) ASSIGN -> ID EQUAL . EA
    (47) EA -> . TA
    (48) EA -> . EA PLUS TA
    (49) EA -> . EA MINUS TA
    (54) TA -> . FA
    (55) TA -> . TA MULTIPLY FA
    (56) TA -> . TA DIVISION FA
    (50) FA -> . CONSTANT
    (51) FA -> . ID
    (52) FA -> . MAT
    (53) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (70) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 32
    ID              shift and go to state 33
    OPEN_PARENTH    shift and go to state 38

    MAT                            shift and go to state 37
    TA                             shift and go to state 36
    FA                             shift and go to state 35
    EA                             shift and go to state 34

state 21

    (70) MAT -> ID MAT_BRACKET .
    (72) MAT_BRACKET -> MAT_BRACKET . OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (74) MAT_BRACKET -> MAT_BRACKET . OPEN_BRACKET ID CLOSING_BRACKET

    MULTIPLY        reduce using rule 70 (MAT -> ID MAT_BRACKET .)
    DIVISION        reduce using rule 70 (MAT -> ID MAT_BRACKET .)
    PLUS            reduce using rule 70 (MAT -> ID MAT_BRACKET .)
    MINUS           reduce using rule 70 (MAT -> ID MAT_BRACKET .)
    NOT_EQUAL       reduce using rule 70 (MAT -> ID MAT_BRACKET .)
    LOWER_THAN      reduce using rule 70 (MAT -> ID MAT_BRACKET .)
    BIGGER_THAN     reduce using rule 70 (MAT -> ID MAT_BRACKET .)
    EQUAL_EQUAL     reduce using rule 70 (MAT -> ID MAT_BRACKET .)
    CLOSING_PARENTH reduce using rule 70 (MAT -> ID MAT_BRACKET .)
    SEMICOLON       reduce using rule 70 (MAT -> ID MAT_BRACKET .)
    COMA            reduce using rule 70 (MAT -> ID MAT_BRACKET .)
    AND             reduce using rule 70 (MAT -> ID MAT_BRACKET .)
    OR              reduce using rule 70 (MAT -> ID MAT_BRACKET .)
    OPEN_BRACKET    shift and go to state 39


state 22

    (3) VAR -> TIPO MAT SEMICOLON .

    INT             reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    DOUBLE          reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    CLOSING_BRACES  reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    PRINT           reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    READ            reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    IF              reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    WHILE           reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    DO              reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    FOR             reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    ID              reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    FUNCTION        reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    MAIN            reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)


state 23

    (8) DECLARE -> DECLARE COMA . ID
    (10) DECLARE -> DECLARE COMA . ASSIGN
    (11) ASSIGN -> . ID EQUAL EA

    ID              shift and go to state 41

    ASSIGN                         shift and go to state 40

state 24

    (2) VAR -> TIPO DECLARE SEMICOLON .

    INT             reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    DOUBLE          reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    CLOSING_BRACES  reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    PRINT           reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    READ            reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    IF              reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    WHILE           reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    DO              reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    FOR             reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    ID              reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    FUNCTION        reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    MAIN            reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)


state 25

    (12) FUNC -> FUNCTION ID OPEN_PARENTH . CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES

    CLOSING_PARENTH shift and go to state 42


state 26

    (5) VAR -> VAR TIPO MAT SEMICOLON .

    INT             reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    DOUBLE          reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    CLOSING_BRACES  reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    PRINT           reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    READ            reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    IF              reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    WHILE           reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    DO              reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    FOR             reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    ID              reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    FUNCTION        reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    MAIN            reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)


state 27

    (4) VAR -> VAR TIPO DECLARE SEMICOLON .

    INT             reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    DOUBLE          reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    CLOSING_BRACES  reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    PRINT           reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    READ            reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    IF              reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    WHILE           reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    DO              reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    FOR             reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    ID              reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    FUNCTION        reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    MAIN            reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)


state 28

    (13) FUNC -> FUNC FUNCTION ID . OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES

    OPEN_PARENTH    shift and go to state 43


state 29

    (15) M -> MAIN OPEN_PARENTH . CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES

    CLOSING_PARENTH shift and go to state 44


state 30

    (71) MAT_BRACKET -> OPEN_BRACKET CONSTANT . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 45


state 31

    (73) MAT_BRACKET -> OPEN_BRACKET ID . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 46


state 32

    (50) FA -> CONSTANT .

    MULTIPLY        reduce using rule 50 (FA -> CONSTANT .)
    DIVISION        reduce using rule 50 (FA -> CONSTANT .)
    CLOSING_PARENTH reduce using rule 50 (FA -> CONSTANT .)
    PLUS            reduce using rule 50 (FA -> CONSTANT .)
    MINUS           reduce using rule 50 (FA -> CONSTANT .)
    NOT_EQUAL       reduce using rule 50 (FA -> CONSTANT .)
    LOWER_THAN      reduce using rule 50 (FA -> CONSTANT .)
    BIGGER_THAN     reduce using rule 50 (FA -> CONSTANT .)
    EQUAL_EQUAL     reduce using rule 50 (FA -> CONSTANT .)
    SEMICOLON       reduce using rule 50 (FA -> CONSTANT .)
    COMA            reduce using rule 50 (FA -> CONSTANT .)
    AND             reduce using rule 50 (FA -> CONSTANT .)
    OR              reduce using rule 50 (FA -> CONSTANT .)


state 33

    (51) FA -> ID .
    (70) MAT -> ID . MAT_BRACKET
    (71) MAT_BRACKET -> . OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (72) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (73) MAT_BRACKET -> . OPEN_BRACKET ID CLOSING_BRACKET
    (74) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET

    MULTIPLY        reduce using rule 51 (FA -> ID .)
    DIVISION        reduce using rule 51 (FA -> ID .)
    CLOSING_PARENTH reduce using rule 51 (FA -> ID .)
    PLUS            reduce using rule 51 (FA -> ID .)
    MINUS           reduce using rule 51 (FA -> ID .)
    NOT_EQUAL       reduce using rule 51 (FA -> ID .)
    LOWER_THAN      reduce using rule 51 (FA -> ID .)
    BIGGER_THAN     reduce using rule 51 (FA -> ID .)
    EQUAL_EQUAL     reduce using rule 51 (FA -> ID .)
    SEMICOLON       reduce using rule 51 (FA -> ID .)
    COMA            reduce using rule 51 (FA -> ID .)
    AND             reduce using rule 51 (FA -> ID .)
    OR              reduce using rule 51 (FA -> ID .)
    OPEN_BRACKET    shift and go to state 19

    MAT_BRACKET                    shift and go to state 21

state 34

    (11) ASSIGN -> ID EQUAL EA .
    (48) EA -> EA . PLUS TA
    (49) EA -> EA . MINUS TA

    SEMICOLON       reduce using rule 11 (ASSIGN -> ID EQUAL EA .)
    COMA            reduce using rule 11 (ASSIGN -> ID EQUAL EA .)
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48


state 35

    (54) TA -> FA .

    MULTIPLY        reduce using rule 54 (TA -> FA .)
    DIVISION        reduce using rule 54 (TA -> FA .)
    PLUS            reduce using rule 54 (TA -> FA .)
    MINUS           reduce using rule 54 (TA -> FA .)
    NOT_EQUAL       reduce using rule 54 (TA -> FA .)
    LOWER_THAN      reduce using rule 54 (TA -> FA .)
    BIGGER_THAN     reduce using rule 54 (TA -> FA .)
    EQUAL_EQUAL     reduce using rule 54 (TA -> FA .)
    SEMICOLON       reduce using rule 54 (TA -> FA .)
    COMA            reduce using rule 54 (TA -> FA .)
    AND             reduce using rule 54 (TA -> FA .)
    CLOSING_PARENTH reduce using rule 54 (TA -> FA .)
    OR              reduce using rule 54 (TA -> FA .)


state 36

    (47) EA -> TA .
    (55) TA -> TA . MULTIPLY FA
    (56) TA -> TA . DIVISION FA

    CLOSING_PARENTH reduce using rule 47 (EA -> TA .)
    PLUS            reduce using rule 47 (EA -> TA .)
    MINUS           reduce using rule 47 (EA -> TA .)
    NOT_EQUAL       reduce using rule 47 (EA -> TA .)
    LOWER_THAN      reduce using rule 47 (EA -> TA .)
    BIGGER_THAN     reduce using rule 47 (EA -> TA .)
    EQUAL_EQUAL     reduce using rule 47 (EA -> TA .)
    SEMICOLON       reduce using rule 47 (EA -> TA .)
    COMA            reduce using rule 47 (EA -> TA .)
    AND             reduce using rule 47 (EA -> TA .)
    OR              reduce using rule 47 (EA -> TA .)
    MULTIPLY        shift and go to state 49
    DIVISION        shift and go to state 50


state 37

    (52) FA -> MAT .

    MULTIPLY        reduce using rule 52 (FA -> MAT .)
    DIVISION        reduce using rule 52 (FA -> MAT .)
    CLOSING_PARENTH reduce using rule 52 (FA -> MAT .)
    PLUS            reduce using rule 52 (FA -> MAT .)
    MINUS           reduce using rule 52 (FA -> MAT .)
    NOT_EQUAL       reduce using rule 52 (FA -> MAT .)
    LOWER_THAN      reduce using rule 52 (FA -> MAT .)
    BIGGER_THAN     reduce using rule 52 (FA -> MAT .)
    EQUAL_EQUAL     reduce using rule 52 (FA -> MAT .)
    SEMICOLON       reduce using rule 52 (FA -> MAT .)
    COMA            reduce using rule 52 (FA -> MAT .)
    AND             reduce using rule 52 (FA -> MAT .)
    OR              reduce using rule 52 (FA -> MAT .)


state 38

    (53) FA -> OPEN_PARENTH . EA CLOSING_PARENTH
    (47) EA -> . TA
    (48) EA -> . EA PLUS TA
    (49) EA -> . EA MINUS TA
    (54) TA -> . FA
    (55) TA -> . TA MULTIPLY FA
    (56) TA -> . TA DIVISION FA
    (50) FA -> . CONSTANT
    (51) FA -> . ID
    (52) FA -> . MAT
    (53) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (70) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 32
    ID              shift and go to state 33
    OPEN_PARENTH    shift and go to state 38

    MAT                            shift and go to state 37
    TA                             shift and go to state 36
    FA                             shift and go to state 35
    EA                             shift and go to state 51

state 39

    (72) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET . CONSTANT CLOSING_BRACKET
    (74) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET . ID CLOSING_BRACKET

    CONSTANT        shift and go to state 52
    ID              shift and go to state 53


state 40

    (10) DECLARE -> DECLARE COMA ASSIGN .

    SEMICOLON       reduce using rule 10 (DECLARE -> DECLARE COMA ASSIGN .)
    COMA            reduce using rule 10 (DECLARE -> DECLARE COMA ASSIGN .)


state 41

    (8) DECLARE -> DECLARE COMA ID .
    (11) ASSIGN -> ID . EQUAL EA

    SEMICOLON       reduce using rule 8 (DECLARE -> DECLARE COMA ID .)
    COMA            reduce using rule 8 (DECLARE -> DECLARE COMA ID .)
    EQUAL           shift and go to state 20


state 42

    (12) FUNC -> FUNCTION ID OPEN_PARENTH CLOSING_PARENTH . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 54


state 43

    (13) FUNC -> FUNC FUNCTION ID OPEN_PARENTH . CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES

    CLOSING_PARENTH shift and go to state 55


state 44

    (15) M -> MAIN OPEN_PARENTH CLOSING_PARENTH . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 56


state 45

    (71) MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .

    OPEN_BRACKET    reduce using rule 71 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    MULTIPLY        reduce using rule 71 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    DIVISION        reduce using rule 71 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    PLUS            reduce using rule 71 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    MINUS           reduce using rule 71 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 71 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    COMA            reduce using rule 71 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    CLOSING_PARENTH reduce using rule 71 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    NOT_EQUAL       reduce using rule 71 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    LOWER_THAN      reduce using rule 71 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    BIGGER_THAN     reduce using rule 71 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    EQUAL_EQUAL     reduce using rule 71 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    AND             reduce using rule 71 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    OR              reduce using rule 71 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)


state 46

    (73) MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .

    OPEN_BRACKET    reduce using rule 73 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    MULTIPLY        reduce using rule 73 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    DIVISION        reduce using rule 73 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    PLUS            reduce using rule 73 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    MINUS           reduce using rule 73 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 73 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    COMA            reduce using rule 73 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    CLOSING_PARENTH reduce using rule 73 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    NOT_EQUAL       reduce using rule 73 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    LOWER_THAN      reduce using rule 73 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    BIGGER_THAN     reduce using rule 73 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    EQUAL_EQUAL     reduce using rule 73 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    AND             reduce using rule 73 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    OR              reduce using rule 73 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)


state 47

    (48) EA -> EA PLUS . TA
    (54) TA -> . FA
    (55) TA -> . TA MULTIPLY FA
    (56) TA -> . TA DIVISION FA
    (50) FA -> . CONSTANT
    (51) FA -> . ID
    (52) FA -> . MAT
    (53) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (70) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 32
    ID              shift and go to state 33
    OPEN_PARENTH    shift and go to state 38

    MAT                            shift and go to state 37
    TA                             shift and go to state 57
    FA                             shift and go to state 35

state 48

    (49) EA -> EA MINUS . TA
    (54) TA -> . FA
    (55) TA -> . TA MULTIPLY FA
    (56) TA -> . TA DIVISION FA
    (50) FA -> . CONSTANT
    (51) FA -> . ID
    (52) FA -> . MAT
    (53) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (70) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 32
    ID              shift and go to state 33
    OPEN_PARENTH    shift and go to state 38

    MAT                            shift and go to state 37
    TA                             shift and go to state 58
    FA                             shift and go to state 35

state 49

    (55) TA -> TA MULTIPLY . FA
    (50) FA -> . CONSTANT
    (51) FA -> . ID
    (52) FA -> . MAT
    (53) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (70) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 32
    ID              shift and go to state 33
    OPEN_PARENTH    shift and go to state 38

    MAT                            shift and go to state 37
    FA                             shift and go to state 59

state 50

    (56) TA -> TA DIVISION . FA
    (50) FA -> . CONSTANT
    (51) FA -> . ID
    (52) FA -> . MAT
    (53) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (70) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 32
    ID              shift and go to state 33
    OPEN_PARENTH    shift and go to state 38

    MAT                            shift and go to state 37
    FA                             shift and go to state 60

state 51

    (53) FA -> OPEN_PARENTH EA . CLOSING_PARENTH
    (48) EA -> EA . PLUS TA
    (49) EA -> EA . MINUS TA

    CLOSING_PARENTH shift and go to state 61
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48


state 52

    (72) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 62


state 53

    (74) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 63


state 54

    (12) FUNC -> FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES . S CLOSING_BRACES
    (18) S -> . STATEMENTS
    (19) S -> . S STATEMENTS
    (20) S -> .
    (21) STATEMENTS -> . VAR
    (22) STATEMENTS -> . IDSTAT
    (23) STATEMENTS -> . PRINTSTAT
    (24) STATEMENTS -> . READSTAT
    (25) STATEMENTS -> . IFSTAT
    (26) STATEMENTS -> . WHILESTAT
    (27) STATEMENTS -> . DOSTAT
    (28) STATEMENTS -> . FORSTAT
    (29) STATEMENTS -> . FUNCSTAT
    (30) STATEMENTS -> . INC_STAT
    (31) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (32) IDSTAT -> . ASSIGN SEMICOLON
    (33) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (34) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (35) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (36) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IN_S
    (37) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IN_S ELSE AUX2 IN_S
    (40) WHILESTAT -> . WHILE OPEN_PARENTH EL CLOSING_PARENTH IN_S
    (41) DOSTAT -> . DO IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (42) FORSTAT -> . FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S
    (43) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (44) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (45) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (16) TIPO -> . INT
    (17) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for READ resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for IF resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for DO resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for FOR resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for ID resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 6 (VAR -> .)
    PRINT           shift and go to state 68
    READ            shift and go to state 74
    IF              shift and go to state 80
    WHILE           shift and go to state 76
    DO              shift and go to state 69
    FOR             shift and go to state 66
    ID              shift and go to state 77
    INT             shift and go to state 2
    DOUBLE          shift and go to state 5

  ! CLOSING_BRACES  [ reduce using rule 20 (S -> .) ]
  ! PRINT           [ reduce using rule 20 (S -> .) ]
  ! READ            [ reduce using rule 20 (S -> .) ]
  ! IF              [ reduce using rule 20 (S -> .) ]
  ! WHILE           [ reduce using rule 20 (S -> .) ]
  ! DO              [ reduce using rule 20 (S -> .) ]
  ! FOR             [ reduce using rule 20 (S -> .) ]
  ! ID              [ reduce using rule 20 (S -> .) ]
  ! INT             [ reduce using rule 20 (S -> .) ]
  ! DOUBLE          [ reduce using rule 20 (S -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 31 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 31 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    INC_STAT                       shift and go to state 64
    READSTAT                       shift and go to state 65
    ASSIGN                         shift and go to state 70
    STATEMENTS                     shift and go to state 73
    PRINTSTAT                      shift and go to state 78
    IFSTAT                         shift and go to state 83
    FUNCSTAT                       shift and go to state 67
    TIPO                           shift and go to state 4
    IDSTAT                         shift and go to state 81
    S                              shift and go to state 82
    FORSTAT                        shift and go to state 71
    VAR                            shift and go to state 72
    DOSTAT                         shift and go to state 79
    WHILESTAT                      shift and go to state 75

state 55

    (13) FUNC -> FUNC FUNCTION ID OPEN_PARENTH CLOSING_PARENTH . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 84


state 56

    (15) M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES . S CLOSING_BRACES
    (18) S -> . STATEMENTS
    (19) S -> . S STATEMENTS
    (20) S -> .
    (21) STATEMENTS -> . VAR
    (22) STATEMENTS -> . IDSTAT
    (23) STATEMENTS -> . PRINTSTAT
    (24) STATEMENTS -> . READSTAT
    (25) STATEMENTS -> . IFSTAT
    (26) STATEMENTS -> . WHILESTAT
    (27) STATEMENTS -> . DOSTAT
    (28) STATEMENTS -> . FORSTAT
    (29) STATEMENTS -> . FUNCSTAT
    (30) STATEMENTS -> . INC_STAT
    (31) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (32) IDSTAT -> . ASSIGN SEMICOLON
    (33) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (34) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (35) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (36) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IN_S
    (37) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IN_S ELSE AUX2 IN_S
    (40) WHILESTAT -> . WHILE OPEN_PARENTH EL CLOSING_PARENTH IN_S
    (41) DOSTAT -> . DO IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (42) FORSTAT -> . FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S
    (43) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (44) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (45) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (16) TIPO -> . INT
    (17) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for READ resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for IF resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for DO resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for FOR resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for ID resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 6 (VAR -> .)
    PRINT           shift and go to state 68
    READ            shift and go to state 74
    IF              shift and go to state 80
    WHILE           shift and go to state 76
    DO              shift and go to state 69
    FOR             shift and go to state 66
    ID              shift and go to state 77
    INT             shift and go to state 2
    DOUBLE          shift and go to state 5

  ! CLOSING_BRACES  [ reduce using rule 20 (S -> .) ]
  ! PRINT           [ reduce using rule 20 (S -> .) ]
  ! READ            [ reduce using rule 20 (S -> .) ]
  ! IF              [ reduce using rule 20 (S -> .) ]
  ! WHILE           [ reduce using rule 20 (S -> .) ]
  ! DO              [ reduce using rule 20 (S -> .) ]
  ! FOR             [ reduce using rule 20 (S -> .) ]
  ! ID              [ reduce using rule 20 (S -> .) ]
  ! INT             [ reduce using rule 20 (S -> .) ]
  ! DOUBLE          [ reduce using rule 20 (S -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 31 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 31 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    INC_STAT                       shift and go to state 64
    READSTAT                       shift and go to state 65
    ASSIGN                         shift and go to state 70
    STATEMENTS                     shift and go to state 73
    PRINTSTAT                      shift and go to state 78
    IFSTAT                         shift and go to state 83
    FUNCSTAT                       shift and go to state 67
    TIPO                           shift and go to state 4
    IDSTAT                         shift and go to state 81
    S                              shift and go to state 85
    FORSTAT                        shift and go to state 71
    VAR                            shift and go to state 72
    DOSTAT                         shift and go to state 79
    WHILESTAT                      shift and go to state 75

state 57

    (48) EA -> EA PLUS TA .
    (55) TA -> TA . MULTIPLY FA
    (56) TA -> TA . DIVISION FA

    CLOSING_PARENTH reduce using rule 48 (EA -> EA PLUS TA .)
    PLUS            reduce using rule 48 (EA -> EA PLUS TA .)
    MINUS           reduce using rule 48 (EA -> EA PLUS TA .)
    NOT_EQUAL       reduce using rule 48 (EA -> EA PLUS TA .)
    LOWER_THAN      reduce using rule 48 (EA -> EA PLUS TA .)
    BIGGER_THAN     reduce using rule 48 (EA -> EA PLUS TA .)
    EQUAL_EQUAL     reduce using rule 48 (EA -> EA PLUS TA .)
    SEMICOLON       reduce using rule 48 (EA -> EA PLUS TA .)
    COMA            reduce using rule 48 (EA -> EA PLUS TA .)
    AND             reduce using rule 48 (EA -> EA PLUS TA .)
    OR              reduce using rule 48 (EA -> EA PLUS TA .)
    MULTIPLY        shift and go to state 49
    DIVISION        shift and go to state 50


state 58

    (49) EA -> EA MINUS TA .
    (55) TA -> TA . MULTIPLY FA
    (56) TA -> TA . DIVISION FA

    CLOSING_PARENTH reduce using rule 49 (EA -> EA MINUS TA .)
    PLUS            reduce using rule 49 (EA -> EA MINUS TA .)
    MINUS           reduce using rule 49 (EA -> EA MINUS TA .)
    NOT_EQUAL       reduce using rule 49 (EA -> EA MINUS TA .)
    LOWER_THAN      reduce using rule 49 (EA -> EA MINUS TA .)
    BIGGER_THAN     reduce using rule 49 (EA -> EA MINUS TA .)
    EQUAL_EQUAL     reduce using rule 49 (EA -> EA MINUS TA .)
    SEMICOLON       reduce using rule 49 (EA -> EA MINUS TA .)
    COMA            reduce using rule 49 (EA -> EA MINUS TA .)
    AND             reduce using rule 49 (EA -> EA MINUS TA .)
    OR              reduce using rule 49 (EA -> EA MINUS TA .)
    MULTIPLY        shift and go to state 49
    DIVISION        shift and go to state 50


state 59

    (55) TA -> TA MULTIPLY FA .

    MULTIPLY        reduce using rule 55 (TA -> TA MULTIPLY FA .)
    DIVISION        reduce using rule 55 (TA -> TA MULTIPLY FA .)
    PLUS            reduce using rule 55 (TA -> TA MULTIPLY FA .)
    MINUS           reduce using rule 55 (TA -> TA MULTIPLY FA .)
    NOT_EQUAL       reduce using rule 55 (TA -> TA MULTIPLY FA .)
    LOWER_THAN      reduce using rule 55 (TA -> TA MULTIPLY FA .)
    BIGGER_THAN     reduce using rule 55 (TA -> TA MULTIPLY FA .)
    EQUAL_EQUAL     reduce using rule 55 (TA -> TA MULTIPLY FA .)
    SEMICOLON       reduce using rule 55 (TA -> TA MULTIPLY FA .)
    COMA            reduce using rule 55 (TA -> TA MULTIPLY FA .)
    AND             reduce using rule 55 (TA -> TA MULTIPLY FA .)
    CLOSING_PARENTH reduce using rule 55 (TA -> TA MULTIPLY FA .)
    OR              reduce using rule 55 (TA -> TA MULTIPLY FA .)


state 60

    (56) TA -> TA DIVISION FA .

    MULTIPLY        reduce using rule 56 (TA -> TA DIVISION FA .)
    DIVISION        reduce using rule 56 (TA -> TA DIVISION FA .)
    PLUS            reduce using rule 56 (TA -> TA DIVISION FA .)
    MINUS           reduce using rule 56 (TA -> TA DIVISION FA .)
    NOT_EQUAL       reduce using rule 56 (TA -> TA DIVISION FA .)
    LOWER_THAN      reduce using rule 56 (TA -> TA DIVISION FA .)
    BIGGER_THAN     reduce using rule 56 (TA -> TA DIVISION FA .)
    EQUAL_EQUAL     reduce using rule 56 (TA -> TA DIVISION FA .)
    SEMICOLON       reduce using rule 56 (TA -> TA DIVISION FA .)
    COMA            reduce using rule 56 (TA -> TA DIVISION FA .)
    AND             reduce using rule 56 (TA -> TA DIVISION FA .)
    CLOSING_PARENTH reduce using rule 56 (TA -> TA DIVISION FA .)
    OR              reduce using rule 56 (TA -> TA DIVISION FA .)


state 61

    (53) FA -> OPEN_PARENTH EA CLOSING_PARENTH .

    MULTIPLY        reduce using rule 53 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    DIVISION        reduce using rule 53 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    CLOSING_PARENTH reduce using rule 53 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    PLUS            reduce using rule 53 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    MINUS           reduce using rule 53 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    NOT_EQUAL       reduce using rule 53 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    LOWER_THAN      reduce using rule 53 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    BIGGER_THAN     reduce using rule 53 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    EQUAL_EQUAL     reduce using rule 53 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    SEMICOLON       reduce using rule 53 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    COMA            reduce using rule 53 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    AND             reduce using rule 53 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    OR              reduce using rule 53 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)


state 62

    (72) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .

    OPEN_BRACKET    reduce using rule 72 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    MULTIPLY        reduce using rule 72 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    DIVISION        reduce using rule 72 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    PLUS            reduce using rule 72 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    MINUS           reduce using rule 72 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 72 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    COMA            reduce using rule 72 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    CLOSING_PARENTH reduce using rule 72 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    NOT_EQUAL       reduce using rule 72 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    LOWER_THAN      reduce using rule 72 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    BIGGER_THAN     reduce using rule 72 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    EQUAL_EQUAL     reduce using rule 72 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    AND             reduce using rule 72 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    OR              reduce using rule 72 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)


state 63

    (74) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .

    OPEN_BRACKET    reduce using rule 74 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    MULTIPLY        reduce using rule 74 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    DIVISION        reduce using rule 74 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    PLUS            reduce using rule 74 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    MINUS           reduce using rule 74 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 74 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    COMA            reduce using rule 74 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    CLOSING_PARENTH reduce using rule 74 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    NOT_EQUAL       reduce using rule 74 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    LOWER_THAN      reduce using rule 74 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    BIGGER_THAN     reduce using rule 74 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    EQUAL_EQUAL     reduce using rule 74 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    AND             reduce using rule 74 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    OR              reduce using rule 74 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)


state 64

    (30) STATEMENTS -> INC_STAT .

    CLOSING_BRACES  reduce using rule 30 (STATEMENTS -> INC_STAT .)
    PRINT           reduce using rule 30 (STATEMENTS -> INC_STAT .)
    READ            reduce using rule 30 (STATEMENTS -> INC_STAT .)
    IF              reduce using rule 30 (STATEMENTS -> INC_STAT .)
    WHILE           reduce using rule 30 (STATEMENTS -> INC_STAT .)
    DO              reduce using rule 30 (STATEMENTS -> INC_STAT .)
    FOR             reduce using rule 30 (STATEMENTS -> INC_STAT .)
    ID              reduce using rule 30 (STATEMENTS -> INC_STAT .)
    INT             reduce using rule 30 (STATEMENTS -> INC_STAT .)
    DOUBLE          reduce using rule 30 (STATEMENTS -> INC_STAT .)


state 65

    (24) STATEMENTS -> READSTAT .

    CLOSING_BRACES  reduce using rule 24 (STATEMENTS -> READSTAT .)
    PRINT           reduce using rule 24 (STATEMENTS -> READSTAT .)
    READ            reduce using rule 24 (STATEMENTS -> READSTAT .)
    IF              reduce using rule 24 (STATEMENTS -> READSTAT .)
    WHILE           reduce using rule 24 (STATEMENTS -> READSTAT .)
    DO              reduce using rule 24 (STATEMENTS -> READSTAT .)
    FOR             reduce using rule 24 (STATEMENTS -> READSTAT .)
    ID              reduce using rule 24 (STATEMENTS -> READSTAT .)
    INT             reduce using rule 24 (STATEMENTS -> READSTAT .)
    DOUBLE          reduce using rule 24 (STATEMENTS -> READSTAT .)


state 66

    (42) FORSTAT -> FOR . OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S

    OPEN_PARENTH    shift and go to state 86


state 67

    (29) STATEMENTS -> FUNCSTAT .

    CLOSING_BRACES  reduce using rule 29 (STATEMENTS -> FUNCSTAT .)
    PRINT           reduce using rule 29 (STATEMENTS -> FUNCSTAT .)
    READ            reduce using rule 29 (STATEMENTS -> FUNCSTAT .)
    IF              reduce using rule 29 (STATEMENTS -> FUNCSTAT .)
    WHILE           reduce using rule 29 (STATEMENTS -> FUNCSTAT .)
    DO              reduce using rule 29 (STATEMENTS -> FUNCSTAT .)
    FOR             reduce using rule 29 (STATEMENTS -> FUNCSTAT .)
    ID              reduce using rule 29 (STATEMENTS -> FUNCSTAT .)
    INT             reduce using rule 29 (STATEMENTS -> FUNCSTAT .)
    DOUBLE          reduce using rule 29 (STATEMENTS -> FUNCSTAT .)


state 68

    (33) PRINTSTAT -> PRINT . OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (34) PRINTSTAT -> PRINT . OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON

    OPEN_PARENTH    shift and go to state 87


state 69

    (41) DOSTAT -> DO . IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (46) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 88

    IN_S                           shift and go to state 89

state 70

    (32) IDSTAT -> ASSIGN . SEMICOLON

    SEMICOLON       shift and go to state 90


state 71

    (28) STATEMENTS -> FORSTAT .

    CLOSING_BRACES  reduce using rule 28 (STATEMENTS -> FORSTAT .)
    PRINT           reduce using rule 28 (STATEMENTS -> FORSTAT .)
    READ            reduce using rule 28 (STATEMENTS -> FORSTAT .)
    IF              reduce using rule 28 (STATEMENTS -> FORSTAT .)
    WHILE           reduce using rule 28 (STATEMENTS -> FORSTAT .)
    DO              reduce using rule 28 (STATEMENTS -> FORSTAT .)
    FOR             reduce using rule 28 (STATEMENTS -> FORSTAT .)
    ID              reduce using rule 28 (STATEMENTS -> FORSTAT .)
    INT             reduce using rule 28 (STATEMENTS -> FORSTAT .)
    DOUBLE          reduce using rule 28 (STATEMENTS -> FORSTAT .)


state 72

    (21) STATEMENTS -> VAR .
    (4) VAR -> VAR . TIPO DECLARE SEMICOLON
    (5) VAR -> VAR . TIPO MAT SEMICOLON
    (16) TIPO -> . INT
    (17) TIPO -> . DOUBLE

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 21 (STATEMENTS -> VAR .)
    PRINT           reduce using rule 21 (STATEMENTS -> VAR .)
    READ            reduce using rule 21 (STATEMENTS -> VAR .)
    IF              reduce using rule 21 (STATEMENTS -> VAR .)
    WHILE           reduce using rule 21 (STATEMENTS -> VAR .)
    DO              reduce using rule 21 (STATEMENTS -> VAR .)
    FOR             reduce using rule 21 (STATEMENTS -> VAR .)
    ID              reduce using rule 21 (STATEMENTS -> VAR .)
    INT             shift and go to state 2
    DOUBLE          shift and go to state 5

  ! INT             [ reduce using rule 21 (STATEMENTS -> VAR .) ]
  ! DOUBLE          [ reduce using rule 21 (STATEMENTS -> VAR .) ]

    TIPO                           shift and go to state 7

state 73

    (18) S -> STATEMENTS .

    CLOSING_BRACES  reduce using rule 18 (S -> STATEMENTS .)
    PRINT           reduce using rule 18 (S -> STATEMENTS .)
    READ            reduce using rule 18 (S -> STATEMENTS .)
    IF              reduce using rule 18 (S -> STATEMENTS .)
    WHILE           reduce using rule 18 (S -> STATEMENTS .)
    DO              reduce using rule 18 (S -> STATEMENTS .)
    FOR             reduce using rule 18 (S -> STATEMENTS .)
    ID              reduce using rule 18 (S -> STATEMENTS .)
    INT             reduce using rule 18 (S -> STATEMENTS .)
    DOUBLE          reduce using rule 18 (S -> STATEMENTS .)


state 74

    (35) READSTAT -> READ . OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON

    OPEN_PARENTH    shift and go to state 91


state 75

    (26) STATEMENTS -> WHILESTAT .

    CLOSING_BRACES  reduce using rule 26 (STATEMENTS -> WHILESTAT .)
    PRINT           reduce using rule 26 (STATEMENTS -> WHILESTAT .)
    READ            reduce using rule 26 (STATEMENTS -> WHILESTAT .)
    IF              reduce using rule 26 (STATEMENTS -> WHILESTAT .)
    WHILE           reduce using rule 26 (STATEMENTS -> WHILESTAT .)
    DO              reduce using rule 26 (STATEMENTS -> WHILESTAT .)
    FOR             reduce using rule 26 (STATEMENTS -> WHILESTAT .)
    ID              reduce using rule 26 (STATEMENTS -> WHILESTAT .)
    INT             reduce using rule 26 (STATEMENTS -> WHILESTAT .)
    DOUBLE          reduce using rule 26 (STATEMENTS -> WHILESTAT .)


state 76

    (40) WHILESTAT -> WHILE . OPEN_PARENTH EL CLOSING_PARENTH IN_S

    OPEN_PARENTH    shift and go to state 92


state 77

    (43) FUNCSTAT -> ID . OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (44) INC_STAT -> ID . PLUSPLUS SEMICOLON
    (45) INC_STAT -> ID . MINUSMINUS SEMICOLON
    (11) ASSIGN -> ID . EQUAL EA

    OPEN_PARENTH    shift and go to state 94
    PLUSPLUS        shift and go to state 93
    MINUSMINUS      shift and go to state 95
    EQUAL           shift and go to state 20


state 78

    (23) STATEMENTS -> PRINTSTAT .

    CLOSING_BRACES  reduce using rule 23 (STATEMENTS -> PRINTSTAT .)
    PRINT           reduce using rule 23 (STATEMENTS -> PRINTSTAT .)
    READ            reduce using rule 23 (STATEMENTS -> PRINTSTAT .)
    IF              reduce using rule 23 (STATEMENTS -> PRINTSTAT .)
    WHILE           reduce using rule 23 (STATEMENTS -> PRINTSTAT .)
    DO              reduce using rule 23 (STATEMENTS -> PRINTSTAT .)
    FOR             reduce using rule 23 (STATEMENTS -> PRINTSTAT .)
    ID              reduce using rule 23 (STATEMENTS -> PRINTSTAT .)
    INT             reduce using rule 23 (STATEMENTS -> PRINTSTAT .)
    DOUBLE          reduce using rule 23 (STATEMENTS -> PRINTSTAT .)


state 79

    (27) STATEMENTS -> DOSTAT .

    CLOSING_BRACES  reduce using rule 27 (STATEMENTS -> DOSTAT .)
    PRINT           reduce using rule 27 (STATEMENTS -> DOSTAT .)
    READ            reduce using rule 27 (STATEMENTS -> DOSTAT .)
    IF              reduce using rule 27 (STATEMENTS -> DOSTAT .)
    WHILE           reduce using rule 27 (STATEMENTS -> DOSTAT .)
    DO              reduce using rule 27 (STATEMENTS -> DOSTAT .)
    FOR             reduce using rule 27 (STATEMENTS -> DOSTAT .)
    ID              reduce using rule 27 (STATEMENTS -> DOSTAT .)
    INT             reduce using rule 27 (STATEMENTS -> DOSTAT .)
    DOUBLE          reduce using rule 27 (STATEMENTS -> DOSTAT .)


state 80

    (36) IFSTAT -> IF . OPEN_PARENTH EL CLOSING_PARENTH IN_S
    (37) IFSTAT -> IF . OPEN_PARENTH EL CLOSING_PARENTH IN_S ELSE AUX2 IN_S

    OPEN_PARENTH    shift and go to state 96


state 81

    (22) STATEMENTS -> IDSTAT .

    CLOSING_BRACES  reduce using rule 22 (STATEMENTS -> IDSTAT .)
    PRINT           reduce using rule 22 (STATEMENTS -> IDSTAT .)
    READ            reduce using rule 22 (STATEMENTS -> IDSTAT .)
    IF              reduce using rule 22 (STATEMENTS -> IDSTAT .)
    WHILE           reduce using rule 22 (STATEMENTS -> IDSTAT .)
    DO              reduce using rule 22 (STATEMENTS -> IDSTAT .)
    FOR             reduce using rule 22 (STATEMENTS -> IDSTAT .)
    ID              reduce using rule 22 (STATEMENTS -> IDSTAT .)
    INT             reduce using rule 22 (STATEMENTS -> IDSTAT .)
    DOUBLE          reduce using rule 22 (STATEMENTS -> IDSTAT .)


state 82

    (12) FUNC -> FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S . CLOSING_BRACES
    (19) S -> S . STATEMENTS
    (21) STATEMENTS -> . VAR
    (22) STATEMENTS -> . IDSTAT
    (23) STATEMENTS -> . PRINTSTAT
    (24) STATEMENTS -> . READSTAT
    (25) STATEMENTS -> . IFSTAT
    (26) STATEMENTS -> . WHILESTAT
    (27) STATEMENTS -> . DOSTAT
    (28) STATEMENTS -> . FORSTAT
    (29) STATEMENTS -> . FUNCSTAT
    (30) STATEMENTS -> . INC_STAT
    (31) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (32) IDSTAT -> . ASSIGN SEMICOLON
    (33) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (34) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (35) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (36) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IN_S
    (37) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IN_S ELSE AUX2 IN_S
    (40) WHILESTAT -> . WHILE OPEN_PARENTH EL CLOSING_PARENTH IN_S
    (41) DOSTAT -> . DO IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (42) FORSTAT -> . FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S
    (43) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (44) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (45) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (16) TIPO -> . INT
    (17) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  shift and go to state 98
    PRINT           shift and go to state 68
    READ            shift and go to state 74
    IF              shift and go to state 80
    WHILE           shift and go to state 76
    DO              shift and go to state 69
    FOR             shift and go to state 66
    ID              shift and go to state 77
    INT             shift and go to state 2
    DOUBLE          shift and go to state 5

  ! CLOSING_BRACES  [ reduce using rule 31 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 31 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    INC_STAT                       shift and go to state 64
    READSTAT                       shift and go to state 65
    ASSIGN                         shift and go to state 70
    STATEMENTS                     shift and go to state 97
    PRINTSTAT                      shift and go to state 78
    IFSTAT                         shift and go to state 83
    FUNCSTAT                       shift and go to state 67
    TIPO                           shift and go to state 4
    IDSTAT                         shift and go to state 81
    FORSTAT                        shift and go to state 71
    VAR                            shift and go to state 72
    DOSTAT                         shift and go to state 79
    WHILESTAT                      shift and go to state 75

state 83

    (25) STATEMENTS -> IFSTAT .

    CLOSING_BRACES  reduce using rule 25 (STATEMENTS -> IFSTAT .)
    PRINT           reduce using rule 25 (STATEMENTS -> IFSTAT .)
    READ            reduce using rule 25 (STATEMENTS -> IFSTAT .)
    IF              reduce using rule 25 (STATEMENTS -> IFSTAT .)
    WHILE           reduce using rule 25 (STATEMENTS -> IFSTAT .)
    DO              reduce using rule 25 (STATEMENTS -> IFSTAT .)
    FOR             reduce using rule 25 (STATEMENTS -> IFSTAT .)
    ID              reduce using rule 25 (STATEMENTS -> IFSTAT .)
    INT             reduce using rule 25 (STATEMENTS -> IFSTAT .)
    DOUBLE          reduce using rule 25 (STATEMENTS -> IFSTAT .)


state 84

    (13) FUNC -> FUNC FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES . S CLOSING_BRACES
    (18) S -> . STATEMENTS
    (19) S -> . S STATEMENTS
    (20) S -> .
    (21) STATEMENTS -> . VAR
    (22) STATEMENTS -> . IDSTAT
    (23) STATEMENTS -> . PRINTSTAT
    (24) STATEMENTS -> . READSTAT
    (25) STATEMENTS -> . IFSTAT
    (26) STATEMENTS -> . WHILESTAT
    (27) STATEMENTS -> . DOSTAT
    (28) STATEMENTS -> . FORSTAT
    (29) STATEMENTS -> . FUNCSTAT
    (30) STATEMENTS -> . INC_STAT
    (31) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (32) IDSTAT -> . ASSIGN SEMICOLON
    (33) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (34) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (35) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (36) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IN_S
    (37) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IN_S ELSE AUX2 IN_S
    (40) WHILESTAT -> . WHILE OPEN_PARENTH EL CLOSING_PARENTH IN_S
    (41) DOSTAT -> . DO IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (42) FORSTAT -> . FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S
    (43) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (44) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (45) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (16) TIPO -> . INT
    (17) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for READ resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for IF resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for DO resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for FOR resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for ID resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 6 (VAR -> .)
    PRINT           shift and go to state 68
    READ            shift and go to state 74
    IF              shift and go to state 80
    WHILE           shift and go to state 76
    DO              shift and go to state 69
    FOR             shift and go to state 66
    ID              shift and go to state 77
    INT             shift and go to state 2
    DOUBLE          shift and go to state 5

  ! CLOSING_BRACES  [ reduce using rule 20 (S -> .) ]
  ! PRINT           [ reduce using rule 20 (S -> .) ]
  ! READ            [ reduce using rule 20 (S -> .) ]
  ! IF              [ reduce using rule 20 (S -> .) ]
  ! WHILE           [ reduce using rule 20 (S -> .) ]
  ! DO              [ reduce using rule 20 (S -> .) ]
  ! FOR             [ reduce using rule 20 (S -> .) ]
  ! ID              [ reduce using rule 20 (S -> .) ]
  ! INT             [ reduce using rule 20 (S -> .) ]
  ! DOUBLE          [ reduce using rule 20 (S -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 31 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 31 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    INC_STAT                       shift and go to state 64
    READSTAT                       shift and go to state 65
    ASSIGN                         shift and go to state 70
    STATEMENTS                     shift and go to state 73
    PRINTSTAT                      shift and go to state 78
    IFSTAT                         shift and go to state 83
    FUNCSTAT                       shift and go to state 67
    TIPO                           shift and go to state 4
    IDSTAT                         shift and go to state 81
    S                              shift and go to state 99
    FORSTAT                        shift and go to state 71
    VAR                            shift and go to state 72
    DOSTAT                         shift and go to state 79
    WHILESTAT                      shift and go to state 75

state 85

    (15) M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S . CLOSING_BRACES
    (19) S -> S . STATEMENTS
    (21) STATEMENTS -> . VAR
    (22) STATEMENTS -> . IDSTAT
    (23) STATEMENTS -> . PRINTSTAT
    (24) STATEMENTS -> . READSTAT
    (25) STATEMENTS -> . IFSTAT
    (26) STATEMENTS -> . WHILESTAT
    (27) STATEMENTS -> . DOSTAT
    (28) STATEMENTS -> . FORSTAT
    (29) STATEMENTS -> . FUNCSTAT
    (30) STATEMENTS -> . INC_STAT
    (31) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (32) IDSTAT -> . ASSIGN SEMICOLON
    (33) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (34) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (35) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (36) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IN_S
    (37) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IN_S ELSE AUX2 IN_S
    (40) WHILESTAT -> . WHILE OPEN_PARENTH EL CLOSING_PARENTH IN_S
    (41) DOSTAT -> . DO IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (42) FORSTAT -> . FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S
    (43) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (44) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (45) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (16) TIPO -> . INT
    (17) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  shift and go to state 100
    PRINT           shift and go to state 68
    READ            shift and go to state 74
    IF              shift and go to state 80
    WHILE           shift and go to state 76
    DO              shift and go to state 69
    FOR             shift and go to state 66
    ID              shift and go to state 77
    INT             shift and go to state 2
    DOUBLE          shift and go to state 5

  ! CLOSING_BRACES  [ reduce using rule 31 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 31 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    INC_STAT                       shift and go to state 64
    READSTAT                       shift and go to state 65
    ASSIGN                         shift and go to state 70
    STATEMENTS                     shift and go to state 97
    PRINTSTAT                      shift and go to state 78
    IFSTAT                         shift and go to state 83
    FUNCSTAT                       shift and go to state 67
    TIPO                           shift and go to state 4
    IDSTAT                         shift and go to state 81
    FORSTAT                        shift and go to state 71
    VAR                            shift and go to state 72
    DOSTAT                         shift and go to state 79
    WHILESTAT                      shift and go to state 75

state 86

    (42) FORSTAT -> FOR OPEN_PARENTH . ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S

    ID              shift and go to state 101


state 87

    (33) PRINTSTAT -> PRINT OPEN_PARENTH . EA CLOSING_PARENTH SEMICOLON
    (34) PRINTSTAT -> PRINT OPEN_PARENTH . STRING CLOSING_PARENTH SEMICOLON
    (47) EA -> . TA
    (48) EA -> . EA PLUS TA
    (49) EA -> . EA MINUS TA
    (54) TA -> . FA
    (55) TA -> . TA MULTIPLY FA
    (56) TA -> . TA DIVISION FA
    (50) FA -> . CONSTANT
    (51) FA -> . ID
    (52) FA -> . MAT
    (53) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (70) MAT -> . ID MAT_BRACKET

    STRING          shift and go to state 102
    CONSTANT        shift and go to state 32
    ID              shift and go to state 33
    OPEN_PARENTH    shift and go to state 38

    MAT                            shift and go to state 37
    TA                             shift and go to state 36
    FA                             shift and go to state 35
    EA                             shift and go to state 103

state 88

    (46) IN_S -> OPEN_BRACES . S CLOSING_BRACES
    (18) S -> . STATEMENTS
    (19) S -> . S STATEMENTS
    (20) S -> .
    (21) STATEMENTS -> . VAR
    (22) STATEMENTS -> . IDSTAT
    (23) STATEMENTS -> . PRINTSTAT
    (24) STATEMENTS -> . READSTAT
    (25) STATEMENTS -> . IFSTAT
    (26) STATEMENTS -> . WHILESTAT
    (27) STATEMENTS -> . DOSTAT
    (28) STATEMENTS -> . FORSTAT
    (29) STATEMENTS -> . FUNCSTAT
    (30) STATEMENTS -> . INC_STAT
    (31) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (32) IDSTAT -> . ASSIGN SEMICOLON
    (33) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (34) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (35) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (36) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IN_S
    (37) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IN_S ELSE AUX2 IN_S
    (40) WHILESTAT -> . WHILE OPEN_PARENTH EL CLOSING_PARENTH IN_S
    (41) DOSTAT -> . DO IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (42) FORSTAT -> . FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S
    (43) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (44) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (45) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (16) TIPO -> . INT
    (17) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for READ resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for IF resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for DO resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for FOR resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for ID resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 20 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 6 (VAR -> .)
    PRINT           shift and go to state 68
    READ            shift and go to state 74
    IF              shift and go to state 80
    WHILE           shift and go to state 76
    DO              shift and go to state 69
    FOR             shift and go to state 66
    ID              shift and go to state 77
    INT             shift and go to state 2
    DOUBLE          shift and go to state 5

  ! CLOSING_BRACES  [ reduce using rule 20 (S -> .) ]
  ! PRINT           [ reduce using rule 20 (S -> .) ]
  ! READ            [ reduce using rule 20 (S -> .) ]
  ! IF              [ reduce using rule 20 (S -> .) ]
  ! WHILE           [ reduce using rule 20 (S -> .) ]
  ! DO              [ reduce using rule 20 (S -> .) ]
  ! FOR             [ reduce using rule 20 (S -> .) ]
  ! ID              [ reduce using rule 20 (S -> .) ]
  ! INT             [ reduce using rule 20 (S -> .) ]
  ! DOUBLE          [ reduce using rule 20 (S -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 31 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 31 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    INC_STAT                       shift and go to state 64
    READSTAT                       shift and go to state 65
    ASSIGN                         shift and go to state 70
    STATEMENTS                     shift and go to state 73
    PRINTSTAT                      shift and go to state 78
    IFSTAT                         shift and go to state 83
    FUNCSTAT                       shift and go to state 67
    TIPO                           shift and go to state 4
    IDSTAT                         shift and go to state 81
    S                              shift and go to state 104
    FORSTAT                        shift and go to state 71
    VAR                            shift and go to state 72
    DOSTAT                         shift and go to state 79
    WHILESTAT                      shift and go to state 75

state 89

    (41) DOSTAT -> DO IN_S . WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON

    WHILE           shift and go to state 105


state 90

    (32) IDSTAT -> ASSIGN SEMICOLON .

    CLOSING_BRACES  reduce using rule 32 (IDSTAT -> ASSIGN SEMICOLON .)
    PRINT           reduce using rule 32 (IDSTAT -> ASSIGN SEMICOLON .)
    READ            reduce using rule 32 (IDSTAT -> ASSIGN SEMICOLON .)
    IF              reduce using rule 32 (IDSTAT -> ASSIGN SEMICOLON .)
    WHILE           reduce using rule 32 (IDSTAT -> ASSIGN SEMICOLON .)
    DO              reduce using rule 32 (IDSTAT -> ASSIGN SEMICOLON .)
    FOR             reduce using rule 32 (IDSTAT -> ASSIGN SEMICOLON .)
    ID              reduce using rule 32 (IDSTAT -> ASSIGN SEMICOLON .)
    INT             reduce using rule 32 (IDSTAT -> ASSIGN SEMICOLON .)
    DOUBLE          reduce using rule 32 (IDSTAT -> ASSIGN SEMICOLON .)


state 91

    (35) READSTAT -> READ OPEN_PARENTH . EA CLOSING_PARENTH SEMICOLON
    (47) EA -> . TA
    (48) EA -> . EA PLUS TA
    (49) EA -> . EA MINUS TA
    (54) TA -> . FA
    (55) TA -> . TA MULTIPLY FA
    (56) TA -> . TA DIVISION FA
    (50) FA -> . CONSTANT
    (51) FA -> . ID
    (52) FA -> . MAT
    (53) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (70) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 32
    ID              shift and go to state 33
    OPEN_PARENTH    shift and go to state 38

    MAT                            shift and go to state 37
    TA                             shift and go to state 36
    FA                             shift and go to state 35
    EA                             shift and go to state 106

state 92

    (40) WHILESTAT -> WHILE OPEN_PARENTH . EL CLOSING_PARENTH IN_S
    (57) EL -> . TL
    (58) EL -> . EL OR TL
    (59) TL -> . FL
    (60) TL -> . TL AND FL
    (61) FL -> . NL OPERATORS NL
    (62) FL -> . EA OPERATORS EA
    (63) FL -> . NL
    (64) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (65) NL -> . NOT EL
    (47) EA -> . TA
    (48) EA -> . EA PLUS TA
    (49) EA -> . EA MINUS TA
    (54) TA -> . FA
    (55) TA -> . TA MULTIPLY FA
    (56) TA -> . TA DIVISION FA
    (50) FA -> . CONSTANT
    (51) FA -> . ID
    (52) FA -> . MAT
    (53) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (70) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 108
    NOT             shift and go to state 110
    CONSTANT        shift and go to state 32
    ID              shift and go to state 33

    EA                             shift and go to state 112
    FA                             shift and go to state 35
    TA                             shift and go to state 36
    EL                             shift and go to state 111
    NL                             shift and go to state 109
    TL                             shift and go to state 107
    MAT                            shift and go to state 37
    FL                             shift and go to state 113

state 93

    (44) INC_STAT -> ID PLUSPLUS . SEMICOLON

    SEMICOLON       shift and go to state 114


state 94

    (43) FUNCSTAT -> ID OPEN_PARENTH . CLOSING_PARENTH SEMICOLON

    CLOSING_PARENTH shift and go to state 115


state 95

    (45) INC_STAT -> ID MINUSMINUS . SEMICOLON

    SEMICOLON       shift and go to state 116


state 96

    (36) IFSTAT -> IF OPEN_PARENTH . EL CLOSING_PARENTH IN_S
    (37) IFSTAT -> IF OPEN_PARENTH . EL CLOSING_PARENTH IN_S ELSE AUX2 IN_S
    (57) EL -> . TL
    (58) EL -> . EL OR TL
    (59) TL -> . FL
    (60) TL -> . TL AND FL
    (61) FL -> . NL OPERATORS NL
    (62) FL -> . EA OPERATORS EA
    (63) FL -> . NL
    (64) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (65) NL -> . NOT EL
    (47) EA -> . TA
    (48) EA -> . EA PLUS TA
    (49) EA -> . EA MINUS TA
    (54) TA -> . FA
    (55) TA -> . TA MULTIPLY FA
    (56) TA -> . TA DIVISION FA
    (50) FA -> . CONSTANT
    (51) FA -> . ID
    (52) FA -> . MAT
    (53) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (70) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 108
    NOT             shift and go to state 110
    CONSTANT        shift and go to state 32
    ID              shift and go to state 33

    EL                             shift and go to state 117
    NL                             shift and go to state 109
    TL                             shift and go to state 107
    EA                             shift and go to state 112
    MAT                            shift and go to state 37
    FA                             shift and go to state 35
    TA                             shift and go to state 36
    FL                             shift and go to state 113

state 97

    (19) S -> S STATEMENTS .

    CLOSING_BRACES  reduce using rule 19 (S -> S STATEMENTS .)
    PRINT           reduce using rule 19 (S -> S STATEMENTS .)
    READ            reduce using rule 19 (S -> S STATEMENTS .)
    IF              reduce using rule 19 (S -> S STATEMENTS .)
    WHILE           reduce using rule 19 (S -> S STATEMENTS .)
    DO              reduce using rule 19 (S -> S STATEMENTS .)
    FOR             reduce using rule 19 (S -> S STATEMENTS .)
    ID              reduce using rule 19 (S -> S STATEMENTS .)
    INT             reduce using rule 19 (S -> S STATEMENTS .)
    DOUBLE          reduce using rule 19 (S -> S STATEMENTS .)


state 98

    (12) FUNC -> FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES .

    FUNCTION        reduce using rule 12 (FUNC -> FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES .)
    MAIN            reduce using rule 12 (FUNC -> FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES .)


state 99

    (13) FUNC -> FUNC FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S . CLOSING_BRACES
    (19) S -> S . STATEMENTS
    (21) STATEMENTS -> . VAR
    (22) STATEMENTS -> . IDSTAT
    (23) STATEMENTS -> . PRINTSTAT
    (24) STATEMENTS -> . READSTAT
    (25) STATEMENTS -> . IFSTAT
    (26) STATEMENTS -> . WHILESTAT
    (27) STATEMENTS -> . DOSTAT
    (28) STATEMENTS -> . FORSTAT
    (29) STATEMENTS -> . FUNCSTAT
    (30) STATEMENTS -> . INC_STAT
    (31) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (32) IDSTAT -> . ASSIGN SEMICOLON
    (33) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (34) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (35) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (36) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IN_S
    (37) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IN_S ELSE AUX2 IN_S
    (40) WHILESTAT -> . WHILE OPEN_PARENTH EL CLOSING_PARENTH IN_S
    (41) DOSTAT -> . DO IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (42) FORSTAT -> . FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S
    (43) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (44) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (45) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (16) TIPO -> . INT
    (17) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  shift and go to state 118
    PRINT           shift and go to state 68
    READ            shift and go to state 74
    IF              shift and go to state 80
    WHILE           shift and go to state 76
    DO              shift and go to state 69
    FOR             shift and go to state 66
    ID              shift and go to state 77
    INT             shift and go to state 2
    DOUBLE          shift and go to state 5

  ! CLOSING_BRACES  [ reduce using rule 31 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 31 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    INC_STAT                       shift and go to state 64
    READSTAT                       shift and go to state 65
    ASSIGN                         shift and go to state 70
    STATEMENTS                     shift and go to state 97
    PRINTSTAT                      shift and go to state 78
    IFSTAT                         shift and go to state 83
    FUNCSTAT                       shift and go to state 67
    TIPO                           shift and go to state 4
    IDSTAT                         shift and go to state 81
    FORSTAT                        shift and go to state 71
    VAR                            shift and go to state 72
    DOSTAT                         shift and go to state 79
    WHILESTAT                      shift and go to state 75

state 100

    (15) M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES .

    $end            reduce using rule 15 (M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES .)


state 101

    (42) FORSTAT -> FOR OPEN_PARENTH ID . EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S

    EQUAL           shift and go to state 119


state 102

    (34) PRINTSTAT -> PRINT OPEN_PARENTH STRING . CLOSING_PARENTH SEMICOLON

    CLOSING_PARENTH shift and go to state 120


state 103

    (33) PRINTSTAT -> PRINT OPEN_PARENTH EA . CLOSING_PARENTH SEMICOLON
    (48) EA -> EA . PLUS TA
    (49) EA -> EA . MINUS TA

    CLOSING_PARENTH shift and go to state 121
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48


state 104

    (46) IN_S -> OPEN_BRACES S . CLOSING_BRACES
    (19) S -> S . STATEMENTS
    (21) STATEMENTS -> . VAR
    (22) STATEMENTS -> . IDSTAT
    (23) STATEMENTS -> . PRINTSTAT
    (24) STATEMENTS -> . READSTAT
    (25) STATEMENTS -> . IFSTAT
    (26) STATEMENTS -> . WHILESTAT
    (27) STATEMENTS -> . DOSTAT
    (28) STATEMENTS -> . FORSTAT
    (29) STATEMENTS -> . FUNCSTAT
    (30) STATEMENTS -> . INC_STAT
    (31) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (32) IDSTAT -> . ASSIGN SEMICOLON
    (33) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (34) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (35) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (36) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IN_S
    (37) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IN_S ELSE AUX2 IN_S
    (40) WHILESTAT -> . WHILE OPEN_PARENTH EL CLOSING_PARENTH IN_S
    (41) DOSTAT -> . DO IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (42) FORSTAT -> . FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S
    (43) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (44) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (45) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (16) TIPO -> . INT
    (17) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA

  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  shift and go to state 122
    PRINT           shift and go to state 68
    READ            shift and go to state 74
    IF              shift and go to state 80
    WHILE           shift and go to state 76
    DO              shift and go to state 69
    FOR             shift and go to state 66
    ID              shift and go to state 77
    INT             shift and go to state 2
    DOUBLE          shift and go to state 5

  ! CLOSING_BRACES  [ reduce using rule 31 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 31 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 31 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 31 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    INC_STAT                       shift and go to state 64
    READSTAT                       shift and go to state 65
    ASSIGN                         shift and go to state 70
    STATEMENTS                     shift and go to state 97
    PRINTSTAT                      shift and go to state 78
    IFSTAT                         shift and go to state 83
    FUNCSTAT                       shift and go to state 67
    TIPO                           shift and go to state 4
    IDSTAT                         shift and go to state 81
    FORSTAT                        shift and go to state 71
    VAR                            shift and go to state 72
    DOSTAT                         shift and go to state 79
    WHILESTAT                      shift and go to state 75

state 105

    (41) DOSTAT -> DO IN_S WHILE . OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON

    OPEN_PARENTH    shift and go to state 123


state 106

    (35) READSTAT -> READ OPEN_PARENTH EA . CLOSING_PARENTH SEMICOLON
    (48) EA -> EA . PLUS TA
    (49) EA -> EA . MINUS TA

    CLOSING_PARENTH shift and go to state 124
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48


state 107

    (57) EL -> TL .
    (60) TL -> TL . AND FL

  ! shift/reduce conflict for AND resolved as shift
    OR              reduce using rule 57 (EL -> TL .)
    NOT_EQUAL       reduce using rule 57 (EL -> TL .)
    LOWER_THAN      reduce using rule 57 (EL -> TL .)
    BIGGER_THAN     reduce using rule 57 (EL -> TL .)
    EQUAL_EQUAL     reduce using rule 57 (EL -> TL .)
    CLOSING_PARENTH reduce using rule 57 (EL -> TL .)
    SEMICOLON       reduce using rule 57 (EL -> TL .)
    AND             shift and go to state 125

  ! AND             [ reduce using rule 57 (EL -> TL .) ]


state 108

    (64) FL -> OPEN_PARENTH . EL CLOSING_PARENTH
    (53) FA -> OPEN_PARENTH . EA CLOSING_PARENTH
    (57) EL -> . TL
    (58) EL -> . EL OR TL
    (47) EA -> . TA
    (48) EA -> . EA PLUS TA
    (49) EA -> . EA MINUS TA
    (59) TL -> . FL
    (60) TL -> . TL AND FL
    (54) TA -> . FA
    (55) TA -> . TA MULTIPLY FA
    (56) TA -> . TA DIVISION FA
    (61) FL -> . NL OPERATORS NL
    (62) FL -> . EA OPERATORS EA
    (63) FL -> . NL
    (64) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (50) FA -> . CONSTANT
    (51) FA -> . ID
    (52) FA -> . MAT
    (53) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (65) NL -> . NOT EL
    (70) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 108
    CONSTANT        shift and go to state 32
    ID              shift and go to state 33
    NOT             shift and go to state 110

    MAT                            shift and go to state 37
    EL                             shift and go to state 126
    FA                             shift and go to state 35
    TA                             shift and go to state 36
    NL                             shift and go to state 109
    FL                             shift and go to state 113
    TL                             shift and go to state 107
    EA                             shift and go to state 127

state 109

    (61) FL -> NL . OPERATORS NL
    (63) FL -> NL .
    (66) OPERATORS -> . NOT_EQUAL
    (67) OPERATORS -> . LOWER_THAN
    (68) OPERATORS -> . BIGGER_THAN
    (69) OPERATORS -> . EQUAL_EQUAL

  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LOWER_THAN resolved as shift
  ! shift/reduce conflict for BIGGER_THAN resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
    AND             reduce using rule 63 (FL -> NL .)
    CLOSING_PARENTH reduce using rule 63 (FL -> NL .)
    OR              reduce using rule 63 (FL -> NL .)
    SEMICOLON       reduce using rule 63 (FL -> NL .)
    NOT_EQUAL       shift and go to state 132
    LOWER_THAN      shift and go to state 130
    BIGGER_THAN     shift and go to state 128
    EQUAL_EQUAL     shift and go to state 131

  ! NOT_EQUAL       [ reduce using rule 63 (FL -> NL .) ]
  ! LOWER_THAN      [ reduce using rule 63 (FL -> NL .) ]
  ! BIGGER_THAN     [ reduce using rule 63 (FL -> NL .) ]
  ! EQUAL_EQUAL     [ reduce using rule 63 (FL -> NL .) ]

    OPERATORS                      shift and go to state 129

state 110

    (65) NL -> NOT . EL
    (57) EL -> . TL
    (58) EL -> . EL OR TL
    (59) TL -> . FL
    (60) TL -> . TL AND FL
    (61) FL -> . NL OPERATORS NL
    (62) FL -> . EA OPERATORS EA
    (63) FL -> . NL
    (64) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (65) NL -> . NOT EL
    (47) EA -> . TA
    (48) EA -> . EA PLUS TA
    (49) EA -> . EA MINUS TA
    (54) TA -> . FA
    (55) TA -> . TA MULTIPLY FA
    (56) TA -> . TA DIVISION FA
    (50) FA -> . CONSTANT
    (51) FA -> . ID
    (52) FA -> . MAT
    (53) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (70) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 108
    NOT             shift and go to state 110
    CONSTANT        shift and go to state 32
    ID              shift and go to state 33

    MAT                            shift and go to state 37
    FA                             shift and go to state 35
    TA                             shift and go to state 36
    EL                             shift and go to state 133
    NL                             shift and go to state 109
    EA                             shift and go to state 112
    TL                             shift and go to state 107
    FL                             shift and go to state 113

state 111

    (40) WHILESTAT -> WHILE OPEN_PARENTH EL . CLOSING_PARENTH IN_S
    (58) EL -> EL . OR TL

    CLOSING_PARENTH shift and go to state 135
    OR              shift and go to state 134


state 112

    (62) FL -> EA . OPERATORS EA
    (48) EA -> EA . PLUS TA
    (49) EA -> EA . MINUS TA
    (66) OPERATORS -> . NOT_EQUAL
    (67) OPERATORS -> . LOWER_THAN
    (68) OPERATORS -> . BIGGER_THAN
    (69) OPERATORS -> . EQUAL_EQUAL

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    NOT_EQUAL       shift and go to state 132
    LOWER_THAN      shift and go to state 130
    BIGGER_THAN     shift and go to state 128
    EQUAL_EQUAL     shift and go to state 131

    OPERATORS                      shift and go to state 136

state 113

    (59) TL -> FL .

    AND             reduce using rule 59 (TL -> FL .)
    CLOSING_PARENTH reduce using rule 59 (TL -> FL .)
    OR              reduce using rule 59 (TL -> FL .)
    NOT_EQUAL       reduce using rule 59 (TL -> FL .)
    LOWER_THAN      reduce using rule 59 (TL -> FL .)
    BIGGER_THAN     reduce using rule 59 (TL -> FL .)
    EQUAL_EQUAL     reduce using rule 59 (TL -> FL .)
    SEMICOLON       reduce using rule 59 (TL -> FL .)


state 114

    (44) INC_STAT -> ID PLUSPLUS SEMICOLON .

    CLOSING_BRACES  reduce using rule 44 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    PRINT           reduce using rule 44 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    READ            reduce using rule 44 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    IF              reduce using rule 44 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    WHILE           reduce using rule 44 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    DO              reduce using rule 44 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    FOR             reduce using rule 44 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    ID              reduce using rule 44 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    INT             reduce using rule 44 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    DOUBLE          reduce using rule 44 (INC_STAT -> ID PLUSPLUS SEMICOLON .)


state 115

    (43) FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 137


state 116

    (45) INC_STAT -> ID MINUSMINUS SEMICOLON .

    CLOSING_BRACES  reduce using rule 45 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    PRINT           reduce using rule 45 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    READ            reduce using rule 45 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    IF              reduce using rule 45 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    WHILE           reduce using rule 45 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    DO              reduce using rule 45 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    FOR             reduce using rule 45 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    ID              reduce using rule 45 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    INT             reduce using rule 45 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    DOUBLE          reduce using rule 45 (INC_STAT -> ID MINUSMINUS SEMICOLON .)


state 117

    (36) IFSTAT -> IF OPEN_PARENTH EL . CLOSING_PARENTH IN_S
    (37) IFSTAT -> IF OPEN_PARENTH EL . CLOSING_PARENTH IN_S ELSE AUX2 IN_S
    (58) EL -> EL . OR TL

    CLOSING_PARENTH shift and go to state 138
    OR              shift and go to state 134


state 118

    (13) FUNC -> FUNC FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES .

    FUNCTION        reduce using rule 13 (FUNC -> FUNC FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES .)
    MAIN            reduce using rule 13 (FUNC -> FUNC FUNCTION ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES .)


state 119

    (42) FORSTAT -> FOR OPEN_PARENTH ID EQUAL . EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S
    (47) EA -> . TA
    (48) EA -> . EA PLUS TA
    (49) EA -> . EA MINUS TA
    (54) TA -> . FA
    (55) TA -> . TA MULTIPLY FA
    (56) TA -> . TA DIVISION FA
    (50) FA -> . CONSTANT
    (51) FA -> . ID
    (52) FA -> . MAT
    (53) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (70) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 32
    ID              shift and go to state 33
    OPEN_PARENTH    shift and go to state 38

    MAT                            shift and go to state 37
    FA                             shift and go to state 35
    TA                             shift and go to state 36
    EA                             shift and go to state 139

state 120

    (34) PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 140


state 121

    (33) PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 141


state 122

    (46) IN_S -> OPEN_BRACES S CLOSING_BRACES .

    CLOSING_BRACES  reduce using rule 46 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    PRINT           reduce using rule 46 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    READ            reduce using rule 46 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    IF              reduce using rule 46 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    WHILE           reduce using rule 46 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    DO              reduce using rule 46 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    FOR             reduce using rule 46 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    ID              reduce using rule 46 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    INT             reduce using rule 46 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    DOUBLE          reduce using rule 46 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    ELSE            reduce using rule 46 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)


state 123

    (41) DOSTAT -> DO IN_S WHILE OPEN_PARENTH . EL CLOSING_PARENTH SEMICOLON
    (57) EL -> . TL
    (58) EL -> . EL OR TL
    (59) TL -> . FL
    (60) TL -> . TL AND FL
    (61) FL -> . NL OPERATORS NL
    (62) FL -> . EA OPERATORS EA
    (63) FL -> . NL
    (64) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (65) NL -> . NOT EL
    (47) EA -> . TA
    (48) EA -> . EA PLUS TA
    (49) EA -> . EA MINUS TA
    (54) TA -> . FA
    (55) TA -> . TA MULTIPLY FA
    (56) TA -> . TA DIVISION FA
    (50) FA -> . CONSTANT
    (51) FA -> . ID
    (52) FA -> . MAT
    (53) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (70) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 108
    NOT             shift and go to state 110
    CONSTANT        shift and go to state 32
    ID              shift and go to state 33

    EA                             shift and go to state 112
    FA                             shift and go to state 35
    TA                             shift and go to state 36
    EL                             shift and go to state 142
    NL                             shift and go to state 109
    TL                             shift and go to state 107
    MAT                            shift and go to state 37
    FL                             shift and go to state 113

state 124

    (35) READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 143


state 125

    (60) TL -> TL AND . FL
    (61) FL -> . NL OPERATORS NL
    (62) FL -> . EA OPERATORS EA
    (63) FL -> . NL
    (64) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (65) NL -> . NOT EL
    (47) EA -> . TA
    (48) EA -> . EA PLUS TA
    (49) EA -> . EA MINUS TA
    (54) TA -> . FA
    (55) TA -> . TA MULTIPLY FA
    (56) TA -> . TA DIVISION FA
    (50) FA -> . CONSTANT
    (51) FA -> . ID
    (52) FA -> . MAT
    (53) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (70) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 108
    NOT             shift and go to state 110
    CONSTANT        shift and go to state 32
    ID              shift and go to state 33

    MAT                            shift and go to state 37
    FA                             shift and go to state 35
    TA                             shift and go to state 36
    NL                             shift and go to state 109
    FL                             shift and go to state 144
    EA                             shift and go to state 112

state 126

    (64) FL -> OPEN_PARENTH EL . CLOSING_PARENTH
    (58) EL -> EL . OR TL

    CLOSING_PARENTH shift and go to state 145
    OR              shift and go to state 134


state 127

    (53) FA -> OPEN_PARENTH EA . CLOSING_PARENTH
    (48) EA -> EA . PLUS TA
    (49) EA -> EA . MINUS TA
    (62) FL -> EA . OPERATORS EA
    (66) OPERATORS -> . NOT_EQUAL
    (67) OPERATORS -> . LOWER_THAN
    (68) OPERATORS -> . BIGGER_THAN
    (69) OPERATORS -> . EQUAL_EQUAL

    CLOSING_PARENTH shift and go to state 61
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    NOT_EQUAL       shift and go to state 132
    LOWER_THAN      shift and go to state 130
    BIGGER_THAN     shift and go to state 128
    EQUAL_EQUAL     shift and go to state 131

    OPERATORS                      shift and go to state 136

state 128

    (68) OPERATORS -> BIGGER_THAN .

    NOT             reduce using rule 68 (OPERATORS -> BIGGER_THAN .)
    CONSTANT        reduce using rule 68 (OPERATORS -> BIGGER_THAN .)
    ID              reduce using rule 68 (OPERATORS -> BIGGER_THAN .)
    OPEN_PARENTH    reduce using rule 68 (OPERATORS -> BIGGER_THAN .)


state 129

    (61) FL -> NL OPERATORS . NL
    (65) NL -> . NOT EL

    NOT             shift and go to state 110

    NL                             shift and go to state 146

state 130

    (67) OPERATORS -> LOWER_THAN .

    NOT             reduce using rule 67 (OPERATORS -> LOWER_THAN .)
    CONSTANT        reduce using rule 67 (OPERATORS -> LOWER_THAN .)
    ID              reduce using rule 67 (OPERATORS -> LOWER_THAN .)
    OPEN_PARENTH    reduce using rule 67 (OPERATORS -> LOWER_THAN .)


state 131

    (69) OPERATORS -> EQUAL_EQUAL .

    NOT             reduce using rule 69 (OPERATORS -> EQUAL_EQUAL .)
    CONSTANT        reduce using rule 69 (OPERATORS -> EQUAL_EQUAL .)
    ID              reduce using rule 69 (OPERATORS -> EQUAL_EQUAL .)
    OPEN_PARENTH    reduce using rule 69 (OPERATORS -> EQUAL_EQUAL .)


state 132

    (66) OPERATORS -> NOT_EQUAL .

    NOT             reduce using rule 66 (OPERATORS -> NOT_EQUAL .)
    CONSTANT        reduce using rule 66 (OPERATORS -> NOT_EQUAL .)
    ID              reduce using rule 66 (OPERATORS -> NOT_EQUAL .)
    OPEN_PARENTH    reduce using rule 66 (OPERATORS -> NOT_EQUAL .)


state 133

    (65) NL -> NOT EL .
    (58) EL -> EL . OR TL

  ! shift/reduce conflict for OR resolved as shift
    NOT_EQUAL       reduce using rule 65 (NL -> NOT EL .)
    LOWER_THAN      reduce using rule 65 (NL -> NOT EL .)
    BIGGER_THAN     reduce using rule 65 (NL -> NOT EL .)
    EQUAL_EQUAL     reduce using rule 65 (NL -> NOT EL .)
    AND             reduce using rule 65 (NL -> NOT EL .)
    CLOSING_PARENTH reduce using rule 65 (NL -> NOT EL .)
    SEMICOLON       reduce using rule 65 (NL -> NOT EL .)
    OR              shift and go to state 134

  ! OR              [ reduce using rule 65 (NL -> NOT EL .) ]


state 134

    (58) EL -> EL OR . TL
    (59) TL -> . FL
    (60) TL -> . TL AND FL
    (61) FL -> . NL OPERATORS NL
    (62) FL -> . EA OPERATORS EA
    (63) FL -> . NL
    (64) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (65) NL -> . NOT EL
    (47) EA -> . TA
    (48) EA -> . EA PLUS TA
    (49) EA -> . EA MINUS TA
    (54) TA -> . FA
    (55) TA -> . TA MULTIPLY FA
    (56) TA -> . TA DIVISION FA
    (50) FA -> . CONSTANT
    (51) FA -> . ID
    (52) FA -> . MAT
    (53) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (70) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 108
    NOT             shift and go to state 110
    CONSTANT        shift and go to state 32
    ID              shift and go to state 33

    MAT                            shift and go to state 37
    FA                             shift and go to state 35
    TA                             shift and go to state 36
    NL                             shift and go to state 109
    EA                             shift and go to state 112
    TL                             shift and go to state 147
    FL                             shift and go to state 113

state 135

    (40) WHILESTAT -> WHILE OPEN_PARENTH EL CLOSING_PARENTH . IN_S
    (46) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 88

    IN_S                           shift and go to state 148

state 136

    (62) FL -> EA OPERATORS . EA
    (47) EA -> . TA
    (48) EA -> . EA PLUS TA
    (49) EA -> . EA MINUS TA
    (54) TA -> . FA
    (55) TA -> . TA MULTIPLY FA
    (56) TA -> . TA DIVISION FA
    (50) FA -> . CONSTANT
    (51) FA -> . ID
    (52) FA -> . MAT
    (53) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (70) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 32
    ID              shift and go to state 33
    OPEN_PARENTH    shift and go to state 38

    FA                             shift and go to state 35
    TA                             shift and go to state 36
    MAT                            shift and go to state 37
    EA                             shift and go to state 149

state 137

    (43) FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 43 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 43 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 43 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 43 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 43 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 43 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 43 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 43 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 43 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 43 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)


state 138

    (36) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH . IN_S
    (37) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH . IN_S ELSE AUX2 IN_S
    (46) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 88

    IN_S                           shift and go to state 150

state 139

    (42) FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA . SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S
    (48) EA -> EA . PLUS TA
    (49) EA -> EA . MINUS TA

    SEMICOLON       shift and go to state 151
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48


state 140

    (34) PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 34 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 34 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 34 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 34 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 34 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 34 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 34 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 34 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 34 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 34 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)


state 141

    (33) PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 33 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 33 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 33 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 33 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 33 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 33 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 33 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 33 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 33 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 33 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)


state 142

    (41) DOSTAT -> DO IN_S WHILE OPEN_PARENTH EL . CLOSING_PARENTH SEMICOLON
    (58) EL -> EL . OR TL

    CLOSING_PARENTH shift and go to state 152
    OR              shift and go to state 134


state 143

    (35) READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 35 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 35 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 35 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 35 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 35 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 35 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 35 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 35 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 35 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 35 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)


state 144

    (60) TL -> TL AND FL .

    AND             reduce using rule 60 (TL -> TL AND FL .)
    CLOSING_PARENTH reduce using rule 60 (TL -> TL AND FL .)
    OR              reduce using rule 60 (TL -> TL AND FL .)
    NOT_EQUAL       reduce using rule 60 (TL -> TL AND FL .)
    LOWER_THAN      reduce using rule 60 (TL -> TL AND FL .)
    BIGGER_THAN     reduce using rule 60 (TL -> TL AND FL .)
    EQUAL_EQUAL     reduce using rule 60 (TL -> TL AND FL .)
    SEMICOLON       reduce using rule 60 (TL -> TL AND FL .)


state 145

    (64) FL -> OPEN_PARENTH EL CLOSING_PARENTH .

    AND             reduce using rule 64 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    CLOSING_PARENTH reduce using rule 64 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    OR              reduce using rule 64 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    NOT_EQUAL       reduce using rule 64 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    LOWER_THAN      reduce using rule 64 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    BIGGER_THAN     reduce using rule 64 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    EQUAL_EQUAL     reduce using rule 64 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    SEMICOLON       reduce using rule 64 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)


state 146

    (61) FL -> NL OPERATORS NL .

    AND             reduce using rule 61 (FL -> NL OPERATORS NL .)
    CLOSING_PARENTH reduce using rule 61 (FL -> NL OPERATORS NL .)
    OR              reduce using rule 61 (FL -> NL OPERATORS NL .)
    NOT_EQUAL       reduce using rule 61 (FL -> NL OPERATORS NL .)
    LOWER_THAN      reduce using rule 61 (FL -> NL OPERATORS NL .)
    BIGGER_THAN     reduce using rule 61 (FL -> NL OPERATORS NL .)
    EQUAL_EQUAL     reduce using rule 61 (FL -> NL OPERATORS NL .)
    SEMICOLON       reduce using rule 61 (FL -> NL OPERATORS NL .)


state 147

    (58) EL -> EL OR TL .
    (60) TL -> TL . AND FL

  ! shift/reduce conflict for AND resolved as shift
    OR              reduce using rule 58 (EL -> EL OR TL .)
    NOT_EQUAL       reduce using rule 58 (EL -> EL OR TL .)
    LOWER_THAN      reduce using rule 58 (EL -> EL OR TL .)
    BIGGER_THAN     reduce using rule 58 (EL -> EL OR TL .)
    EQUAL_EQUAL     reduce using rule 58 (EL -> EL OR TL .)
    CLOSING_PARENTH reduce using rule 58 (EL -> EL OR TL .)
    SEMICOLON       reduce using rule 58 (EL -> EL OR TL .)
    AND             shift and go to state 125

  ! AND             [ reduce using rule 58 (EL -> EL OR TL .) ]


state 148

    (40) WHILESTAT -> WHILE OPEN_PARENTH EL CLOSING_PARENTH IN_S .

    CLOSING_BRACES  reduce using rule 40 (WHILESTAT -> WHILE OPEN_PARENTH EL CLOSING_PARENTH IN_S .)
    PRINT           reduce using rule 40 (WHILESTAT -> WHILE OPEN_PARENTH EL CLOSING_PARENTH IN_S .)
    READ            reduce using rule 40 (WHILESTAT -> WHILE OPEN_PARENTH EL CLOSING_PARENTH IN_S .)
    IF              reduce using rule 40 (WHILESTAT -> WHILE OPEN_PARENTH EL CLOSING_PARENTH IN_S .)
    WHILE           reduce using rule 40 (WHILESTAT -> WHILE OPEN_PARENTH EL CLOSING_PARENTH IN_S .)
    DO              reduce using rule 40 (WHILESTAT -> WHILE OPEN_PARENTH EL CLOSING_PARENTH IN_S .)
    FOR             reduce using rule 40 (WHILESTAT -> WHILE OPEN_PARENTH EL CLOSING_PARENTH IN_S .)
    ID              reduce using rule 40 (WHILESTAT -> WHILE OPEN_PARENTH EL CLOSING_PARENTH IN_S .)
    INT             reduce using rule 40 (WHILESTAT -> WHILE OPEN_PARENTH EL CLOSING_PARENTH IN_S .)
    DOUBLE          reduce using rule 40 (WHILESTAT -> WHILE OPEN_PARENTH EL CLOSING_PARENTH IN_S .)


state 149

    (62) FL -> EA OPERATORS EA .
    (48) EA -> EA . PLUS TA
    (49) EA -> EA . MINUS TA

    AND             reduce using rule 62 (FL -> EA OPERATORS EA .)
    CLOSING_PARENTH reduce using rule 62 (FL -> EA OPERATORS EA .)
    OR              reduce using rule 62 (FL -> EA OPERATORS EA .)
    NOT_EQUAL       reduce using rule 62 (FL -> EA OPERATORS EA .)
    LOWER_THAN      reduce using rule 62 (FL -> EA OPERATORS EA .)
    BIGGER_THAN     reduce using rule 62 (FL -> EA OPERATORS EA .)
    EQUAL_EQUAL     reduce using rule 62 (FL -> EA OPERATORS EA .)
    SEMICOLON       reduce using rule 62 (FL -> EA OPERATORS EA .)
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48


state 150

    (36) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IN_S .
    (37) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IN_S . ELSE AUX2 IN_S

    CLOSING_BRACES  reduce using rule 36 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IN_S .)
    PRINT           reduce using rule 36 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IN_S .)
    READ            reduce using rule 36 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IN_S .)
    IF              reduce using rule 36 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IN_S .)
    WHILE           reduce using rule 36 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IN_S .)
    DO              reduce using rule 36 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IN_S .)
    FOR             reduce using rule 36 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IN_S .)
    ID              reduce using rule 36 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IN_S .)
    INT             reduce using rule 36 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IN_S .)
    DOUBLE          reduce using rule 36 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IN_S .)
    ELSE            shift and go to state 153


state 151

    (42) FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON . EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S
    (57) EL -> . TL
    (58) EL -> . EL OR TL
    (59) TL -> . FL
    (60) TL -> . TL AND FL
    (61) FL -> . NL OPERATORS NL
    (62) FL -> . EA OPERATORS EA
    (63) FL -> . NL
    (64) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (65) NL -> . NOT EL
    (47) EA -> . TA
    (48) EA -> . EA PLUS TA
    (49) EA -> . EA MINUS TA
    (54) TA -> . FA
    (55) TA -> . TA MULTIPLY FA
    (56) TA -> . TA DIVISION FA
    (50) FA -> . CONSTANT
    (51) FA -> . ID
    (52) FA -> . MAT
    (53) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (70) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 108
    NOT             shift and go to state 110
    CONSTANT        shift and go to state 32
    ID              shift and go to state 33

    MAT                            shift and go to state 37
    NL                             shift and go to state 109
    FA                             shift and go to state 35
    TA                             shift and go to state 36
    EL                             shift and go to state 154
    EA                             shift and go to state 112
    TL                             shift and go to state 107
    FL                             shift and go to state 113

state 152

    (41) DOSTAT -> DO IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 155


state 153

    (37) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IN_S ELSE . AUX2 IN_S
    (39) AUX2 -> . empty
    (38) empty -> .

    OPEN_BRACES     reduce using rule 38 (empty -> .)

    AUX2                           shift and go to state 156
    empty                          shift and go to state 157

state 154

    (42) FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL . SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S
    (58) EL -> EL . OR TL

    SEMICOLON       shift and go to state 158
    OR              shift and go to state 134


state 155

    (41) DOSTAT -> DO IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 41 (DOSTAT -> DO IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 41 (DOSTAT -> DO IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 41 (DOSTAT -> DO IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 41 (DOSTAT -> DO IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 41 (DOSTAT -> DO IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 41 (DOSTAT -> DO IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 41 (DOSTAT -> DO IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 41 (DOSTAT -> DO IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 41 (DOSTAT -> DO IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 41 (DOSTAT -> DO IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)


state 156

    (37) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IN_S ELSE AUX2 . IN_S
    (46) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 88

    IN_S                           shift and go to state 159

state 157

    (39) AUX2 -> empty .

    OPEN_BRACES     reduce using rule 39 (AUX2 -> empty .)


state 158

    (42) FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON . ID EQUAL EA CLOSING_PARENTH IN_S

    ID              shift and go to state 160


state 159

    (37) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IN_S ELSE AUX2 IN_S .

    CLOSING_BRACES  reduce using rule 37 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IN_S ELSE AUX2 IN_S .)
    PRINT           reduce using rule 37 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IN_S ELSE AUX2 IN_S .)
    READ            reduce using rule 37 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IN_S ELSE AUX2 IN_S .)
    IF              reduce using rule 37 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IN_S ELSE AUX2 IN_S .)
    WHILE           reduce using rule 37 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IN_S ELSE AUX2 IN_S .)
    DO              reduce using rule 37 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IN_S ELSE AUX2 IN_S .)
    FOR             reduce using rule 37 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IN_S ELSE AUX2 IN_S .)
    ID              reduce using rule 37 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IN_S ELSE AUX2 IN_S .)
    INT             reduce using rule 37 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IN_S ELSE AUX2 IN_S .)
    DOUBLE          reduce using rule 37 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IN_S ELSE AUX2 IN_S .)


state 160

    (42) FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID . EQUAL EA CLOSING_PARENTH IN_S

    EQUAL           shift and go to state 161


state 161

    (42) FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL . EA CLOSING_PARENTH IN_S
    (47) EA -> . TA
    (48) EA -> . EA PLUS TA
    (49) EA -> . EA MINUS TA
    (54) TA -> . FA
    (55) TA -> . TA MULTIPLY FA
    (56) TA -> . TA DIVISION FA
    (50) FA -> . CONSTANT
    (51) FA -> . ID
    (52) FA -> . MAT
    (53) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (70) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 32
    ID              shift and go to state 33
    OPEN_PARENTH    shift and go to state 38

    MAT                            shift and go to state 37
    FA                             shift and go to state 35
    TA                             shift and go to state 36
    EA                             shift and go to state 162

state 162

    (42) FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA . CLOSING_PARENTH IN_S
    (48) EA -> EA . PLUS TA
    (49) EA -> EA . MINUS TA

    CLOSING_PARENTH shift and go to state 163
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48


state 163

    (42) FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH . IN_S
    (46) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 88

    IN_S                           shift and go to state 164

state 164

    (42) FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S .

    CLOSING_BRACES  reduce using rule 42 (FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S .)
    PRINT           reduce using rule 42 (FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S .)
    READ            reduce using rule 42 (FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S .)
    IF              reduce using rule 42 (FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S .)
    WHILE           reduce using rule 42 (FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S .)
    DO              reduce using rule 42 (FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S .)
    FOR             reduce using rule 42 (FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S .)
    ID              reduce using rule 42 (FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S .)
    INT             reduce using rule 42 (FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S .)
    DOUBLE          reduce using rule 42 (FORSTAT -> FOR OPEN_PARENTH ID EQUAL EA SEMICOLON EL SEMICOLON ID EQUAL EA CLOSING_PARENTH IN_S .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 3 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 54 resolved as shift
WARNING: shift/reduce conflict for READ in state 54 resolved as shift
WARNING: shift/reduce conflict for IF in state 54 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 54 resolved as shift
WARNING: shift/reduce conflict for DO in state 54 resolved as shift
WARNING: shift/reduce conflict for FOR in state 54 resolved as shift
WARNING: shift/reduce conflict for ID in state 54 resolved as shift
WARNING: shift/reduce conflict for INT in state 54 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 54 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 56 resolved as shift
WARNING: shift/reduce conflict for READ in state 56 resolved as shift
WARNING: shift/reduce conflict for IF in state 56 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 56 resolved as shift
WARNING: shift/reduce conflict for DO in state 56 resolved as shift
WARNING: shift/reduce conflict for FOR in state 56 resolved as shift
WARNING: shift/reduce conflict for ID in state 56 resolved as shift
WARNING: shift/reduce conflict for INT in state 56 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 56 resolved as shift
WARNING: shift/reduce conflict for INT in state 72 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 72 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 82 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 82 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 82 resolved as shift
WARNING: shift/reduce conflict for READ in state 82 resolved as shift
WARNING: shift/reduce conflict for IF in state 82 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 82 resolved as shift
WARNING: shift/reduce conflict for DO in state 82 resolved as shift
WARNING: shift/reduce conflict for FOR in state 82 resolved as shift
WARNING: shift/reduce conflict for ID in state 82 resolved as shift
WARNING: shift/reduce conflict for INT in state 82 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 82 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 84 resolved as shift
WARNING: shift/reduce conflict for READ in state 84 resolved as shift
WARNING: shift/reduce conflict for IF in state 84 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 84 resolved as shift
WARNING: shift/reduce conflict for DO in state 84 resolved as shift
WARNING: shift/reduce conflict for FOR in state 84 resolved as shift
WARNING: shift/reduce conflict for ID in state 84 resolved as shift
WARNING: shift/reduce conflict for INT in state 84 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 84 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 85 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 85 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 85 resolved as shift
WARNING: shift/reduce conflict for READ in state 85 resolved as shift
WARNING: shift/reduce conflict for IF in state 85 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 85 resolved as shift
WARNING: shift/reduce conflict for DO in state 85 resolved as shift
WARNING: shift/reduce conflict for FOR in state 85 resolved as shift
WARNING: shift/reduce conflict for ID in state 85 resolved as shift
WARNING: shift/reduce conflict for INT in state 85 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 85 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 88 resolved as shift
WARNING: shift/reduce conflict for READ in state 88 resolved as shift
WARNING: shift/reduce conflict for IF in state 88 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 88 resolved as shift
WARNING: shift/reduce conflict for DO in state 88 resolved as shift
WARNING: shift/reduce conflict for FOR in state 88 resolved as shift
WARNING: shift/reduce conflict for ID in state 88 resolved as shift
WARNING: shift/reduce conflict for INT in state 88 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 88 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 99 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 99 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 99 resolved as shift
WARNING: shift/reduce conflict for READ in state 99 resolved as shift
WARNING: shift/reduce conflict for IF in state 99 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 99 resolved as shift
WARNING: shift/reduce conflict for DO in state 99 resolved as shift
WARNING: shift/reduce conflict for FOR in state 99 resolved as shift
WARNING: shift/reduce conflict for ID in state 99 resolved as shift
WARNING: shift/reduce conflict for INT in state 99 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 99 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 104 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 104 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 104 resolved as shift
WARNING: shift/reduce conflict for READ in state 104 resolved as shift
WARNING: shift/reduce conflict for IF in state 104 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 104 resolved as shift
WARNING: shift/reduce conflict for DO in state 104 resolved as shift
WARNING: shift/reduce conflict for FOR in state 104 resolved as shift
WARNING: shift/reduce conflict for ID in state 104 resolved as shift
WARNING: shift/reduce conflict for INT in state 104 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 104 resolved as shift
WARNING: shift/reduce conflict for AND in state 107 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 109 resolved as shift
WARNING: shift/reduce conflict for LOWER_THAN in state 109 resolved as shift
WARNING: shift/reduce conflict for BIGGER_THAN in state 109 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 109 resolved as shift
WARNING: shift/reduce conflict for OR in state 133 resolved as shift
WARNING: shift/reduce conflict for AND in state 147 resolved as shift
WARNING: reduce/reduce conflict in state 54 resolved using rule (S -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 54
WARNING: reduce/reduce conflict in state 54 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (S -> <empty>) in state 54
WARNING: reduce/reduce conflict in state 56 resolved using rule (S -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 56
WARNING: reduce/reduce conflict in state 56 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (S -> <empty>) in state 56
WARNING: reduce/reduce conflict in state 82 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 82
WARNING: reduce/reduce conflict in state 84 resolved using rule (S -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 84
WARNING: reduce/reduce conflict in state 84 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (S -> <empty>) in state 84
WARNING: reduce/reduce conflict in state 85 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 85
WARNING: reduce/reduce conflict in state 88 resolved using rule (S -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 88
WARNING: reduce/reduce conflict in state 88 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (S -> <empty>) in state 88
WARNING: reduce/reduce conflict in state 99 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 99
WARNING: reduce/reduce conflict in state 104 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 104
WARNING: Rule (STATEMENTS -> <empty>) is never reduced
WARNING: Rule (S -> <empty>) is never reduced
