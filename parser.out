Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> VAR FUNC M
Rule 2     VAR -> TIPO DECLARE SEMICOLON
Rule 3     VAR -> TIPO MAT SEMICOLON
Rule 4     VAR -> VAR TIPO DECLARE SEMICOLON
Rule 5     VAR -> VAR TIPO MAT SEMICOLON
Rule 6     VAR -> <empty>
Rule 7     DECLARE -> ID
Rule 8     DECLARE -> DECLARE COMA ID
Rule 9     DECLARE -> ASSIGN
Rule 10    DECLARE -> DECLARE COMA ASSIGN
Rule 11    ASSIGN -> ID EQUAL EA
Rule 12    ASSIGN -> MAT EQUAL EA
Rule 13    FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3
Rule 14    FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3
Rule 15    FUNC -> empty
Rule 16    SET_ID -> ID
Rule 17    DECLARE_FUNC -> empty
Rule 18    RETURN -> empty
Rule 19    AUX_FUNC -> empty
Rule 20    M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES
Rule 21    TIPO -> INT
Rule 22    TIPO -> DOUBLE
Rule 23    S -> STATEMENTS
Rule 24    S -> S STATEMENTS
Rule 25    S -> <empty>
Rule 26    STATEMENTS -> VAR
Rule 27    STATEMENTS -> IDSTAT
Rule 28    STATEMENTS -> PRINTSTAT
Rule 29    STATEMENTS -> READSTAT
Rule 30    STATEMENTS -> IFSTAT
Rule 31    STATEMENTS -> WHILESTAT
Rule 32    STATEMENTS -> DOSTAT
Rule 33    STATEMENTS -> FORSTAT
Rule 34    STATEMENTS -> FUNCSTAT
Rule 35    STATEMENTS -> INC_STAT
Rule 36    STATEMENTS -> <empty>
Rule 37    IDSTAT -> ASSIGN SEMICOLON
Rule 38    PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
Rule 39    PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
Rule 40    READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
Rule 41    IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
Rule 42    IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
Rule 43    IF_AUX1 -> empty
Rule 44    IF_AUX2 -> empty
Rule 45    IF_AUX3 -> empty
Rule 46    empty -> <empty>
Rule 47    WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
Rule 48    WHILE_AUX_1 -> empty
Rule 49    WHILE_AUX_2 -> empty
Rule 50    DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
Rule 51    FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
Rule 52    FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
Rule 53    INC_STAT -> ID PLUSPLUS SEMICOLON
Rule 54    INC_STAT -> ID MINUSMINUS SEMICOLON
Rule 55    IN_S -> OPEN_BRACES S CLOSING_BRACES
Rule 56    EA -> TA
Rule 57    EA -> EA PLUS TA
Rule 58    EA -> EA MINUS TA
Rule 59    FA -> CONSTANT
Rule 60    FA -> ID
Rule 61    FA -> MAT
Rule 62    FA -> OPEN_PARENTH EA CLOSING_PARENTH
Rule 63    TA -> FA
Rule 64    TA -> TA MULTIPLY FA
Rule 65    TA -> TA DIVISION FA
Rule 66    EL -> TL
Rule 67    EL -> EL OR TL
Rule 68    TL -> FL
Rule 69    TL -> TL AND FL
Rule 70    FL -> NL OPERATORS NL
Rule 71    FL -> EA OPERATORS EA
Rule 72    FL -> NL
Rule 73    FL -> OPEN_PARENTH EL CLOSING_PARENTH
Rule 74    NL -> NOT EL
Rule 75    OPERATORS -> NOT_EQUAL
Rule 76    OPERATORS -> LOWER_THAN
Rule 77    OPERATORS -> BIGGER_THAN
Rule 78    OPERATORS -> EQUAL_EQUAL
Rule 79    MAT -> ID MAT_BRACKET
Rule 80    MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET
Rule 81    MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET
Rule 82    MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET
Rule 83    MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET

Terminals, with rules where they appear

AND                  : 69
BIGGER_THAN          : 77
CLOSING_BRACES       : 13 14 20 55
CLOSING_BRACKET      : 80 81 82 83
CLOSING_PARENTH      : 13 14 20 38 39 40 41 42 47 50 51 52 62 73
COMA                 : 8 10
COMMENT              : 
CONSTANT             : 59 80 81
DIVISION             : 65
DO                   : 50
DOUBLE               : 22
ELSE                 : 42
EQUAL                : 11 12
EQUAL_EQUAL          : 78
FOR                  : 51
FUNCTION             : 13 14
ID                   : 7 8 11 16 52 53 54 60 79 82 83
IF                   : 41 42
INT                  : 21
LOWER_THAN           : 76
MAIN                 : 20
MINUS                : 58
MINUSMINUS           : 54
MULTIPLY             : 64
NOT                  : 74
NOT_EQUAL            : 75
OPEN_BRACES          : 13 14 20 55
OPEN_BRACKET         : 80 81 82 83
OPEN_PARENTH         : 13 14 20 38 39 40 41 42 47 50 51 52 62 73
OR                   : 67
PLUS                 : 57
PLUSPLUS             : 53
PRINT                : 38 39
READ                 : 40
SEMICOLON            : 2 3 4 5 37 38 39 40 50 51 51 52 53 54
STRING               : 39
WHILE                : 47 50
error                : 

Nonterminals, with rules where they appear

ASSIGN               : 9 10 37 51 51
AUX_FUNC             : 13 14
DECLARE              : 2 4 8 10
DECLARE_FUNC         : 13 14
DOSTAT               : 32
EA                   : 11 12 38 40 57 58 62 71 71
EL                   : 41 42 47 50 51 67 73 74
FA                   : 63 64 65
FL                   : 68 69
FORSTAT              : 33
FUNC                 : 1 14
FUNCSTAT             : 34
IDSTAT               : 27
IFSTAT               : 30
IF_AUX1              : 41 42
IF_AUX2              : 42
IF_AUX3              : 13 14 41 42
INC_STAT             : 35
IN_S                 : 41 42 42 47 50 51
M                    : 1
MAT                  : 3 5 12 61
MAT_BRACKET          : 79 81 83
NL                   : 70 70 72
OPERATORS            : 70 71
PRINTSTAT            : 28
PROGRAMA             : 0
READSTAT             : 29
RETURN               : 13 14
S                    : 13 14 20 24 55
SET_ID               : 13 14
STATEMENTS           : 23 24
TA                   : 56 57 58 64 65
TIPO                 : 2 3 4 5
TL                   : 66 67 69
VAR                  : 1 4 5 26
WHILESTAT            : 31
WHILE_AUX_1          : 47 50 51
WHILE_AUX_2          : 47 51
empty                : 15 17 18 19 43 44 45 48 49

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . VAR FUNC M
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    FUNCTION        reduce using rule 6 (VAR -> .)
    MAIN            reduce using rule 6 (VAR -> .)
    INT             shift and go to state 4
    DOUBLE          shift and go to state 1

  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]

    PROGRAMA                       shift and go to state 2
    TIPO                           shift and go to state 3
    VAR                            shift and go to state 5

state 1

    (22) TIPO -> DOUBLE .

    ID              reduce using rule 22 (TIPO -> DOUBLE .)


state 2

    (0) S' -> PROGRAMA .



state 3

    (2) VAR -> TIPO . DECLARE SEMICOLON
    (3) VAR -> TIPO . MAT SEMICOLON
    (7) DECLARE -> . ID
    (8) DECLARE -> . DECLARE COMA ID
    (9) DECLARE -> . ASSIGN
    (10) DECLARE -> . DECLARE COMA ASSIGN
    (79) MAT -> . ID MAT_BRACKET
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA

    ID              shift and go to state 7

    ASSIGN                         shift and go to state 6
    DECLARE                        shift and go to state 8
    MAT                            shift and go to state 9

state 4

    (21) TIPO -> INT .

    ID              reduce using rule 21 (TIPO -> INT .)


state 5

    (1) PROGRAMA -> VAR . FUNC M
    (4) VAR -> VAR . TIPO DECLARE SEMICOLON
    (5) VAR -> VAR . TIPO MAT SEMICOLON
    (13) FUNC -> . FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3
    (14) FUNC -> . FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3
    (15) FUNC -> . empty
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE
    (46) empty -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 13
    INT             shift and go to state 4
    DOUBLE          shift and go to state 1
    MAIN            reduce using rule 46 (empty -> .)

  ! FUNCTION        [ reduce using rule 46 (empty -> .) ]

    empty                          shift and go to state 10
    FUNC                           shift and go to state 11
    TIPO                           shift and go to state 12

state 6

    (9) DECLARE -> ASSIGN .

    SEMICOLON       reduce using rule 9 (DECLARE -> ASSIGN .)
    COMA            reduce using rule 9 (DECLARE -> ASSIGN .)


state 7

    (7) DECLARE -> ID .
    (79) MAT -> ID . MAT_BRACKET
    (11) ASSIGN -> ID . EQUAL EA
    (80) MAT_BRACKET -> . OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (81) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (82) MAT_BRACKET -> . OPEN_BRACKET ID CLOSING_BRACKET
    (83) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET

    SEMICOLON       reduce using rule 7 (DECLARE -> ID .)
    COMA            reduce using rule 7 (DECLARE -> ID .)
    EQUAL           shift and go to state 14
    OPEN_BRACKET    shift and go to state 16

    MAT_BRACKET                    shift and go to state 15

state 8

    (2) VAR -> TIPO DECLARE . SEMICOLON
    (8) DECLARE -> DECLARE . COMA ID
    (10) DECLARE -> DECLARE . COMA ASSIGN

    SEMICOLON       shift and go to state 18
    COMA            shift and go to state 17


state 9

    (3) VAR -> TIPO MAT . SEMICOLON
    (12) ASSIGN -> MAT . EQUAL EA

    SEMICOLON       shift and go to state 19
    EQUAL           shift and go to state 20


state 10

    (15) FUNC -> empty .

    MAIN            reduce using rule 15 (FUNC -> empty .)
    FUNCTION        reduce using rule 15 (FUNC -> empty .)


state 11

    (1) PROGRAMA -> VAR FUNC . M
    (14) FUNC -> FUNC . AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3
    (20) M -> . MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES
    (19) AUX_FUNC -> . empty
    (46) empty -> .

    MAIN            shift and go to state 24
    FUNCTION        reduce using rule 46 (empty -> .)

    M                              shift and go to state 21
    AUX_FUNC                       shift and go to state 23
    empty                          shift and go to state 22

state 12

    (4) VAR -> VAR TIPO . DECLARE SEMICOLON
    (5) VAR -> VAR TIPO . MAT SEMICOLON
    (7) DECLARE -> . ID
    (8) DECLARE -> . DECLARE COMA ID
    (9) DECLARE -> . ASSIGN
    (10) DECLARE -> . DECLARE COMA ASSIGN
    (79) MAT -> . ID MAT_BRACKET
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA

    ID              shift and go to state 7

    ASSIGN                         shift and go to state 6
    DECLARE                        shift and go to state 25
    MAT                            shift and go to state 26

state 13

    (13) FUNC -> FUNCTION . AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3
    (19) AUX_FUNC -> . empty
    (46) empty -> .

    ID              reduce using rule 46 (empty -> .)

    empty                          shift and go to state 22
    AUX_FUNC                       shift and go to state 27

state 14

    (11) ASSIGN -> ID EQUAL . EA
    (56) EA -> . TA
    (57) EA -> . EA PLUS TA
    (58) EA -> . EA MINUS TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 29
    ID              shift and go to state 28
    OPEN_PARENTH    shift and go to state 34

    EA                             shift and go to state 32
    FA                             shift and go to state 30
    MAT                            shift and go to state 31
    TA                             shift and go to state 33

state 15

    (79) MAT -> ID MAT_BRACKET .
    (81) MAT_BRACKET -> MAT_BRACKET . OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (83) MAT_BRACKET -> MAT_BRACKET . OPEN_BRACKET ID CLOSING_BRACKET

    EQUAL           reduce using rule 79 (MAT -> ID MAT_BRACKET .)
    MULTIPLY        reduce using rule 79 (MAT -> ID MAT_BRACKET .)
    DIVISION        reduce using rule 79 (MAT -> ID MAT_BRACKET .)
    PLUS            reduce using rule 79 (MAT -> ID MAT_BRACKET .)
    MINUS           reduce using rule 79 (MAT -> ID MAT_BRACKET .)
    NOT_EQUAL       reduce using rule 79 (MAT -> ID MAT_BRACKET .)
    LOWER_THAN      reduce using rule 79 (MAT -> ID MAT_BRACKET .)
    BIGGER_THAN     reduce using rule 79 (MAT -> ID MAT_BRACKET .)
    EQUAL_EQUAL     reduce using rule 79 (MAT -> ID MAT_BRACKET .)
    SEMICOLON       reduce using rule 79 (MAT -> ID MAT_BRACKET .)
    COMA            reduce using rule 79 (MAT -> ID MAT_BRACKET .)
    CLOSING_PARENTH reduce using rule 79 (MAT -> ID MAT_BRACKET .)
    AND             reduce using rule 79 (MAT -> ID MAT_BRACKET .)
    OR              reduce using rule 79 (MAT -> ID MAT_BRACKET .)
    OPEN_BRACKET    shift and go to state 35


state 16

    (80) MAT_BRACKET -> OPEN_BRACKET . CONSTANT CLOSING_BRACKET
    (82) MAT_BRACKET -> OPEN_BRACKET . ID CLOSING_BRACKET

    CONSTANT        shift and go to state 36
    ID              shift and go to state 37


state 17

    (8) DECLARE -> DECLARE COMA . ID
    (10) DECLARE -> DECLARE COMA . ASSIGN
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (79) MAT -> . ID MAT_BRACKET

    ID              shift and go to state 39

    ASSIGN                         shift and go to state 38
    MAT                            shift and go to state 40

state 18

    (2) VAR -> TIPO DECLARE SEMICOLON .

    FUNCTION        reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    INT             reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    DOUBLE          reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    MAIN            reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    CLOSING_BRACES  reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    PRINT           reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    READ            reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    IF              reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    WHILE           reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    DO              reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    FOR             reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    ID              reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)


state 19

    (3) VAR -> TIPO MAT SEMICOLON .

    FUNCTION        reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    INT             reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    DOUBLE          reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    MAIN            reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    CLOSING_BRACES  reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    PRINT           reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    READ            reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    IF              reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    WHILE           reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    DO              reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    FOR             reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    ID              reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)


state 20

    (12) ASSIGN -> MAT EQUAL . EA
    (56) EA -> . TA
    (57) EA -> . EA PLUS TA
    (58) EA -> . EA MINUS TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 29
    ID              shift and go to state 28
    OPEN_PARENTH    shift and go to state 34

    EA                             shift and go to state 41
    FA                             shift and go to state 30
    TA                             shift and go to state 33
    MAT                            shift and go to state 31

state 21

    (1) PROGRAMA -> VAR FUNC M .

    $end            reduce using rule 1 (PROGRAMA -> VAR FUNC M .)


state 22

    (19) AUX_FUNC -> empty .

    FUNCTION        reduce using rule 19 (AUX_FUNC -> empty .)
    ID              reduce using rule 19 (AUX_FUNC -> empty .)


state 23

    (14) FUNC -> FUNC AUX_FUNC . FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3

    FUNCTION        shift and go to state 42


state 24

    (20) M -> MAIN . OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES

    OPEN_PARENTH    shift and go to state 43


state 25

    (4) VAR -> VAR TIPO DECLARE . SEMICOLON
    (8) DECLARE -> DECLARE . COMA ID
    (10) DECLARE -> DECLARE . COMA ASSIGN

    SEMICOLON       shift and go to state 44
    COMA            shift and go to state 17


state 26

    (5) VAR -> VAR TIPO MAT . SEMICOLON
    (12) ASSIGN -> MAT . EQUAL EA

    SEMICOLON       shift and go to state 45
    EQUAL           shift and go to state 20


state 27

    (13) FUNC -> FUNCTION AUX_FUNC . SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3
    (16) SET_ID -> . ID

    ID              shift and go to state 47

    SET_ID                         shift and go to state 46

state 28

    (60) FA -> ID .
    (79) MAT -> ID . MAT_BRACKET
    (80) MAT_BRACKET -> . OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (81) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (82) MAT_BRACKET -> . OPEN_BRACKET ID CLOSING_BRACKET
    (83) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET

    MULTIPLY        reduce using rule 60 (FA -> ID .)
    DIVISION        reduce using rule 60 (FA -> ID .)
    PLUS            reduce using rule 60 (FA -> ID .)
    MINUS           reduce using rule 60 (FA -> ID .)
    NOT_EQUAL       reduce using rule 60 (FA -> ID .)
    LOWER_THAN      reduce using rule 60 (FA -> ID .)
    BIGGER_THAN     reduce using rule 60 (FA -> ID .)
    EQUAL_EQUAL     reduce using rule 60 (FA -> ID .)
    SEMICOLON       reduce using rule 60 (FA -> ID .)
    COMA            reduce using rule 60 (FA -> ID .)
    CLOSING_PARENTH reduce using rule 60 (FA -> ID .)
    AND             reduce using rule 60 (FA -> ID .)
    OR              reduce using rule 60 (FA -> ID .)
    OPEN_BRACKET    shift and go to state 16

    MAT_BRACKET                    shift and go to state 15

state 29

    (59) FA -> CONSTANT .

    MULTIPLY        reduce using rule 59 (FA -> CONSTANT .)
    DIVISION        reduce using rule 59 (FA -> CONSTANT .)
    PLUS            reduce using rule 59 (FA -> CONSTANT .)
    MINUS           reduce using rule 59 (FA -> CONSTANT .)
    NOT_EQUAL       reduce using rule 59 (FA -> CONSTANT .)
    LOWER_THAN      reduce using rule 59 (FA -> CONSTANT .)
    BIGGER_THAN     reduce using rule 59 (FA -> CONSTANT .)
    EQUAL_EQUAL     reduce using rule 59 (FA -> CONSTANT .)
    SEMICOLON       reduce using rule 59 (FA -> CONSTANT .)
    COMA            reduce using rule 59 (FA -> CONSTANT .)
    CLOSING_PARENTH reduce using rule 59 (FA -> CONSTANT .)
    AND             reduce using rule 59 (FA -> CONSTANT .)
    OR              reduce using rule 59 (FA -> CONSTANT .)


state 30

    (63) TA -> FA .

    MULTIPLY        reduce using rule 63 (TA -> FA .)
    DIVISION        reduce using rule 63 (TA -> FA .)
    CLOSING_PARENTH reduce using rule 63 (TA -> FA .)
    PLUS            reduce using rule 63 (TA -> FA .)
    MINUS           reduce using rule 63 (TA -> FA .)
    NOT_EQUAL       reduce using rule 63 (TA -> FA .)
    LOWER_THAN      reduce using rule 63 (TA -> FA .)
    BIGGER_THAN     reduce using rule 63 (TA -> FA .)
    EQUAL_EQUAL     reduce using rule 63 (TA -> FA .)
    AND             reduce using rule 63 (TA -> FA .)
    OR              reduce using rule 63 (TA -> FA .)
    SEMICOLON       reduce using rule 63 (TA -> FA .)
    COMA            reduce using rule 63 (TA -> FA .)


state 31

    (61) FA -> MAT .

    MULTIPLY        reduce using rule 61 (FA -> MAT .)
    DIVISION        reduce using rule 61 (FA -> MAT .)
    PLUS            reduce using rule 61 (FA -> MAT .)
    MINUS           reduce using rule 61 (FA -> MAT .)
    NOT_EQUAL       reduce using rule 61 (FA -> MAT .)
    LOWER_THAN      reduce using rule 61 (FA -> MAT .)
    BIGGER_THAN     reduce using rule 61 (FA -> MAT .)
    EQUAL_EQUAL     reduce using rule 61 (FA -> MAT .)
    SEMICOLON       reduce using rule 61 (FA -> MAT .)
    COMA            reduce using rule 61 (FA -> MAT .)
    CLOSING_PARENTH reduce using rule 61 (FA -> MAT .)
    AND             reduce using rule 61 (FA -> MAT .)
    OR              reduce using rule 61 (FA -> MAT .)


state 32

    (11) ASSIGN -> ID EQUAL EA .
    (57) EA -> EA . PLUS TA
    (58) EA -> EA . MINUS TA

    SEMICOLON       reduce using rule 11 (ASSIGN -> ID EQUAL EA .)
    COMA            reduce using rule 11 (ASSIGN -> ID EQUAL EA .)
    CLOSING_PARENTH reduce using rule 11 (ASSIGN -> ID EQUAL EA .)
    PLUS            shift and go to state 49
    MINUS           shift and go to state 48


state 33

    (56) EA -> TA .
    (64) TA -> TA . MULTIPLY FA
    (65) TA -> TA . DIVISION FA

    PLUS            reduce using rule 56 (EA -> TA .)
    MINUS           reduce using rule 56 (EA -> TA .)
    SEMICOLON       reduce using rule 56 (EA -> TA .)
    COMA            reduce using rule 56 (EA -> TA .)
    CLOSING_PARENTH reduce using rule 56 (EA -> TA .)
    NOT_EQUAL       reduce using rule 56 (EA -> TA .)
    LOWER_THAN      reduce using rule 56 (EA -> TA .)
    BIGGER_THAN     reduce using rule 56 (EA -> TA .)
    EQUAL_EQUAL     reduce using rule 56 (EA -> TA .)
    AND             reduce using rule 56 (EA -> TA .)
    OR              reduce using rule 56 (EA -> TA .)
    MULTIPLY        shift and go to state 51
    DIVISION        shift and go to state 50


state 34

    (62) FA -> OPEN_PARENTH . EA CLOSING_PARENTH
    (56) EA -> . TA
    (57) EA -> . EA PLUS TA
    (58) EA -> . EA MINUS TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 29
    ID              shift and go to state 28
    OPEN_PARENTH    shift and go to state 34

    EA                             shift and go to state 52
    FA                             shift and go to state 30
    MAT                            shift and go to state 31
    TA                             shift and go to state 33

state 35

    (81) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET . CONSTANT CLOSING_BRACKET
    (83) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET . ID CLOSING_BRACKET

    CONSTANT        shift and go to state 53
    ID              shift and go to state 54


state 36

    (80) MAT_BRACKET -> OPEN_BRACKET CONSTANT . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 55


state 37

    (82) MAT_BRACKET -> OPEN_BRACKET ID . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 56


state 38

    (10) DECLARE -> DECLARE COMA ASSIGN .

    SEMICOLON       reduce using rule 10 (DECLARE -> DECLARE COMA ASSIGN .)
    COMA            reduce using rule 10 (DECLARE -> DECLARE COMA ASSIGN .)


state 39

    (8) DECLARE -> DECLARE COMA ID .
    (11) ASSIGN -> ID . EQUAL EA
    (79) MAT -> ID . MAT_BRACKET
    (80) MAT_BRACKET -> . OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (81) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (82) MAT_BRACKET -> . OPEN_BRACKET ID CLOSING_BRACKET
    (83) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET

    SEMICOLON       reduce using rule 8 (DECLARE -> DECLARE COMA ID .)
    COMA            reduce using rule 8 (DECLARE -> DECLARE COMA ID .)
    EQUAL           shift and go to state 14
    OPEN_BRACKET    shift and go to state 16

    MAT_BRACKET                    shift and go to state 15

state 40

    (12) ASSIGN -> MAT . EQUAL EA

    EQUAL           shift and go to state 20


state 41

    (12) ASSIGN -> MAT EQUAL EA .
    (57) EA -> EA . PLUS TA
    (58) EA -> EA . MINUS TA

    SEMICOLON       reduce using rule 12 (ASSIGN -> MAT EQUAL EA .)
    COMA            reduce using rule 12 (ASSIGN -> MAT EQUAL EA .)
    CLOSING_PARENTH reduce using rule 12 (ASSIGN -> MAT EQUAL EA .)
    PLUS            shift and go to state 49
    MINUS           shift and go to state 48


state 42

    (14) FUNC -> FUNC AUX_FUNC FUNCTION . SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3
    (16) SET_ID -> . ID

    ID              shift and go to state 47

    SET_ID                         shift and go to state 57

state 43

    (20) M -> MAIN OPEN_PARENTH . CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES

    CLOSING_PARENTH shift and go to state 58


state 44

    (4) VAR -> VAR TIPO DECLARE SEMICOLON .

    FUNCTION        reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    INT             reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    DOUBLE          reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    MAIN            reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    CLOSING_BRACES  reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    PRINT           reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    READ            reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    IF              reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    WHILE           reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    DO              reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    FOR             reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    ID              reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)


state 45

    (5) VAR -> VAR TIPO MAT SEMICOLON .

    FUNCTION        reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    INT             reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    DOUBLE          reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    MAIN            reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    CLOSING_BRACES  reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    PRINT           reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    READ            reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    IF              reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    WHILE           reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    DO              reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    FOR             reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    ID              reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)


state 46

    (13) FUNC -> FUNCTION AUX_FUNC SET_ID . OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3

    OPEN_PARENTH    shift and go to state 59


state 47

    (16) SET_ID -> ID .

    OPEN_PARENTH    reduce using rule 16 (SET_ID -> ID .)


state 48

    (58) EA -> EA MINUS . TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 29
    ID              shift and go to state 28
    OPEN_PARENTH    shift and go to state 34

    FA                             shift and go to state 30
    MAT                            shift and go to state 31
    TA                             shift and go to state 60

state 49

    (57) EA -> EA PLUS . TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 29
    ID              shift and go to state 28
    OPEN_PARENTH    shift and go to state 34

    FA                             shift and go to state 30
    MAT                            shift and go to state 31
    TA                             shift and go to state 61

state 50

    (65) TA -> TA DIVISION . FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 29
    ID              shift and go to state 28
    OPEN_PARENTH    shift and go to state 34

    FA                             shift and go to state 62
    MAT                            shift and go to state 31

state 51

    (64) TA -> TA MULTIPLY . FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 29
    ID              shift and go to state 28
    OPEN_PARENTH    shift and go to state 34

    FA                             shift and go to state 63
    MAT                            shift and go to state 31

state 52

    (62) FA -> OPEN_PARENTH EA . CLOSING_PARENTH
    (57) EA -> EA . PLUS TA
    (58) EA -> EA . MINUS TA

    CLOSING_PARENTH shift and go to state 64
    PLUS            shift and go to state 49
    MINUS           shift and go to state 48


state 53

    (81) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 65


state 54

    (83) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 66


state 55

    (80) MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .

    OPEN_BRACKET    reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    EQUAL           reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    MULTIPLY        reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    DIVISION        reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    PLUS            reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    MINUS           reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    COMA            reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    CLOSING_PARENTH reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    NOT_EQUAL       reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    LOWER_THAN      reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    BIGGER_THAN     reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    EQUAL_EQUAL     reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    AND             reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    OR              reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET CONSTANT CLOSING_BRACKET .)


state 56

    (82) MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .

    OPEN_BRACKET    reduce using rule 82 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    EQUAL           reduce using rule 82 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    MULTIPLY        reduce using rule 82 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    DIVISION        reduce using rule 82 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    PLUS            reduce using rule 82 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    MINUS           reduce using rule 82 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 82 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    COMA            reduce using rule 82 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    CLOSING_PARENTH reduce using rule 82 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    NOT_EQUAL       reduce using rule 82 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    LOWER_THAN      reduce using rule 82 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    BIGGER_THAN     reduce using rule 82 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    EQUAL_EQUAL     reduce using rule 82 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    AND             reduce using rule 82 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)
    OR              reduce using rule 82 (MAT_BRACKET -> OPEN_BRACKET ID CLOSING_BRACKET .)


state 57

    (14) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID . OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3

    OPEN_PARENTH    shift and go to state 67


state 58

    (20) M -> MAIN OPEN_PARENTH CLOSING_PARENTH . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 68


state 59

    (13) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH . CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3

    CLOSING_PARENTH shift and go to state 69


state 60

    (58) EA -> EA MINUS TA .
    (64) TA -> TA . MULTIPLY FA
    (65) TA -> TA . DIVISION FA

    PLUS            reduce using rule 58 (EA -> EA MINUS TA .)
    MINUS           reduce using rule 58 (EA -> EA MINUS TA .)
    SEMICOLON       reduce using rule 58 (EA -> EA MINUS TA .)
    COMA            reduce using rule 58 (EA -> EA MINUS TA .)
    CLOSING_PARENTH reduce using rule 58 (EA -> EA MINUS TA .)
    NOT_EQUAL       reduce using rule 58 (EA -> EA MINUS TA .)
    LOWER_THAN      reduce using rule 58 (EA -> EA MINUS TA .)
    BIGGER_THAN     reduce using rule 58 (EA -> EA MINUS TA .)
    EQUAL_EQUAL     reduce using rule 58 (EA -> EA MINUS TA .)
    AND             reduce using rule 58 (EA -> EA MINUS TA .)
    OR              reduce using rule 58 (EA -> EA MINUS TA .)
    MULTIPLY        shift and go to state 51
    DIVISION        shift and go to state 50


state 61

    (57) EA -> EA PLUS TA .
    (64) TA -> TA . MULTIPLY FA
    (65) TA -> TA . DIVISION FA

    PLUS            reduce using rule 57 (EA -> EA PLUS TA .)
    MINUS           reduce using rule 57 (EA -> EA PLUS TA .)
    SEMICOLON       reduce using rule 57 (EA -> EA PLUS TA .)
    COMA            reduce using rule 57 (EA -> EA PLUS TA .)
    CLOSING_PARENTH reduce using rule 57 (EA -> EA PLUS TA .)
    NOT_EQUAL       reduce using rule 57 (EA -> EA PLUS TA .)
    LOWER_THAN      reduce using rule 57 (EA -> EA PLUS TA .)
    BIGGER_THAN     reduce using rule 57 (EA -> EA PLUS TA .)
    EQUAL_EQUAL     reduce using rule 57 (EA -> EA PLUS TA .)
    AND             reduce using rule 57 (EA -> EA PLUS TA .)
    OR              reduce using rule 57 (EA -> EA PLUS TA .)
    MULTIPLY        shift and go to state 51
    DIVISION        shift and go to state 50


state 62

    (65) TA -> TA DIVISION FA .

    MULTIPLY        reduce using rule 65 (TA -> TA DIVISION FA .)
    DIVISION        reduce using rule 65 (TA -> TA DIVISION FA .)
    CLOSING_PARENTH reduce using rule 65 (TA -> TA DIVISION FA .)
    PLUS            reduce using rule 65 (TA -> TA DIVISION FA .)
    MINUS           reduce using rule 65 (TA -> TA DIVISION FA .)
    NOT_EQUAL       reduce using rule 65 (TA -> TA DIVISION FA .)
    LOWER_THAN      reduce using rule 65 (TA -> TA DIVISION FA .)
    BIGGER_THAN     reduce using rule 65 (TA -> TA DIVISION FA .)
    EQUAL_EQUAL     reduce using rule 65 (TA -> TA DIVISION FA .)
    AND             reduce using rule 65 (TA -> TA DIVISION FA .)
    OR              reduce using rule 65 (TA -> TA DIVISION FA .)
    SEMICOLON       reduce using rule 65 (TA -> TA DIVISION FA .)
    COMA            reduce using rule 65 (TA -> TA DIVISION FA .)


state 63

    (64) TA -> TA MULTIPLY FA .

    MULTIPLY        reduce using rule 64 (TA -> TA MULTIPLY FA .)
    DIVISION        reduce using rule 64 (TA -> TA MULTIPLY FA .)
    CLOSING_PARENTH reduce using rule 64 (TA -> TA MULTIPLY FA .)
    PLUS            reduce using rule 64 (TA -> TA MULTIPLY FA .)
    MINUS           reduce using rule 64 (TA -> TA MULTIPLY FA .)
    NOT_EQUAL       reduce using rule 64 (TA -> TA MULTIPLY FA .)
    LOWER_THAN      reduce using rule 64 (TA -> TA MULTIPLY FA .)
    BIGGER_THAN     reduce using rule 64 (TA -> TA MULTIPLY FA .)
    EQUAL_EQUAL     reduce using rule 64 (TA -> TA MULTIPLY FA .)
    AND             reduce using rule 64 (TA -> TA MULTIPLY FA .)
    OR              reduce using rule 64 (TA -> TA MULTIPLY FA .)
    SEMICOLON       reduce using rule 64 (TA -> TA MULTIPLY FA .)
    COMA            reduce using rule 64 (TA -> TA MULTIPLY FA .)


state 64

    (62) FA -> OPEN_PARENTH EA CLOSING_PARENTH .

    MULTIPLY        reduce using rule 62 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    DIVISION        reduce using rule 62 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    PLUS            reduce using rule 62 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    MINUS           reduce using rule 62 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    NOT_EQUAL       reduce using rule 62 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    LOWER_THAN      reduce using rule 62 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    BIGGER_THAN     reduce using rule 62 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    EQUAL_EQUAL     reduce using rule 62 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    SEMICOLON       reduce using rule 62 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    COMA            reduce using rule 62 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    CLOSING_PARENTH reduce using rule 62 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    AND             reduce using rule 62 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    OR              reduce using rule 62 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)


state 65

    (81) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .

    OPEN_BRACKET    reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    EQUAL           reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    MULTIPLY        reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    DIVISION        reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    PLUS            reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    MINUS           reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    COMA            reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    CLOSING_PARENTH reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    NOT_EQUAL       reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    LOWER_THAN      reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    BIGGER_THAN     reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    EQUAL_EQUAL     reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    AND             reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)
    OR              reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET .)


state 66

    (83) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .

    OPEN_BRACKET    reduce using rule 83 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    EQUAL           reduce using rule 83 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    MULTIPLY        reduce using rule 83 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    DIVISION        reduce using rule 83 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    PLUS            reduce using rule 83 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    MINUS           reduce using rule 83 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 83 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    COMA            reduce using rule 83 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    CLOSING_PARENTH reduce using rule 83 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    NOT_EQUAL       reduce using rule 83 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    LOWER_THAN      reduce using rule 83 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    BIGGER_THAN     reduce using rule 83 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    EQUAL_EQUAL     reduce using rule 83 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    AND             reduce using rule 83 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)
    OR              reduce using rule 83 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET .)


state 67

    (14) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH . CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3

    CLOSING_PARENTH shift and go to state 70


state 68

    (20) M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES . S CLOSING_BRACES
    (23) S -> . STATEMENTS
    (24) S -> . S STATEMENTS
    (25) S -> .
    (26) STATEMENTS -> . VAR
    (27) STATEMENTS -> . IDSTAT
    (28) STATEMENTS -> . PRINTSTAT
    (29) STATEMENTS -> . READSTAT
    (30) STATEMENTS -> . IFSTAT
    (31) STATEMENTS -> . WHILESTAT
    (32) STATEMENTS -> . DOSTAT
    (33) STATEMENTS -> . FORSTAT
    (34) STATEMENTS -> . FUNCSTAT
    (35) STATEMENTS -> . INC_STAT
    (36) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (37) IDSTAT -> . ASSIGN SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (39) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (40) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (47) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (50) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (51) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (52) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (53) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (54) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (79) MAT -> . ID MAT_BRACKET

  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for READ resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for IF resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for DO resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for FOR resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for ID resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 6 (VAR -> .)
    PRINT           shift and go to state 88
    READ            shift and go to state 81
    IF              shift and go to state 74
    WHILE           shift and go to state 82
    DO              shift and go to state 79
    FOR             shift and go to state 80
    ID              shift and go to state 90
    INT             shift and go to state 4
    DOUBLE          shift and go to state 1

  ! CLOSING_BRACES  [ reduce using rule 25 (S -> .) ]
  ! PRINT           [ reduce using rule 25 (S -> .) ]
  ! READ            [ reduce using rule 25 (S -> .) ]
  ! IF              [ reduce using rule 25 (S -> .) ]
  ! WHILE           [ reduce using rule 25 (S -> .) ]
  ! DO              [ reduce using rule 25 (S -> .) ]
  ! FOR             [ reduce using rule 25 (S -> .) ]
  ! ID              [ reduce using rule 25 (S -> .) ]
  ! INT             [ reduce using rule 25 (S -> .) ]
  ! DOUBLE          [ reduce using rule 25 (S -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 36 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 36 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    INC_STAT                       shift and go to state 71
    PRINTSTAT                      shift and go to state 85
    ASSIGN                         shift and go to state 83
    FUNCSTAT                       shift and go to state 77
    DOSTAT                         shift and go to state 76
    IFSTAT                         shift and go to state 72
    S                              shift and go to state 75
    FORSTAT                        shift and go to state 86
    IDSTAT                         shift and go to state 87
    READSTAT                       shift and go to state 84
    VAR                            shift and go to state 78
    MAT                            shift and go to state 40
    TIPO                           shift and go to state 3
    WHILESTAT                      shift and go to state 89
    STATEMENTS                     shift and go to state 73

state 69

    (13) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH . DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3
    (17) DECLARE_FUNC -> . empty
    (46) empty -> .

    OPEN_BRACES     reduce using rule 46 (empty -> .)

    DECLARE_FUNC                   shift and go to state 92
    empty                          shift and go to state 91

state 70

    (14) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH . OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3

    OPEN_BRACES     shift and go to state 93


state 71

    (35) STATEMENTS -> INC_STAT .

    CLOSING_BRACES  reduce using rule 35 (STATEMENTS -> INC_STAT .)
    PRINT           reduce using rule 35 (STATEMENTS -> INC_STAT .)
    READ            reduce using rule 35 (STATEMENTS -> INC_STAT .)
    IF              reduce using rule 35 (STATEMENTS -> INC_STAT .)
    WHILE           reduce using rule 35 (STATEMENTS -> INC_STAT .)
    DO              reduce using rule 35 (STATEMENTS -> INC_STAT .)
    FOR             reduce using rule 35 (STATEMENTS -> INC_STAT .)
    ID              reduce using rule 35 (STATEMENTS -> INC_STAT .)
    INT             reduce using rule 35 (STATEMENTS -> INC_STAT .)
    DOUBLE          reduce using rule 35 (STATEMENTS -> INC_STAT .)


state 72

    (30) STATEMENTS -> IFSTAT .

    CLOSING_BRACES  reduce using rule 30 (STATEMENTS -> IFSTAT .)
    PRINT           reduce using rule 30 (STATEMENTS -> IFSTAT .)
    READ            reduce using rule 30 (STATEMENTS -> IFSTAT .)
    IF              reduce using rule 30 (STATEMENTS -> IFSTAT .)
    WHILE           reduce using rule 30 (STATEMENTS -> IFSTAT .)
    DO              reduce using rule 30 (STATEMENTS -> IFSTAT .)
    FOR             reduce using rule 30 (STATEMENTS -> IFSTAT .)
    ID              reduce using rule 30 (STATEMENTS -> IFSTAT .)
    INT             reduce using rule 30 (STATEMENTS -> IFSTAT .)
    DOUBLE          reduce using rule 30 (STATEMENTS -> IFSTAT .)


state 73

    (23) S -> STATEMENTS .

    CLOSING_BRACES  reduce using rule 23 (S -> STATEMENTS .)
    PRINT           reduce using rule 23 (S -> STATEMENTS .)
    READ            reduce using rule 23 (S -> STATEMENTS .)
    IF              reduce using rule 23 (S -> STATEMENTS .)
    WHILE           reduce using rule 23 (S -> STATEMENTS .)
    DO              reduce using rule 23 (S -> STATEMENTS .)
    FOR             reduce using rule 23 (S -> STATEMENTS .)
    ID              reduce using rule 23 (S -> STATEMENTS .)
    INT             reduce using rule 23 (S -> STATEMENTS .)
    DOUBLE          reduce using rule 23 (S -> STATEMENTS .)


state 74

    (41) IFSTAT -> IF . OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> IF . OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3

    OPEN_PARENTH    shift and go to state 94


state 75

    (20) M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S . CLOSING_BRACES
    (24) S -> S . STATEMENTS
    (26) STATEMENTS -> . VAR
    (27) STATEMENTS -> . IDSTAT
    (28) STATEMENTS -> . PRINTSTAT
    (29) STATEMENTS -> . READSTAT
    (30) STATEMENTS -> . IFSTAT
    (31) STATEMENTS -> . WHILESTAT
    (32) STATEMENTS -> . DOSTAT
    (33) STATEMENTS -> . FORSTAT
    (34) STATEMENTS -> . FUNCSTAT
    (35) STATEMENTS -> . INC_STAT
    (36) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (37) IDSTAT -> . ASSIGN SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (39) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (40) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (47) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (50) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (51) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (52) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (53) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (54) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (79) MAT -> . ID MAT_BRACKET

  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  shift and go to state 96
    PRINT           shift and go to state 88
    READ            shift and go to state 81
    IF              shift and go to state 74
    WHILE           shift and go to state 82
    DO              shift and go to state 79
    FOR             shift and go to state 80
    ID              shift and go to state 90
    INT             shift and go to state 4
    DOUBLE          shift and go to state 1

  ! CLOSING_BRACES  [ reduce using rule 36 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 36 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    INC_STAT                       shift and go to state 71
    PRINTSTAT                      shift and go to state 85
    ASSIGN                         shift and go to state 83
    FUNCSTAT                       shift and go to state 77
    DOSTAT                         shift and go to state 76
    IFSTAT                         shift and go to state 72
    FORSTAT                        shift and go to state 86
    IDSTAT                         shift and go to state 87
    READSTAT                       shift and go to state 84
    VAR                            shift and go to state 78
    MAT                            shift and go to state 40
    TIPO                           shift and go to state 3
    WHILESTAT                      shift and go to state 89
    STATEMENTS                     shift and go to state 95

state 76

    (32) STATEMENTS -> DOSTAT .

    CLOSING_BRACES  reduce using rule 32 (STATEMENTS -> DOSTAT .)
    PRINT           reduce using rule 32 (STATEMENTS -> DOSTAT .)
    READ            reduce using rule 32 (STATEMENTS -> DOSTAT .)
    IF              reduce using rule 32 (STATEMENTS -> DOSTAT .)
    WHILE           reduce using rule 32 (STATEMENTS -> DOSTAT .)
    DO              reduce using rule 32 (STATEMENTS -> DOSTAT .)
    FOR             reduce using rule 32 (STATEMENTS -> DOSTAT .)
    ID              reduce using rule 32 (STATEMENTS -> DOSTAT .)
    INT             reduce using rule 32 (STATEMENTS -> DOSTAT .)
    DOUBLE          reduce using rule 32 (STATEMENTS -> DOSTAT .)


state 77

    (34) STATEMENTS -> FUNCSTAT .

    CLOSING_BRACES  reduce using rule 34 (STATEMENTS -> FUNCSTAT .)
    PRINT           reduce using rule 34 (STATEMENTS -> FUNCSTAT .)
    READ            reduce using rule 34 (STATEMENTS -> FUNCSTAT .)
    IF              reduce using rule 34 (STATEMENTS -> FUNCSTAT .)
    WHILE           reduce using rule 34 (STATEMENTS -> FUNCSTAT .)
    DO              reduce using rule 34 (STATEMENTS -> FUNCSTAT .)
    FOR             reduce using rule 34 (STATEMENTS -> FUNCSTAT .)
    ID              reduce using rule 34 (STATEMENTS -> FUNCSTAT .)
    INT             reduce using rule 34 (STATEMENTS -> FUNCSTAT .)
    DOUBLE          reduce using rule 34 (STATEMENTS -> FUNCSTAT .)


state 78

    (26) STATEMENTS -> VAR .
    (4) VAR -> VAR . TIPO DECLARE SEMICOLON
    (5) VAR -> VAR . TIPO MAT SEMICOLON
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 26 (STATEMENTS -> VAR .)
    PRINT           reduce using rule 26 (STATEMENTS -> VAR .)
    READ            reduce using rule 26 (STATEMENTS -> VAR .)
    IF              reduce using rule 26 (STATEMENTS -> VAR .)
    WHILE           reduce using rule 26 (STATEMENTS -> VAR .)
    DO              reduce using rule 26 (STATEMENTS -> VAR .)
    FOR             reduce using rule 26 (STATEMENTS -> VAR .)
    ID              reduce using rule 26 (STATEMENTS -> VAR .)
    INT             shift and go to state 4
    DOUBLE          shift and go to state 1

  ! INT             [ reduce using rule 26 (STATEMENTS -> VAR .) ]
  ! DOUBLE          [ reduce using rule 26 (STATEMENTS -> VAR .) ]

    TIPO                           shift and go to state 12

state 79

    (50) DOSTAT -> DO . WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (48) WHILE_AUX_1 -> . empty
    (46) empty -> .

    OPEN_BRACES     reduce using rule 46 (empty -> .)

    WHILE_AUX_1                    shift and go to state 98
    empty                          shift and go to state 97

state 80

    (51) FORSTAT -> FOR . OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S

    OPEN_PARENTH    shift and go to state 99


state 81

    (40) READSTAT -> READ . OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON

    OPEN_PARENTH    shift and go to state 100


state 82

    (47) WHILESTAT -> WHILE . WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (48) WHILE_AUX_1 -> . empty
    (46) empty -> .

    OPEN_PARENTH    reduce using rule 46 (empty -> .)

    WHILE_AUX_1                    shift and go to state 101
    empty                          shift and go to state 97

state 83

    (37) IDSTAT -> ASSIGN . SEMICOLON

    SEMICOLON       shift and go to state 102


state 84

    (29) STATEMENTS -> READSTAT .

    CLOSING_BRACES  reduce using rule 29 (STATEMENTS -> READSTAT .)
    PRINT           reduce using rule 29 (STATEMENTS -> READSTAT .)
    READ            reduce using rule 29 (STATEMENTS -> READSTAT .)
    IF              reduce using rule 29 (STATEMENTS -> READSTAT .)
    WHILE           reduce using rule 29 (STATEMENTS -> READSTAT .)
    DO              reduce using rule 29 (STATEMENTS -> READSTAT .)
    FOR             reduce using rule 29 (STATEMENTS -> READSTAT .)
    ID              reduce using rule 29 (STATEMENTS -> READSTAT .)
    INT             reduce using rule 29 (STATEMENTS -> READSTAT .)
    DOUBLE          reduce using rule 29 (STATEMENTS -> READSTAT .)


state 85

    (28) STATEMENTS -> PRINTSTAT .

    CLOSING_BRACES  reduce using rule 28 (STATEMENTS -> PRINTSTAT .)
    PRINT           reduce using rule 28 (STATEMENTS -> PRINTSTAT .)
    READ            reduce using rule 28 (STATEMENTS -> PRINTSTAT .)
    IF              reduce using rule 28 (STATEMENTS -> PRINTSTAT .)
    WHILE           reduce using rule 28 (STATEMENTS -> PRINTSTAT .)
    DO              reduce using rule 28 (STATEMENTS -> PRINTSTAT .)
    FOR             reduce using rule 28 (STATEMENTS -> PRINTSTAT .)
    ID              reduce using rule 28 (STATEMENTS -> PRINTSTAT .)
    INT             reduce using rule 28 (STATEMENTS -> PRINTSTAT .)
    DOUBLE          reduce using rule 28 (STATEMENTS -> PRINTSTAT .)


state 86

    (33) STATEMENTS -> FORSTAT .

    CLOSING_BRACES  reduce using rule 33 (STATEMENTS -> FORSTAT .)
    PRINT           reduce using rule 33 (STATEMENTS -> FORSTAT .)
    READ            reduce using rule 33 (STATEMENTS -> FORSTAT .)
    IF              reduce using rule 33 (STATEMENTS -> FORSTAT .)
    WHILE           reduce using rule 33 (STATEMENTS -> FORSTAT .)
    DO              reduce using rule 33 (STATEMENTS -> FORSTAT .)
    FOR             reduce using rule 33 (STATEMENTS -> FORSTAT .)
    ID              reduce using rule 33 (STATEMENTS -> FORSTAT .)
    INT             reduce using rule 33 (STATEMENTS -> FORSTAT .)
    DOUBLE          reduce using rule 33 (STATEMENTS -> FORSTAT .)


state 87

    (27) STATEMENTS -> IDSTAT .

    CLOSING_BRACES  reduce using rule 27 (STATEMENTS -> IDSTAT .)
    PRINT           reduce using rule 27 (STATEMENTS -> IDSTAT .)
    READ            reduce using rule 27 (STATEMENTS -> IDSTAT .)
    IF              reduce using rule 27 (STATEMENTS -> IDSTAT .)
    WHILE           reduce using rule 27 (STATEMENTS -> IDSTAT .)
    DO              reduce using rule 27 (STATEMENTS -> IDSTAT .)
    FOR             reduce using rule 27 (STATEMENTS -> IDSTAT .)
    ID              reduce using rule 27 (STATEMENTS -> IDSTAT .)
    INT             reduce using rule 27 (STATEMENTS -> IDSTAT .)
    DOUBLE          reduce using rule 27 (STATEMENTS -> IDSTAT .)


state 88

    (38) PRINTSTAT -> PRINT . OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (39) PRINTSTAT -> PRINT . OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON

    OPEN_PARENTH    shift and go to state 103


state 89

    (31) STATEMENTS -> WHILESTAT .

    CLOSING_BRACES  reduce using rule 31 (STATEMENTS -> WHILESTAT .)
    PRINT           reduce using rule 31 (STATEMENTS -> WHILESTAT .)
    READ            reduce using rule 31 (STATEMENTS -> WHILESTAT .)
    IF              reduce using rule 31 (STATEMENTS -> WHILESTAT .)
    WHILE           reduce using rule 31 (STATEMENTS -> WHILESTAT .)
    DO              reduce using rule 31 (STATEMENTS -> WHILESTAT .)
    FOR             reduce using rule 31 (STATEMENTS -> WHILESTAT .)
    ID              reduce using rule 31 (STATEMENTS -> WHILESTAT .)
    INT             reduce using rule 31 (STATEMENTS -> WHILESTAT .)
    DOUBLE          reduce using rule 31 (STATEMENTS -> WHILESTAT .)


state 90

    (52) FUNCSTAT -> ID . OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (53) INC_STAT -> ID . PLUSPLUS SEMICOLON
    (54) INC_STAT -> ID . MINUSMINUS SEMICOLON
    (11) ASSIGN -> ID . EQUAL EA
    (79) MAT -> ID . MAT_BRACKET
    (80) MAT_BRACKET -> . OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (81) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (82) MAT_BRACKET -> . OPEN_BRACKET ID CLOSING_BRACKET
    (83) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET

    OPEN_PARENTH    shift and go to state 106
    PLUSPLUS        shift and go to state 104
    MINUSMINUS      shift and go to state 105
    EQUAL           shift and go to state 14
    OPEN_BRACKET    shift and go to state 16

    MAT_BRACKET                    shift and go to state 15

state 91

    (17) DECLARE_FUNC -> empty .

    OPEN_BRACES     reduce using rule 17 (DECLARE_FUNC -> empty .)
    PRINT           reduce using rule 17 (DECLARE_FUNC -> empty .)
    READ            reduce using rule 17 (DECLARE_FUNC -> empty .)
    IF              reduce using rule 17 (DECLARE_FUNC -> empty .)
    WHILE           reduce using rule 17 (DECLARE_FUNC -> empty .)
    DO              reduce using rule 17 (DECLARE_FUNC -> empty .)
    FOR             reduce using rule 17 (DECLARE_FUNC -> empty .)
    ID              reduce using rule 17 (DECLARE_FUNC -> empty .)
    INT             reduce using rule 17 (DECLARE_FUNC -> empty .)
    DOUBLE          reduce using rule 17 (DECLARE_FUNC -> empty .)
    CLOSING_BRACES  reduce using rule 17 (DECLARE_FUNC -> empty .)


state 92

    (13) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC . OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3

    OPEN_BRACES     shift and go to state 107


state 93

    (14) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES . DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3
    (17) DECLARE_FUNC -> . empty
    (46) empty -> .

    PRINT           reduce using rule 46 (empty -> .)
    READ            reduce using rule 46 (empty -> .)
    IF              reduce using rule 46 (empty -> .)
    WHILE           reduce using rule 46 (empty -> .)
    DO              reduce using rule 46 (empty -> .)
    FOR             reduce using rule 46 (empty -> .)
    ID              reduce using rule 46 (empty -> .)
    INT             reduce using rule 46 (empty -> .)
    DOUBLE          reduce using rule 46 (empty -> .)
    CLOSING_BRACES  reduce using rule 46 (empty -> .)

    DECLARE_FUNC                   shift and go to state 108
    empty                          shift and go to state 91

state 94

    (41) IFSTAT -> IF OPEN_PARENTH . EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> IF OPEN_PARENTH . EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (66) EL -> . TL
    (67) EL -> . EL OR TL
    (68) TL -> . FL
    (69) TL -> . TL AND FL
    (70) FL -> . NL OPERATORS NL
    (71) FL -> . EA OPERATORS EA
    (72) FL -> . NL
    (73) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (74) NL -> . NOT EL
    (56) EA -> . TA
    (57) EA -> . EA PLUS TA
    (58) EA -> . EA MINUS TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 112
    NOT             shift and go to state 113
    CONSTANT        shift and go to state 29
    ID              shift and go to state 28

    FA                             shift and go to state 30
    EL                             shift and go to state 110
    TL                             shift and go to state 114
    NL                             shift and go to state 115
    TA                             shift and go to state 33
    EA                             shift and go to state 111
    MAT                            shift and go to state 31
    FL                             shift and go to state 109

state 95

    (24) S -> S STATEMENTS .

    CLOSING_BRACES  reduce using rule 24 (S -> S STATEMENTS .)
    PRINT           reduce using rule 24 (S -> S STATEMENTS .)
    READ            reduce using rule 24 (S -> S STATEMENTS .)
    IF              reduce using rule 24 (S -> S STATEMENTS .)
    WHILE           reduce using rule 24 (S -> S STATEMENTS .)
    DO              reduce using rule 24 (S -> S STATEMENTS .)
    FOR             reduce using rule 24 (S -> S STATEMENTS .)
    ID              reduce using rule 24 (S -> S STATEMENTS .)
    INT             reduce using rule 24 (S -> S STATEMENTS .)
    DOUBLE          reduce using rule 24 (S -> S STATEMENTS .)


state 96

    (20) M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES .

    $end            reduce using rule 20 (M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES .)


state 97

    (48) WHILE_AUX_1 -> empty .

    OPEN_BRACES     reduce using rule 48 (WHILE_AUX_1 -> empty .)
    OPEN_PARENTH    reduce using rule 48 (WHILE_AUX_1 -> empty .)
    NOT             reduce using rule 48 (WHILE_AUX_1 -> empty .)
    CONSTANT        reduce using rule 48 (WHILE_AUX_1 -> empty .)
    ID              reduce using rule 48 (WHILE_AUX_1 -> empty .)


state 98

    (50) DOSTAT -> DO WHILE_AUX_1 . IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (55) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 116

    IN_S                           shift and go to state 117

state 99

    (51) FORSTAT -> FOR OPEN_PARENTH . ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (79) MAT -> . ID MAT_BRACKET

    ID              shift and go to state 119

    ASSIGN                         shift and go to state 118
    MAT                            shift and go to state 40

state 100

    (40) READSTAT -> READ OPEN_PARENTH . EA CLOSING_PARENTH SEMICOLON
    (56) EA -> . TA
    (57) EA -> . EA PLUS TA
    (58) EA -> . EA MINUS TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 29
    ID              shift and go to state 28
    OPEN_PARENTH    shift and go to state 34

    EA                             shift and go to state 120
    FA                             shift and go to state 30
    MAT                            shift and go to state 31
    TA                             shift and go to state 33

state 101

    (47) WHILESTAT -> WHILE WHILE_AUX_1 . OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S

    OPEN_PARENTH    shift and go to state 121


state 102

    (37) IDSTAT -> ASSIGN SEMICOLON .

    CLOSING_BRACES  reduce using rule 37 (IDSTAT -> ASSIGN SEMICOLON .)
    PRINT           reduce using rule 37 (IDSTAT -> ASSIGN SEMICOLON .)
    READ            reduce using rule 37 (IDSTAT -> ASSIGN SEMICOLON .)
    IF              reduce using rule 37 (IDSTAT -> ASSIGN SEMICOLON .)
    WHILE           reduce using rule 37 (IDSTAT -> ASSIGN SEMICOLON .)
    DO              reduce using rule 37 (IDSTAT -> ASSIGN SEMICOLON .)
    FOR             reduce using rule 37 (IDSTAT -> ASSIGN SEMICOLON .)
    ID              reduce using rule 37 (IDSTAT -> ASSIGN SEMICOLON .)
    INT             reduce using rule 37 (IDSTAT -> ASSIGN SEMICOLON .)
    DOUBLE          reduce using rule 37 (IDSTAT -> ASSIGN SEMICOLON .)


state 103

    (38) PRINTSTAT -> PRINT OPEN_PARENTH . EA CLOSING_PARENTH SEMICOLON
    (39) PRINTSTAT -> PRINT OPEN_PARENTH . STRING CLOSING_PARENTH SEMICOLON
    (56) EA -> . TA
    (57) EA -> . EA PLUS TA
    (58) EA -> . EA MINUS TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    STRING          shift and go to state 122
    CONSTANT        shift and go to state 29
    ID              shift and go to state 28
    OPEN_PARENTH    shift and go to state 34

    EA                             shift and go to state 123
    FA                             shift and go to state 30
    MAT                            shift and go to state 31
    TA                             shift and go to state 33

state 104

    (53) INC_STAT -> ID PLUSPLUS . SEMICOLON

    SEMICOLON       shift and go to state 124


state 105

    (54) INC_STAT -> ID MINUSMINUS . SEMICOLON

    SEMICOLON       shift and go to state 125


state 106

    (52) FUNCSTAT -> ID OPEN_PARENTH . CLOSING_PARENTH SEMICOLON

    CLOSING_PARENTH shift and go to state 126


state 107

    (13) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES . S CLOSING_BRACES RETURN IF_AUX3
    (23) S -> . STATEMENTS
    (24) S -> . S STATEMENTS
    (25) S -> .
    (26) STATEMENTS -> . VAR
    (27) STATEMENTS -> . IDSTAT
    (28) STATEMENTS -> . PRINTSTAT
    (29) STATEMENTS -> . READSTAT
    (30) STATEMENTS -> . IFSTAT
    (31) STATEMENTS -> . WHILESTAT
    (32) STATEMENTS -> . DOSTAT
    (33) STATEMENTS -> . FORSTAT
    (34) STATEMENTS -> . FUNCSTAT
    (35) STATEMENTS -> . INC_STAT
    (36) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (37) IDSTAT -> . ASSIGN SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (39) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (40) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (47) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (50) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (51) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (52) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (53) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (54) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (79) MAT -> . ID MAT_BRACKET

  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for READ resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for IF resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for DO resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for FOR resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for ID resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 6 (VAR -> .)
    PRINT           shift and go to state 88
    READ            shift and go to state 81
    IF              shift and go to state 74
    WHILE           shift and go to state 82
    DO              shift and go to state 79
    FOR             shift and go to state 80
    ID              shift and go to state 90
    INT             shift and go to state 4
    DOUBLE          shift and go to state 1

  ! CLOSING_BRACES  [ reduce using rule 25 (S -> .) ]
  ! PRINT           [ reduce using rule 25 (S -> .) ]
  ! READ            [ reduce using rule 25 (S -> .) ]
  ! IF              [ reduce using rule 25 (S -> .) ]
  ! WHILE           [ reduce using rule 25 (S -> .) ]
  ! DO              [ reduce using rule 25 (S -> .) ]
  ! FOR             [ reduce using rule 25 (S -> .) ]
  ! ID              [ reduce using rule 25 (S -> .) ]
  ! INT             [ reduce using rule 25 (S -> .) ]
  ! DOUBLE          [ reduce using rule 25 (S -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 36 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 36 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    INC_STAT                       shift and go to state 71
    PRINTSTAT                      shift and go to state 85
    ASSIGN                         shift and go to state 83
    FUNCSTAT                       shift and go to state 77
    DOSTAT                         shift and go to state 76
    IFSTAT                         shift and go to state 72
    S                              shift and go to state 127
    FORSTAT                        shift and go to state 86
    IDSTAT                         shift and go to state 87
    READSTAT                       shift and go to state 84
    VAR                            shift and go to state 78
    MAT                            shift and go to state 40
    TIPO                           shift and go to state 3
    WHILESTAT                      shift and go to state 89
    STATEMENTS                     shift and go to state 73

state 108

    (14) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC . S CLOSING_BRACES RETURN IF_AUX3
    (23) S -> . STATEMENTS
    (24) S -> . S STATEMENTS
    (25) S -> .
    (26) STATEMENTS -> . VAR
    (27) STATEMENTS -> . IDSTAT
    (28) STATEMENTS -> . PRINTSTAT
    (29) STATEMENTS -> . READSTAT
    (30) STATEMENTS -> . IFSTAT
    (31) STATEMENTS -> . WHILESTAT
    (32) STATEMENTS -> . DOSTAT
    (33) STATEMENTS -> . FORSTAT
    (34) STATEMENTS -> . FUNCSTAT
    (35) STATEMENTS -> . INC_STAT
    (36) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (37) IDSTAT -> . ASSIGN SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (39) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (40) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (47) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (50) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (51) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (52) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (53) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (54) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (79) MAT -> . ID MAT_BRACKET

  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for READ resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for IF resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for DO resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for FOR resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for ID resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 6 (VAR -> .)
    PRINT           shift and go to state 88
    READ            shift and go to state 81
    IF              shift and go to state 74
    WHILE           shift and go to state 82
    DO              shift and go to state 79
    FOR             shift and go to state 80
    ID              shift and go to state 90
    INT             shift and go to state 4
    DOUBLE          shift and go to state 1

  ! CLOSING_BRACES  [ reduce using rule 25 (S -> .) ]
  ! PRINT           [ reduce using rule 25 (S -> .) ]
  ! READ            [ reduce using rule 25 (S -> .) ]
  ! IF              [ reduce using rule 25 (S -> .) ]
  ! WHILE           [ reduce using rule 25 (S -> .) ]
  ! DO              [ reduce using rule 25 (S -> .) ]
  ! FOR             [ reduce using rule 25 (S -> .) ]
  ! ID              [ reduce using rule 25 (S -> .) ]
  ! INT             [ reduce using rule 25 (S -> .) ]
  ! DOUBLE          [ reduce using rule 25 (S -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 36 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 36 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    INC_STAT                       shift and go to state 71
    PRINTSTAT                      shift and go to state 85
    ASSIGN                         shift and go to state 83
    FUNCSTAT                       shift and go to state 77
    DOSTAT                         shift and go to state 76
    IFSTAT                         shift and go to state 72
    S                              shift and go to state 128
    FORSTAT                        shift and go to state 86
    IDSTAT                         shift and go to state 87
    READSTAT                       shift and go to state 84
    VAR                            shift and go to state 78
    MAT                            shift and go to state 40
    TIPO                           shift and go to state 3
    WHILESTAT                      shift and go to state 89
    STATEMENTS                     shift and go to state 73

state 109

    (68) TL -> FL .

    AND             reduce using rule 68 (TL -> FL .)
    CLOSING_PARENTH reduce using rule 68 (TL -> FL .)
    OR              reduce using rule 68 (TL -> FL .)
    NOT_EQUAL       reduce using rule 68 (TL -> FL .)
    LOWER_THAN      reduce using rule 68 (TL -> FL .)
    BIGGER_THAN     reduce using rule 68 (TL -> FL .)
    EQUAL_EQUAL     reduce using rule 68 (TL -> FL .)
    SEMICOLON       reduce using rule 68 (TL -> FL .)


state 110

    (41) IFSTAT -> IF OPEN_PARENTH EL . CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> IF OPEN_PARENTH EL . CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (67) EL -> EL . OR TL

    CLOSING_PARENTH shift and go to state 129
    OR              shift and go to state 130


state 111

    (71) FL -> EA . OPERATORS EA
    (57) EA -> EA . PLUS TA
    (58) EA -> EA . MINUS TA
    (75) OPERATORS -> . NOT_EQUAL
    (76) OPERATORS -> . LOWER_THAN
    (77) OPERATORS -> . BIGGER_THAN
    (78) OPERATORS -> . EQUAL_EQUAL

    PLUS            shift and go to state 49
    MINUS           shift and go to state 48
    NOT_EQUAL       shift and go to state 132
    LOWER_THAN      shift and go to state 134
    BIGGER_THAN     shift and go to state 133
    EQUAL_EQUAL     shift and go to state 131

    OPERATORS                      shift and go to state 135

state 112

    (73) FL -> OPEN_PARENTH . EL CLOSING_PARENTH
    (62) FA -> OPEN_PARENTH . EA CLOSING_PARENTH
    (66) EL -> . TL
    (67) EL -> . EL OR TL
    (56) EA -> . TA
    (57) EA -> . EA PLUS TA
    (58) EA -> . EA MINUS TA
    (68) TL -> . FL
    (69) TL -> . TL AND FL
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (70) FL -> . NL OPERATORS NL
    (71) FL -> . EA OPERATORS EA
    (72) FL -> . NL
    (73) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (74) NL -> . NOT EL
    (79) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 112
    CONSTANT        shift and go to state 29
    ID              shift and go to state 28
    NOT             shift and go to state 113

    TL                             shift and go to state 114
    NL                             shift and go to state 115
    MAT                            shift and go to state 31
    TA                             shift and go to state 33
    EA                             shift and go to state 137
    EL                             shift and go to state 136
    FL                             shift and go to state 109
    FA                             shift and go to state 30

state 113

    (74) NL -> NOT . EL
    (66) EL -> . TL
    (67) EL -> . EL OR TL
    (68) TL -> . FL
    (69) TL -> . TL AND FL
    (70) FL -> . NL OPERATORS NL
    (71) FL -> . EA OPERATORS EA
    (72) FL -> . NL
    (73) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (74) NL -> . NOT EL
    (56) EA -> . TA
    (57) EA -> . EA PLUS TA
    (58) EA -> . EA MINUS TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 112
    NOT             shift and go to state 113
    CONSTANT        shift and go to state 29
    ID              shift and go to state 28

    TL                             shift and go to state 114
    NL                             shift and go to state 115
    TA                             shift and go to state 33
    EA                             shift and go to state 111
    EL                             shift and go to state 138
    MAT                            shift and go to state 31
    FL                             shift and go to state 109
    FA                             shift and go to state 30

state 114

    (66) EL -> TL .
    (69) TL -> TL . AND FL

  ! shift/reduce conflict for AND resolved as shift
    CLOSING_PARENTH reduce using rule 66 (EL -> TL .)
    OR              reduce using rule 66 (EL -> TL .)
    SEMICOLON       reduce using rule 66 (EL -> TL .)
    NOT_EQUAL       reduce using rule 66 (EL -> TL .)
    LOWER_THAN      reduce using rule 66 (EL -> TL .)
    BIGGER_THAN     reduce using rule 66 (EL -> TL .)
    EQUAL_EQUAL     reduce using rule 66 (EL -> TL .)
    AND             shift and go to state 139

  ! AND             [ reduce using rule 66 (EL -> TL .) ]


state 115

    (70) FL -> NL . OPERATORS NL
    (72) FL -> NL .
    (75) OPERATORS -> . NOT_EQUAL
    (76) OPERATORS -> . LOWER_THAN
    (77) OPERATORS -> . BIGGER_THAN
    (78) OPERATORS -> . EQUAL_EQUAL

  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LOWER_THAN resolved as shift
  ! shift/reduce conflict for BIGGER_THAN resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
    AND             reduce using rule 72 (FL -> NL .)
    OR              reduce using rule 72 (FL -> NL .)
    CLOSING_PARENTH reduce using rule 72 (FL -> NL .)
    SEMICOLON       reduce using rule 72 (FL -> NL .)
    NOT_EQUAL       shift and go to state 132
    LOWER_THAN      shift and go to state 134
    BIGGER_THAN     shift and go to state 133
    EQUAL_EQUAL     shift and go to state 131

  ! NOT_EQUAL       [ reduce using rule 72 (FL -> NL .) ]
  ! LOWER_THAN      [ reduce using rule 72 (FL -> NL .) ]
  ! BIGGER_THAN     [ reduce using rule 72 (FL -> NL .) ]
  ! EQUAL_EQUAL     [ reduce using rule 72 (FL -> NL .) ]

    OPERATORS                      shift and go to state 140

state 116

    (55) IN_S -> OPEN_BRACES . S CLOSING_BRACES
    (23) S -> . STATEMENTS
    (24) S -> . S STATEMENTS
    (25) S -> .
    (26) STATEMENTS -> . VAR
    (27) STATEMENTS -> . IDSTAT
    (28) STATEMENTS -> . PRINTSTAT
    (29) STATEMENTS -> . READSTAT
    (30) STATEMENTS -> . IFSTAT
    (31) STATEMENTS -> . WHILESTAT
    (32) STATEMENTS -> . DOSTAT
    (33) STATEMENTS -> . FORSTAT
    (34) STATEMENTS -> . FUNCSTAT
    (35) STATEMENTS -> . INC_STAT
    (36) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (37) IDSTAT -> . ASSIGN SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (39) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (40) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (47) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (50) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (51) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (52) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (53) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (54) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (79) MAT -> . ID MAT_BRACKET

  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for READ resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for IF resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for DO resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for FOR resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for ID resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 6 (VAR -> .)
    PRINT           shift and go to state 88
    READ            shift and go to state 81
    IF              shift and go to state 74
    WHILE           shift and go to state 82
    DO              shift and go to state 79
    FOR             shift and go to state 80
    ID              shift and go to state 90
    INT             shift and go to state 4
    DOUBLE          shift and go to state 1

  ! CLOSING_BRACES  [ reduce using rule 25 (S -> .) ]
  ! PRINT           [ reduce using rule 25 (S -> .) ]
  ! READ            [ reduce using rule 25 (S -> .) ]
  ! IF              [ reduce using rule 25 (S -> .) ]
  ! WHILE           [ reduce using rule 25 (S -> .) ]
  ! DO              [ reduce using rule 25 (S -> .) ]
  ! FOR             [ reduce using rule 25 (S -> .) ]
  ! ID              [ reduce using rule 25 (S -> .) ]
  ! INT             [ reduce using rule 25 (S -> .) ]
  ! DOUBLE          [ reduce using rule 25 (S -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 36 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 36 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    INC_STAT                       shift and go to state 71
    PRINTSTAT                      shift and go to state 85
    ASSIGN                         shift and go to state 83
    FUNCSTAT                       shift and go to state 77
    DOSTAT                         shift and go to state 76
    IFSTAT                         shift and go to state 72
    S                              shift and go to state 141
    FORSTAT                        shift and go to state 86
    IDSTAT                         shift and go to state 87
    READSTAT                       shift and go to state 84
    VAR                            shift and go to state 78
    MAT                            shift and go to state 40
    TIPO                           shift and go to state 3
    WHILESTAT                      shift and go to state 89
    STATEMENTS                     shift and go to state 73

state 117

    (50) DOSTAT -> DO WHILE_AUX_1 IN_S . WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON

    WHILE           shift and go to state 142


state 118

    (51) FORSTAT -> FOR OPEN_PARENTH ASSIGN . SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S

    SEMICOLON       shift and go to state 143


state 119

    (11) ASSIGN -> ID . EQUAL EA
    (79) MAT -> ID . MAT_BRACKET
    (80) MAT_BRACKET -> . OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (81) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET CONSTANT CLOSING_BRACKET
    (82) MAT_BRACKET -> . OPEN_BRACKET ID CLOSING_BRACKET
    (83) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET ID CLOSING_BRACKET

    EQUAL           shift and go to state 14
    OPEN_BRACKET    shift and go to state 16

    MAT_BRACKET                    shift and go to state 15

state 120

    (40) READSTAT -> READ OPEN_PARENTH EA . CLOSING_PARENTH SEMICOLON
    (57) EA -> EA . PLUS TA
    (58) EA -> EA . MINUS TA

    CLOSING_PARENTH shift and go to state 144
    PLUS            shift and go to state 49
    MINUS           shift and go to state 48


state 121

    (47) WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH . EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (66) EL -> . TL
    (67) EL -> . EL OR TL
    (68) TL -> . FL
    (69) TL -> . TL AND FL
    (70) FL -> . NL OPERATORS NL
    (71) FL -> . EA OPERATORS EA
    (72) FL -> . NL
    (73) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (74) NL -> . NOT EL
    (56) EA -> . TA
    (57) EA -> . EA PLUS TA
    (58) EA -> . EA MINUS TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 112
    NOT             shift and go to state 113
    CONSTANT        shift and go to state 29
    ID              shift and go to state 28

    EL                             shift and go to state 145
    FA                             shift and go to state 30
    TL                             shift and go to state 114
    NL                             shift and go to state 115
    TA                             shift and go to state 33
    EA                             shift and go to state 111
    MAT                            shift and go to state 31
    FL                             shift and go to state 109

state 122

    (39) PRINTSTAT -> PRINT OPEN_PARENTH STRING . CLOSING_PARENTH SEMICOLON

    CLOSING_PARENTH shift and go to state 146


state 123

    (38) PRINTSTAT -> PRINT OPEN_PARENTH EA . CLOSING_PARENTH SEMICOLON
    (57) EA -> EA . PLUS TA
    (58) EA -> EA . MINUS TA

    CLOSING_PARENTH shift and go to state 147
    PLUS            shift and go to state 49
    MINUS           shift and go to state 48


state 124

    (53) INC_STAT -> ID PLUSPLUS SEMICOLON .

    CLOSING_BRACES  reduce using rule 53 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    PRINT           reduce using rule 53 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    READ            reduce using rule 53 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    IF              reduce using rule 53 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    WHILE           reduce using rule 53 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    DO              reduce using rule 53 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    FOR             reduce using rule 53 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    ID              reduce using rule 53 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    INT             reduce using rule 53 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    DOUBLE          reduce using rule 53 (INC_STAT -> ID PLUSPLUS SEMICOLON .)


state 125

    (54) INC_STAT -> ID MINUSMINUS SEMICOLON .

    CLOSING_BRACES  reduce using rule 54 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    PRINT           reduce using rule 54 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    READ            reduce using rule 54 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    IF              reduce using rule 54 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    WHILE           reduce using rule 54 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    DO              reduce using rule 54 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    FOR             reduce using rule 54 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    ID              reduce using rule 54 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    INT             reduce using rule 54 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    DOUBLE          reduce using rule 54 (INC_STAT -> ID MINUSMINUS SEMICOLON .)


state 126

    (52) FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 148


state 127

    (13) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S . CLOSING_BRACES RETURN IF_AUX3
    (24) S -> S . STATEMENTS
    (26) STATEMENTS -> . VAR
    (27) STATEMENTS -> . IDSTAT
    (28) STATEMENTS -> . PRINTSTAT
    (29) STATEMENTS -> . READSTAT
    (30) STATEMENTS -> . IFSTAT
    (31) STATEMENTS -> . WHILESTAT
    (32) STATEMENTS -> . DOSTAT
    (33) STATEMENTS -> . FORSTAT
    (34) STATEMENTS -> . FUNCSTAT
    (35) STATEMENTS -> . INC_STAT
    (36) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (37) IDSTAT -> . ASSIGN SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (39) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (40) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (47) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (50) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (51) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (52) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (53) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (54) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (79) MAT -> . ID MAT_BRACKET

  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  shift and go to state 149
    PRINT           shift and go to state 88
    READ            shift and go to state 81
    IF              shift and go to state 74
    WHILE           shift and go to state 82
    DO              shift and go to state 79
    FOR             shift and go to state 80
    ID              shift and go to state 90
    INT             shift and go to state 4
    DOUBLE          shift and go to state 1

  ! CLOSING_BRACES  [ reduce using rule 36 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 36 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    INC_STAT                       shift and go to state 71
    PRINTSTAT                      shift and go to state 85
    ASSIGN                         shift and go to state 83
    FUNCSTAT                       shift and go to state 77
    DOSTAT                         shift and go to state 76
    IFSTAT                         shift and go to state 72
    FORSTAT                        shift and go to state 86
    IDSTAT                         shift and go to state 87
    READSTAT                       shift and go to state 84
    VAR                            shift and go to state 78
    MAT                            shift and go to state 40
    TIPO                           shift and go to state 3
    WHILESTAT                      shift and go to state 89
    STATEMENTS                     shift and go to state 95

state 128

    (14) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S . CLOSING_BRACES RETURN IF_AUX3
    (24) S -> S . STATEMENTS
    (26) STATEMENTS -> . VAR
    (27) STATEMENTS -> . IDSTAT
    (28) STATEMENTS -> . PRINTSTAT
    (29) STATEMENTS -> . READSTAT
    (30) STATEMENTS -> . IFSTAT
    (31) STATEMENTS -> . WHILESTAT
    (32) STATEMENTS -> . DOSTAT
    (33) STATEMENTS -> . FORSTAT
    (34) STATEMENTS -> . FUNCSTAT
    (35) STATEMENTS -> . INC_STAT
    (36) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (37) IDSTAT -> . ASSIGN SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (39) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (40) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (47) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (50) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (51) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (52) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (53) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (54) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (79) MAT -> . ID MAT_BRACKET

  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  shift and go to state 150
    PRINT           shift and go to state 88
    READ            shift and go to state 81
    IF              shift and go to state 74
    WHILE           shift and go to state 82
    DO              shift and go to state 79
    FOR             shift and go to state 80
    ID              shift and go to state 90
    INT             shift and go to state 4
    DOUBLE          shift and go to state 1

  ! CLOSING_BRACES  [ reduce using rule 36 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 36 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    INC_STAT                       shift and go to state 71
    PRINTSTAT                      shift and go to state 85
    ASSIGN                         shift and go to state 83
    FUNCSTAT                       shift and go to state 77
    DOSTAT                         shift and go to state 76
    IFSTAT                         shift and go to state 72
    FORSTAT                        shift and go to state 86
    IDSTAT                         shift and go to state 87
    READSTAT                       shift and go to state 84
    VAR                            shift and go to state 78
    MAT                            shift and go to state 40
    TIPO                           shift and go to state 3
    WHILESTAT                      shift and go to state 89
    STATEMENTS                     shift and go to state 95

state 129

    (41) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH . IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH . IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (43) IF_AUX1 -> . empty
    (46) empty -> .

    OPEN_BRACES     reduce using rule 46 (empty -> .)

    empty                          shift and go to state 152
    IF_AUX1                        shift and go to state 151

state 130

    (67) EL -> EL OR . TL
    (68) TL -> . FL
    (69) TL -> . TL AND FL
    (70) FL -> . NL OPERATORS NL
    (71) FL -> . EA OPERATORS EA
    (72) FL -> . NL
    (73) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (74) NL -> . NOT EL
    (56) EA -> . TA
    (57) EA -> . EA PLUS TA
    (58) EA -> . EA MINUS TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 112
    NOT             shift and go to state 113
    CONSTANT        shift and go to state 29
    ID              shift and go to state 28

    TL                             shift and go to state 153
    NL                             shift and go to state 115
    TA                             shift and go to state 33
    EA                             shift and go to state 111
    MAT                            shift and go to state 31
    FL                             shift and go to state 109
    FA                             shift and go to state 30

state 131

    (78) OPERATORS -> EQUAL_EQUAL .

    NOT             reduce using rule 78 (OPERATORS -> EQUAL_EQUAL .)
    CONSTANT        reduce using rule 78 (OPERATORS -> EQUAL_EQUAL .)
    ID              reduce using rule 78 (OPERATORS -> EQUAL_EQUAL .)
    OPEN_PARENTH    reduce using rule 78 (OPERATORS -> EQUAL_EQUAL .)


state 132

    (75) OPERATORS -> NOT_EQUAL .

    NOT             reduce using rule 75 (OPERATORS -> NOT_EQUAL .)
    CONSTANT        reduce using rule 75 (OPERATORS -> NOT_EQUAL .)
    ID              reduce using rule 75 (OPERATORS -> NOT_EQUAL .)
    OPEN_PARENTH    reduce using rule 75 (OPERATORS -> NOT_EQUAL .)


state 133

    (77) OPERATORS -> BIGGER_THAN .

    NOT             reduce using rule 77 (OPERATORS -> BIGGER_THAN .)
    CONSTANT        reduce using rule 77 (OPERATORS -> BIGGER_THAN .)
    ID              reduce using rule 77 (OPERATORS -> BIGGER_THAN .)
    OPEN_PARENTH    reduce using rule 77 (OPERATORS -> BIGGER_THAN .)


state 134

    (76) OPERATORS -> LOWER_THAN .

    NOT             reduce using rule 76 (OPERATORS -> LOWER_THAN .)
    CONSTANT        reduce using rule 76 (OPERATORS -> LOWER_THAN .)
    ID              reduce using rule 76 (OPERATORS -> LOWER_THAN .)
    OPEN_PARENTH    reduce using rule 76 (OPERATORS -> LOWER_THAN .)


state 135

    (71) FL -> EA OPERATORS . EA
    (56) EA -> . TA
    (57) EA -> . EA PLUS TA
    (58) EA -> . EA MINUS TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 29
    ID              shift and go to state 28
    OPEN_PARENTH    shift and go to state 34

    TA                             shift and go to state 33
    EA                             shift and go to state 154
    FA                             shift and go to state 30
    MAT                            shift and go to state 31

state 136

    (73) FL -> OPEN_PARENTH EL . CLOSING_PARENTH
    (67) EL -> EL . OR TL

    CLOSING_PARENTH shift and go to state 155
    OR              shift and go to state 130


state 137

    (62) FA -> OPEN_PARENTH EA . CLOSING_PARENTH
    (57) EA -> EA . PLUS TA
    (58) EA -> EA . MINUS TA
    (71) FL -> EA . OPERATORS EA
    (75) OPERATORS -> . NOT_EQUAL
    (76) OPERATORS -> . LOWER_THAN
    (77) OPERATORS -> . BIGGER_THAN
    (78) OPERATORS -> . EQUAL_EQUAL

    CLOSING_PARENTH shift and go to state 64
    PLUS            shift and go to state 49
    MINUS           shift and go to state 48
    NOT_EQUAL       shift and go to state 132
    LOWER_THAN      shift and go to state 134
    BIGGER_THAN     shift and go to state 133
    EQUAL_EQUAL     shift and go to state 131

    OPERATORS                      shift and go to state 135

state 138

    (74) NL -> NOT EL .
    (67) EL -> EL . OR TL

  ! shift/reduce conflict for OR resolved as shift
    NOT_EQUAL       reduce using rule 74 (NL -> NOT EL .)
    LOWER_THAN      reduce using rule 74 (NL -> NOT EL .)
    BIGGER_THAN     reduce using rule 74 (NL -> NOT EL .)
    EQUAL_EQUAL     reduce using rule 74 (NL -> NOT EL .)
    AND             reduce using rule 74 (NL -> NOT EL .)
    CLOSING_PARENTH reduce using rule 74 (NL -> NOT EL .)
    SEMICOLON       reduce using rule 74 (NL -> NOT EL .)
    OR              shift and go to state 130

  ! OR              [ reduce using rule 74 (NL -> NOT EL .) ]


state 139

    (69) TL -> TL AND . FL
    (70) FL -> . NL OPERATORS NL
    (71) FL -> . EA OPERATORS EA
    (72) FL -> . NL
    (73) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (74) NL -> . NOT EL
    (56) EA -> . TA
    (57) EA -> . EA PLUS TA
    (58) EA -> . EA MINUS TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 112
    NOT             shift and go to state 113
    CONSTANT        shift and go to state 29
    ID              shift and go to state 28

    NL                             shift and go to state 115
    TA                             shift and go to state 33
    EA                             shift and go to state 111
    MAT                            shift and go to state 31
    FL                             shift and go to state 156
    FA                             shift and go to state 30

state 140

    (70) FL -> NL OPERATORS . NL
    (74) NL -> . NOT EL

    NOT             shift and go to state 113

    NL                             shift and go to state 157

state 141

    (55) IN_S -> OPEN_BRACES S . CLOSING_BRACES
    (24) S -> S . STATEMENTS
    (26) STATEMENTS -> . VAR
    (27) STATEMENTS -> . IDSTAT
    (28) STATEMENTS -> . PRINTSTAT
    (29) STATEMENTS -> . READSTAT
    (30) STATEMENTS -> . IFSTAT
    (31) STATEMENTS -> . WHILESTAT
    (32) STATEMENTS -> . DOSTAT
    (33) STATEMENTS -> . FORSTAT
    (34) STATEMENTS -> . FUNCSTAT
    (35) STATEMENTS -> . INC_STAT
    (36) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (37) IDSTAT -> . ASSIGN SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (39) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (40) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (47) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (50) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (51) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (52) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (53) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (54) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (79) MAT -> . ID MAT_BRACKET

  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  shift and go to state 158
    PRINT           shift and go to state 88
    READ            shift and go to state 81
    IF              shift and go to state 74
    WHILE           shift and go to state 82
    DO              shift and go to state 79
    FOR             shift and go to state 80
    ID              shift and go to state 90
    INT             shift and go to state 4
    DOUBLE          shift and go to state 1

  ! CLOSING_BRACES  [ reduce using rule 36 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 36 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    INC_STAT                       shift and go to state 71
    PRINTSTAT                      shift and go to state 85
    ASSIGN                         shift and go to state 83
    FUNCSTAT                       shift and go to state 77
    DOSTAT                         shift and go to state 76
    IFSTAT                         shift and go to state 72
    FORSTAT                        shift and go to state 86
    IDSTAT                         shift and go to state 87
    READSTAT                       shift and go to state 84
    VAR                            shift and go to state 78
    MAT                            shift and go to state 40
    TIPO                           shift and go to state 3
    WHILESTAT                      shift and go to state 89
    STATEMENTS                     shift and go to state 95

state 142

    (50) DOSTAT -> DO WHILE_AUX_1 IN_S WHILE . OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON

    OPEN_PARENTH    shift and go to state 159


state 143

    (51) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON . WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (48) WHILE_AUX_1 -> . empty
    (46) empty -> .

    OPEN_PARENTH    reduce using rule 46 (empty -> .)
    NOT             reduce using rule 46 (empty -> .)
    CONSTANT        reduce using rule 46 (empty -> .)
    ID              reduce using rule 46 (empty -> .)

    empty                          shift and go to state 97
    WHILE_AUX_1                    shift and go to state 160

state 144

    (40) READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 161


state 145

    (47) WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL . CLOSING_PARENTH WHILE_AUX_2 IN_S
    (67) EL -> EL . OR TL

    CLOSING_PARENTH shift and go to state 162
    OR              shift and go to state 130


state 146

    (39) PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 163


state 147

    (38) PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 164


state 148

    (52) FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 52 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 52 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 52 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 52 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 52 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 52 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 52 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 52 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 52 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 52 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)


state 149

    (13) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES . RETURN IF_AUX3
    (18) RETURN -> . empty
    (46) empty -> .

    MAIN            reduce using rule 46 (empty -> .)
    FUNCTION        reduce using rule 46 (empty -> .)

    RETURN                         shift and go to state 166
    empty                          shift and go to state 165

state 150

    (14) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES . RETURN IF_AUX3
    (18) RETURN -> . empty
    (46) empty -> .

    MAIN            reduce using rule 46 (empty -> .)
    FUNCTION        reduce using rule 46 (empty -> .)

    RETURN                         shift and go to state 167
    empty                          shift and go to state 165

state 151

    (41) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 . IN_S IF_AUX3
    (42) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 . IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (55) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 116

    IN_S                           shift and go to state 168

state 152

    (43) IF_AUX1 -> empty .

    OPEN_BRACES     reduce using rule 43 (IF_AUX1 -> empty .)


state 153

    (67) EL -> EL OR TL .
    (69) TL -> TL . AND FL

  ! shift/reduce conflict for AND resolved as shift
    CLOSING_PARENTH reduce using rule 67 (EL -> EL OR TL .)
    OR              reduce using rule 67 (EL -> EL OR TL .)
    SEMICOLON       reduce using rule 67 (EL -> EL OR TL .)
    NOT_EQUAL       reduce using rule 67 (EL -> EL OR TL .)
    LOWER_THAN      reduce using rule 67 (EL -> EL OR TL .)
    BIGGER_THAN     reduce using rule 67 (EL -> EL OR TL .)
    EQUAL_EQUAL     reduce using rule 67 (EL -> EL OR TL .)
    AND             shift and go to state 139

  ! AND             [ reduce using rule 67 (EL -> EL OR TL .) ]


state 154

    (71) FL -> EA OPERATORS EA .
    (57) EA -> EA . PLUS TA
    (58) EA -> EA . MINUS TA

    AND             reduce using rule 71 (FL -> EA OPERATORS EA .)
    OR              reduce using rule 71 (FL -> EA OPERATORS EA .)
    NOT_EQUAL       reduce using rule 71 (FL -> EA OPERATORS EA .)
    LOWER_THAN      reduce using rule 71 (FL -> EA OPERATORS EA .)
    BIGGER_THAN     reduce using rule 71 (FL -> EA OPERATORS EA .)
    EQUAL_EQUAL     reduce using rule 71 (FL -> EA OPERATORS EA .)
    CLOSING_PARENTH reduce using rule 71 (FL -> EA OPERATORS EA .)
    SEMICOLON       reduce using rule 71 (FL -> EA OPERATORS EA .)
    PLUS            shift and go to state 49
    MINUS           shift and go to state 48


state 155

    (73) FL -> OPEN_PARENTH EL CLOSING_PARENTH .

    AND             reduce using rule 73 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    OR              reduce using rule 73 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    NOT_EQUAL       reduce using rule 73 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    LOWER_THAN      reduce using rule 73 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    BIGGER_THAN     reduce using rule 73 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    EQUAL_EQUAL     reduce using rule 73 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    CLOSING_PARENTH reduce using rule 73 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    SEMICOLON       reduce using rule 73 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)


state 156

    (69) TL -> TL AND FL .

    AND             reduce using rule 69 (TL -> TL AND FL .)
    CLOSING_PARENTH reduce using rule 69 (TL -> TL AND FL .)
    OR              reduce using rule 69 (TL -> TL AND FL .)
    NOT_EQUAL       reduce using rule 69 (TL -> TL AND FL .)
    LOWER_THAN      reduce using rule 69 (TL -> TL AND FL .)
    BIGGER_THAN     reduce using rule 69 (TL -> TL AND FL .)
    EQUAL_EQUAL     reduce using rule 69 (TL -> TL AND FL .)
    SEMICOLON       reduce using rule 69 (TL -> TL AND FL .)


state 157

    (70) FL -> NL OPERATORS NL .

    AND             reduce using rule 70 (FL -> NL OPERATORS NL .)
    OR              reduce using rule 70 (FL -> NL OPERATORS NL .)
    NOT_EQUAL       reduce using rule 70 (FL -> NL OPERATORS NL .)
    LOWER_THAN      reduce using rule 70 (FL -> NL OPERATORS NL .)
    BIGGER_THAN     reduce using rule 70 (FL -> NL OPERATORS NL .)
    EQUAL_EQUAL     reduce using rule 70 (FL -> NL OPERATORS NL .)
    CLOSING_PARENTH reduce using rule 70 (FL -> NL OPERATORS NL .)
    SEMICOLON       reduce using rule 70 (FL -> NL OPERATORS NL .)


state 158

    (55) IN_S -> OPEN_BRACES S CLOSING_BRACES .

    CLOSING_BRACES  reduce using rule 55 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    PRINT           reduce using rule 55 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    READ            reduce using rule 55 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    IF              reduce using rule 55 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    WHILE           reduce using rule 55 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    DO              reduce using rule 55 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    FOR             reduce using rule 55 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    ID              reduce using rule 55 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    INT             reduce using rule 55 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    DOUBLE          reduce using rule 55 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    ELSE            reduce using rule 55 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)


state 159

    (50) DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH . EL CLOSING_PARENTH SEMICOLON
    (66) EL -> . TL
    (67) EL -> . EL OR TL
    (68) TL -> . FL
    (69) TL -> . TL AND FL
    (70) FL -> . NL OPERATORS NL
    (71) FL -> . EA OPERATORS EA
    (72) FL -> . NL
    (73) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (74) NL -> . NOT EL
    (56) EA -> . TA
    (57) EA -> . EA PLUS TA
    (58) EA -> . EA MINUS TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 112
    NOT             shift and go to state 113
    CONSTANT        shift and go to state 29
    ID              shift and go to state 28

    EL                             shift and go to state 169
    FA                             shift and go to state 30
    MAT                            shift and go to state 31
    TL                             shift and go to state 114
    NL                             shift and go to state 115
    TA                             shift and go to state 33
    EA                             shift and go to state 111
    FL                             shift and go to state 109

state 160

    (51) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 . EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (66) EL -> . TL
    (67) EL -> . EL OR TL
    (68) TL -> . FL
    (69) TL -> . TL AND FL
    (70) FL -> . NL OPERATORS NL
    (71) FL -> . EA OPERATORS EA
    (72) FL -> . NL
    (73) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (74) NL -> . NOT EL
    (56) EA -> . TA
    (57) EA -> . EA PLUS TA
    (58) EA -> . EA MINUS TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 112
    NOT             shift and go to state 113
    CONSTANT        shift and go to state 29
    ID              shift and go to state 28

    EL                             shift and go to state 170
    FA                             shift and go to state 30
    TL                             shift and go to state 114
    NL                             shift and go to state 115
    TA                             shift and go to state 33
    EA                             shift and go to state 111
    MAT                            shift and go to state 31
    FL                             shift and go to state 109

state 161

    (40) READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 40 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 40 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 40 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 40 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 40 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 40 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 40 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 40 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 40 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 40 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)


state 162

    (47) WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH . WHILE_AUX_2 IN_S
    (49) WHILE_AUX_2 -> . empty
    (46) empty -> .

    OPEN_BRACES     reduce using rule 46 (empty -> .)

    WHILE_AUX_2                    shift and go to state 172
    empty                          shift and go to state 171

state 163

    (39) PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 39 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 39 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 39 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 39 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 39 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 39 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 39 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 39 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 39 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 39 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)


state 164

    (38) PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)


state 165

    (18) RETURN -> empty .

    MAIN            reduce using rule 18 (RETURN -> empty .)
    FUNCTION        reduce using rule 18 (RETURN -> empty .)


state 166

    (13) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN . IF_AUX3
    (45) IF_AUX3 -> . empty
    (46) empty -> .

    MAIN            reduce using rule 46 (empty -> .)
    FUNCTION        reduce using rule 46 (empty -> .)

    empty                          shift and go to state 173
    IF_AUX3                        shift and go to state 174

state 167

    (14) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN . IF_AUX3
    (45) IF_AUX3 -> . empty
    (46) empty -> .

    MAIN            reduce using rule 46 (empty -> .)
    FUNCTION        reduce using rule 46 (empty -> .)

    IF_AUX3                        shift and go to state 175
    empty                          shift and go to state 173

state 168

    (41) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S . IF_AUX3
    (42) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S . ELSE IF_AUX2 IN_S IF_AUX3
    (45) IF_AUX3 -> . empty
    (46) empty -> .

    ELSE            shift and go to state 176
    CLOSING_BRACES  reduce using rule 46 (empty -> .)
    PRINT           reduce using rule 46 (empty -> .)
    READ            reduce using rule 46 (empty -> .)
    IF              reduce using rule 46 (empty -> .)
    WHILE           reduce using rule 46 (empty -> .)
    DO              reduce using rule 46 (empty -> .)
    FOR             reduce using rule 46 (empty -> .)
    ID              reduce using rule 46 (empty -> .)
    INT             reduce using rule 46 (empty -> .)
    DOUBLE          reduce using rule 46 (empty -> .)

    empty                          shift and go to state 173
    IF_AUX3                        shift and go to state 177

state 169

    (50) DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL . CLOSING_PARENTH SEMICOLON
    (67) EL -> EL . OR TL

    CLOSING_PARENTH shift and go to state 178
    OR              shift and go to state 130


state 170

    (51) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL . SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (67) EL -> EL . OR TL

    SEMICOLON       shift and go to state 179
    OR              shift and go to state 130


state 171

    (49) WHILE_AUX_2 -> empty .

    OPEN_BRACES     reduce using rule 49 (WHILE_AUX_2 -> empty .)
    ID              reduce using rule 49 (WHILE_AUX_2 -> empty .)


state 172

    (47) WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 . IN_S
    (55) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 116

    IN_S                           shift and go to state 180

state 173

    (45) IF_AUX3 -> empty .

    MAIN            reduce using rule 45 (IF_AUX3 -> empty .)
    FUNCTION        reduce using rule 45 (IF_AUX3 -> empty .)
    CLOSING_BRACES  reduce using rule 45 (IF_AUX3 -> empty .)
    PRINT           reduce using rule 45 (IF_AUX3 -> empty .)
    READ            reduce using rule 45 (IF_AUX3 -> empty .)
    IF              reduce using rule 45 (IF_AUX3 -> empty .)
    WHILE           reduce using rule 45 (IF_AUX3 -> empty .)
    DO              reduce using rule 45 (IF_AUX3 -> empty .)
    FOR             reduce using rule 45 (IF_AUX3 -> empty .)
    ID              reduce using rule 45 (IF_AUX3 -> empty .)
    INT             reduce using rule 45 (IF_AUX3 -> empty .)
    DOUBLE          reduce using rule 45 (IF_AUX3 -> empty .)


state 174

    (13) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3 .

    MAIN            reduce using rule 13 (FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3 .)
    FUNCTION        reduce using rule 13 (FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3 .)


state 175

    (14) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3 .

    MAIN            reduce using rule 14 (FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3 .)
    FUNCTION        reduce using rule 14 (FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3 .)


state 176

    (42) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE . IF_AUX2 IN_S IF_AUX3
    (44) IF_AUX2 -> . empty
    (46) empty -> .

    OPEN_BRACES     reduce using rule 46 (empty -> .)

    empty                          shift and go to state 181
    IF_AUX2                        shift and go to state 182

state 177

    (41) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .

    CLOSING_BRACES  reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    PRINT           reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    READ            reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    IF              reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    WHILE           reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    DO              reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    FOR             reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    ID              reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    INT             reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    DOUBLE          reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)


state 178

    (50) DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 183


state 179

    (51) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON . WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (49) WHILE_AUX_2 -> . empty
    (46) empty -> .

    ID              reduce using rule 46 (empty -> .)

    empty                          shift and go to state 171
    WHILE_AUX_2                    shift and go to state 184

state 180

    (47) WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .

    CLOSING_BRACES  reduce using rule 47 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    PRINT           reduce using rule 47 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    READ            reduce using rule 47 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    IF              reduce using rule 47 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    WHILE           reduce using rule 47 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    DO              reduce using rule 47 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    FOR             reduce using rule 47 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    ID              reduce using rule 47 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    INT             reduce using rule 47 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    DOUBLE          reduce using rule 47 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)


state 181

    (44) IF_AUX2 -> empty .

    OPEN_BRACES     reduce using rule 44 (IF_AUX2 -> empty .)


state 182

    (42) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 . IN_S IF_AUX3
    (55) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 116

    IN_S                           shift and go to state 185

state 183

    (50) DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 50 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 50 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 50 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 50 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 50 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 50 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 50 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 50 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 50 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 50 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)


state 184

    (51) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 . ASSIGN CLOSING_PARENTH IN_S
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (79) MAT -> . ID MAT_BRACKET

    ID              shift and go to state 119

    ASSIGN                         shift and go to state 186
    MAT                            shift and go to state 40

state 185

    (42) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S . IF_AUX3
    (45) IF_AUX3 -> . empty
    (46) empty -> .

    CLOSING_BRACES  reduce using rule 46 (empty -> .)
    PRINT           reduce using rule 46 (empty -> .)
    READ            reduce using rule 46 (empty -> .)
    IF              reduce using rule 46 (empty -> .)
    WHILE           reduce using rule 46 (empty -> .)
    DO              reduce using rule 46 (empty -> .)
    FOR             reduce using rule 46 (empty -> .)
    ID              reduce using rule 46 (empty -> .)
    INT             reduce using rule 46 (empty -> .)
    DOUBLE          reduce using rule 46 (empty -> .)

    empty                          shift and go to state 173
    IF_AUX3                        shift and go to state 187

state 186

    (51) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN . CLOSING_PARENTH IN_S

    CLOSING_PARENTH shift and go to state 188


state 187

    (42) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .

    CLOSING_BRACES  reduce using rule 42 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    PRINT           reduce using rule 42 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    READ            reduce using rule 42 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    IF              reduce using rule 42 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    WHILE           reduce using rule 42 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    DO              reduce using rule 42 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    FOR             reduce using rule 42 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    ID              reduce using rule 42 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    INT             reduce using rule 42 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    DOUBLE          reduce using rule 42 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)


state 188

    (51) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH . IN_S
    (55) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 116

    IN_S                           shift and go to state 189

state 189

    (51) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .

    CLOSING_BRACES  reduce using rule 51 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    PRINT           reduce using rule 51 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    READ            reduce using rule 51 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    IF              reduce using rule 51 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    WHILE           reduce using rule 51 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    DO              reduce using rule 51 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    FOR             reduce using rule 51 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    ID              reduce using rule 51 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    INT             reduce using rule 51 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    DOUBLE          reduce using rule 51 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 5 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 68 resolved as shift
WARNING: shift/reduce conflict for READ in state 68 resolved as shift
WARNING: shift/reduce conflict for IF in state 68 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 68 resolved as shift
WARNING: shift/reduce conflict for DO in state 68 resolved as shift
WARNING: shift/reduce conflict for FOR in state 68 resolved as shift
WARNING: shift/reduce conflict for ID in state 68 resolved as shift
WARNING: shift/reduce conflict for INT in state 68 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 68 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 75 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 75 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 75 resolved as shift
WARNING: shift/reduce conflict for READ in state 75 resolved as shift
WARNING: shift/reduce conflict for IF in state 75 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 75 resolved as shift
WARNING: shift/reduce conflict for DO in state 75 resolved as shift
WARNING: shift/reduce conflict for FOR in state 75 resolved as shift
WARNING: shift/reduce conflict for ID in state 75 resolved as shift
WARNING: shift/reduce conflict for INT in state 75 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 75 resolved as shift
WARNING: shift/reduce conflict for INT in state 78 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 78 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 107 resolved as shift
WARNING: shift/reduce conflict for READ in state 107 resolved as shift
WARNING: shift/reduce conflict for IF in state 107 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 107 resolved as shift
WARNING: shift/reduce conflict for DO in state 107 resolved as shift
WARNING: shift/reduce conflict for FOR in state 107 resolved as shift
WARNING: shift/reduce conflict for ID in state 107 resolved as shift
WARNING: shift/reduce conflict for INT in state 107 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 107 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 108 resolved as shift
WARNING: shift/reduce conflict for READ in state 108 resolved as shift
WARNING: shift/reduce conflict for IF in state 108 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 108 resolved as shift
WARNING: shift/reduce conflict for DO in state 108 resolved as shift
WARNING: shift/reduce conflict for FOR in state 108 resolved as shift
WARNING: shift/reduce conflict for ID in state 108 resolved as shift
WARNING: shift/reduce conflict for INT in state 108 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 108 resolved as shift
WARNING: shift/reduce conflict for AND in state 114 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for LOWER_THAN in state 115 resolved as shift
WARNING: shift/reduce conflict for BIGGER_THAN in state 115 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 116 resolved as shift
WARNING: shift/reduce conflict for READ in state 116 resolved as shift
WARNING: shift/reduce conflict for IF in state 116 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 116 resolved as shift
WARNING: shift/reduce conflict for DO in state 116 resolved as shift
WARNING: shift/reduce conflict for FOR in state 116 resolved as shift
WARNING: shift/reduce conflict for ID in state 116 resolved as shift
WARNING: shift/reduce conflict for INT in state 116 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 116 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 127 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 127 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 127 resolved as shift
WARNING: shift/reduce conflict for READ in state 127 resolved as shift
WARNING: shift/reduce conflict for IF in state 127 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 127 resolved as shift
WARNING: shift/reduce conflict for DO in state 127 resolved as shift
WARNING: shift/reduce conflict for FOR in state 127 resolved as shift
WARNING: shift/reduce conflict for ID in state 127 resolved as shift
WARNING: shift/reduce conflict for INT in state 127 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 127 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 128 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 128 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 128 resolved as shift
WARNING: shift/reduce conflict for READ in state 128 resolved as shift
WARNING: shift/reduce conflict for IF in state 128 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 128 resolved as shift
WARNING: shift/reduce conflict for DO in state 128 resolved as shift
WARNING: shift/reduce conflict for FOR in state 128 resolved as shift
WARNING: shift/reduce conflict for ID in state 128 resolved as shift
WARNING: shift/reduce conflict for INT in state 128 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 128 resolved as shift
WARNING: shift/reduce conflict for OR in state 138 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 141 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 141 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 141 resolved as shift
WARNING: shift/reduce conflict for READ in state 141 resolved as shift
WARNING: shift/reduce conflict for IF in state 141 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 141 resolved as shift
WARNING: shift/reduce conflict for DO in state 141 resolved as shift
WARNING: shift/reduce conflict for FOR in state 141 resolved as shift
WARNING: shift/reduce conflict for ID in state 141 resolved as shift
WARNING: shift/reduce conflict for INT in state 141 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 141 resolved as shift
WARNING: shift/reduce conflict for AND in state 153 resolved as shift
WARNING: reduce/reduce conflict in state 68 resolved using rule (S -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 68
WARNING: reduce/reduce conflict in state 68 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (S -> <empty>) in state 68
WARNING: reduce/reduce conflict in state 75 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 75
WARNING: reduce/reduce conflict in state 107 resolved using rule (S -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 107
WARNING: reduce/reduce conflict in state 107 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (S -> <empty>) in state 107
WARNING: reduce/reduce conflict in state 108 resolved using rule (S -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 108
WARNING: reduce/reduce conflict in state 108 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (S -> <empty>) in state 108
WARNING: reduce/reduce conflict in state 116 resolved using rule (S -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 116
WARNING: reduce/reduce conflict in state 116 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (S -> <empty>) in state 116
WARNING: reduce/reduce conflict in state 127 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 127
WARNING: reduce/reduce conflict in state 128 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 128
WARNING: reduce/reduce conflict in state 141 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 141
WARNING: Rule (STATEMENTS -> <empty>) is never reduced
WARNING: Rule (S -> <empty>) is never reduced
