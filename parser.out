Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> VAR FUNC M
Rule 2     VAR -> TIPO DECLARE SEMICOLON
Rule 3     VAR -> TIPO MAT SEMICOLON
Rule 4     VAR -> VAR TIPO DECLARE SEMICOLON
Rule 5     VAR -> VAR TIPO MAT SEMICOLON
Rule 6     VAR -> <empty>
Rule 7     DECLARE -> ID
Rule 8     DECLARE -> DECLARE COMA ID
Rule 9     DECLARE -> ASSIGN
Rule 10    DECLARE -> DECLARE COMA ASSIGN
Rule 11    ASSIGN -> ID EQUAL EA
Rule 12    ASSIGN -> MAT EQUAL EA
Rule 13    FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3
Rule 14    FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3
Rule 15    FUNC -> empty
Rule 16    SET_ID -> ID
Rule 17    DECLARE_FUNC -> empty
Rule 18    RETURN -> empty
Rule 19    AUX_FUNC -> empty
Rule 20    M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES
Rule 21    TIPO -> INT
Rule 22    TIPO -> DOUBLE
Rule 23    S -> STATEMENTS
Rule 24    S -> S STATEMENTS
Rule 25    S -> <empty>
Rule 26    STATEMENTS -> VAR
Rule 27    STATEMENTS -> IDSTAT
Rule 28    STATEMENTS -> PRINTSTAT
Rule 29    STATEMENTS -> READSTAT
Rule 30    STATEMENTS -> IFSTAT
Rule 31    STATEMENTS -> WHILESTAT
Rule 32    STATEMENTS -> DOSTAT
Rule 33    STATEMENTS -> FORSTAT
Rule 34    STATEMENTS -> FUNCSTAT
Rule 35    STATEMENTS -> INC_STAT
Rule 36    STATEMENTS -> <empty>
Rule 37    IDSTAT -> ASSIGN SEMICOLON
Rule 38    PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
Rule 39    PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
Rule 40    READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
Rule 41    IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
Rule 42    IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
Rule 43    IF_AUX1 -> empty
Rule 44    IF_AUX2 -> empty
Rule 45    IF_AUX3 -> empty
Rule 46    empty -> <empty>
Rule 47    WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
Rule 48    WHILE_AUX_1 -> empty
Rule 49    WHILE_AUX_2 -> empty
Rule 50    DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
Rule 51    FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
Rule 52    FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
Rule 53    INC_STAT -> ID PLUSPLUS SEMICOLON
Rule 54    INC_STAT -> ID MINUSMINUS SEMICOLON
Rule 55    IN_S -> OPEN_BRACES S CLOSING_BRACES
Rule 56    EA -> TA
Rule 57    EA -> EA PLUS TA
Rule 58    EA -> EA MINUS TA
Rule 59    FA -> CONSTANT
Rule 60    FA -> ID
Rule 61    FA -> MAT
Rule 62    FA -> OPEN_PARENTH EA CLOSING_PARENTH
Rule 63    TA -> FA
Rule 64    TA -> TA MULTIPLY FA
Rule 65    TA -> TA DIVISION FA
Rule 66    EL -> TL
Rule 67    EL -> EL OR TL
Rule 68    TL -> FL
Rule 69    TL -> TL AND FL
Rule 70    FL -> NL OPERATORS NL
Rule 71    FL -> EA OPERATORS EA
Rule 72    FL -> NL
Rule 73    FL -> OPEN_PARENTH EL CLOSING_PARENTH
Rule 74    NL -> NOT EL
Rule 75    OPERATORS -> NOT_EQUAL
Rule 76    OPERATORS -> LOWER_THAN
Rule 77    OPERATORS -> BIGGER_THAN
Rule 78    OPERATORS -> EQUAL_EQUAL
Rule 79    MAT -> ID MAT_BRACKET
Rule 80    MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET
Rule 81    MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET

Terminals, with rules where they appear

AND                  : 69
BIGGER_THAN          : 77
CLOSING_BRACES       : 13 14 20 55
CLOSING_BRACKET      : 80 81
CLOSING_PARENTH      : 13 14 20 38 39 40 41 42 47 50 51 52 62 73
COMA                 : 8 10
COMMENT              : 
CONSTANT             : 59
DIVISION             : 65
DO                   : 50
DOUBLE               : 22
ELSE                 : 42
EQUAL                : 11 12
EQUAL_EQUAL          : 78
FOR                  : 51
FUNCTION             : 13 14
ID                   : 7 8 11 16 52 53 54 60 79
IF                   : 41 42
INT                  : 21
LOWER_THAN           : 76
MAIN                 : 20
MINUS                : 58
MINUSMINUS           : 54
MULTIPLY             : 64
NOT                  : 74
NOT_EQUAL            : 75
OPEN_BRACES          : 13 14 20 55
OPEN_BRACKET         : 80 81
OPEN_PARENTH         : 13 14 20 38 39 40 41 42 47 50 51 52 62 73
OR                   : 67
PLUS                 : 57
PLUSPLUS             : 53
PRINT                : 38 39
READ                 : 40
SEMICOLON            : 2 3 4 5 37 38 39 40 50 51 51 52 53 54
STRING               : 39
WHILE                : 47 50
error                : 

Nonterminals, with rules where they appear

ASSIGN               : 9 10 37 51 51
AUX_FUNC             : 13 14
DECLARE              : 2 4 8 10
DECLARE_FUNC         : 13 14
DOSTAT               : 32
EA                   : 11 12 38 40 57 58 62 71 71 80 81
EL                   : 41 42 47 50 51 67 73 74
FA                   : 63 64 65
FL                   : 68 69
FORSTAT              : 33
FUNC                 : 1 14
FUNCSTAT             : 34
IDSTAT               : 27
IFSTAT               : 30
IF_AUX1              : 41 42
IF_AUX2              : 42
IF_AUX3              : 13 14 41 42
INC_STAT             : 35
IN_S                 : 41 42 42 47 50 51
M                    : 1
MAT                  : 3 5 12 61
MAT_BRACKET          : 79 81
NL                   : 70 70 72
OPERATORS            : 70 71
PRINTSTAT            : 28
PROGRAMA             : 0
READSTAT             : 29
RETURN               : 13 14
S                    : 13 14 20 24 55
SET_ID               : 13 14
STATEMENTS           : 23 24
TA                   : 56 57 58 64 65
TIPO                 : 2 3 4 5
TL                   : 66 67 69
VAR                  : 1 4 5 26
WHILESTAT            : 31
WHILE_AUX_1          : 47 50 51
WHILE_AUX_2          : 47 51
empty                : 15 17 18 19 43 44 45 48 49

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . VAR FUNC M
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    FUNCTION        reduce using rule 6 (VAR -> .)
    MAIN            reduce using rule 6 (VAR -> .)
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4

  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]

    VAR                            shift and go to state 1
    PROGRAMA                       shift and go to state 2
    TIPO                           shift and go to state 5

state 1

    (1) PROGRAMA -> VAR . FUNC M
    (4) VAR -> VAR . TIPO DECLARE SEMICOLON
    (5) VAR -> VAR . TIPO MAT SEMICOLON
    (13) FUNC -> . FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3
    (14) FUNC -> . FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3
    (15) FUNC -> . empty
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE
    (46) empty -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 6
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4
    MAIN            reduce using rule 46 (empty -> .)

  ! FUNCTION        [ reduce using rule 46 (empty -> .) ]

    FUNC                           shift and go to state 7
    TIPO                           shift and go to state 8
    empty                          shift and go to state 9

state 2

    (0) S' -> PROGRAMA .



state 3

    (21) TIPO -> INT .

    ID              reduce using rule 21 (TIPO -> INT .)


state 4

    (22) TIPO -> DOUBLE .

    ID              reduce using rule 22 (TIPO -> DOUBLE .)


state 5

    (2) VAR -> TIPO . DECLARE SEMICOLON
    (3) VAR -> TIPO . MAT SEMICOLON
    (7) DECLARE -> . ID
    (8) DECLARE -> . DECLARE COMA ID
    (9) DECLARE -> . ASSIGN
    (10) DECLARE -> . DECLARE COMA ASSIGN
    (79) MAT -> . ID MAT_BRACKET
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA

    ID              shift and go to state 12

    MAT                            shift and go to state 10
    ASSIGN                         shift and go to state 11
    DECLARE                        shift and go to state 13

state 6

    (13) FUNC -> FUNCTION . AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3
    (19) AUX_FUNC -> . empty
    (46) empty -> .

    ID              reduce using rule 46 (empty -> .)

    AUX_FUNC                       shift and go to state 14
    empty                          shift and go to state 15

state 7

    (1) PROGRAMA -> VAR FUNC . M
    (14) FUNC -> FUNC . AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3
    (20) M -> . MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES
    (19) AUX_FUNC -> . empty
    (46) empty -> .

    MAIN            shift and go to state 16
    FUNCTION        reduce using rule 46 (empty -> .)

    AUX_FUNC                       shift and go to state 17
    M                              shift and go to state 18
    empty                          shift and go to state 15

state 8

    (4) VAR -> VAR TIPO . DECLARE SEMICOLON
    (5) VAR -> VAR TIPO . MAT SEMICOLON
    (7) DECLARE -> . ID
    (8) DECLARE -> . DECLARE COMA ID
    (9) DECLARE -> . ASSIGN
    (10) DECLARE -> . DECLARE COMA ASSIGN
    (79) MAT -> . ID MAT_BRACKET
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA

    ID              shift and go to state 12

    MAT                            shift and go to state 19
    ASSIGN                         shift and go to state 11
    DECLARE                        shift and go to state 20

state 9

    (15) FUNC -> empty .

    MAIN            reduce using rule 15 (FUNC -> empty .)
    FUNCTION        reduce using rule 15 (FUNC -> empty .)


state 10

    (3) VAR -> TIPO MAT . SEMICOLON
    (12) ASSIGN -> MAT . EQUAL EA

    SEMICOLON       shift and go to state 22
    EQUAL           shift and go to state 21


state 11

    (9) DECLARE -> ASSIGN .

    SEMICOLON       reduce using rule 9 (DECLARE -> ASSIGN .)
    COMA            reduce using rule 9 (DECLARE -> ASSIGN .)


state 12

    (7) DECLARE -> ID .
    (79) MAT -> ID . MAT_BRACKET
    (11) ASSIGN -> ID . EQUAL EA
    (80) MAT_BRACKET -> . OPEN_BRACKET EA CLOSING_BRACKET
    (81) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET

    SEMICOLON       reduce using rule 7 (DECLARE -> ID .)
    COMA            reduce using rule 7 (DECLARE -> ID .)
    EQUAL           shift and go to state 24
    OPEN_BRACKET    shift and go to state 23

    MAT_BRACKET                    shift and go to state 25

state 13

    (2) VAR -> TIPO DECLARE . SEMICOLON
    (8) DECLARE -> DECLARE . COMA ID
    (10) DECLARE -> DECLARE . COMA ASSIGN

    SEMICOLON       shift and go to state 26
    COMA            shift and go to state 27


state 14

    (13) FUNC -> FUNCTION AUX_FUNC . SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3
    (16) SET_ID -> . ID

    ID              shift and go to state 29

    SET_ID                         shift and go to state 28

state 15

    (19) AUX_FUNC -> empty .

    FUNCTION        reduce using rule 19 (AUX_FUNC -> empty .)
    ID              reduce using rule 19 (AUX_FUNC -> empty .)


state 16

    (20) M -> MAIN . OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES

    OPEN_PARENTH    shift and go to state 30


state 17

    (14) FUNC -> FUNC AUX_FUNC . FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3

    FUNCTION        shift and go to state 31


state 18

    (1) PROGRAMA -> VAR FUNC M .

    $end            reduce using rule 1 (PROGRAMA -> VAR FUNC M .)


state 19

    (5) VAR -> VAR TIPO MAT . SEMICOLON
    (12) ASSIGN -> MAT . EQUAL EA

    SEMICOLON       shift and go to state 32
    EQUAL           shift and go to state 21


state 20

    (4) VAR -> VAR TIPO DECLARE . SEMICOLON
    (8) DECLARE -> DECLARE . COMA ID
    (10) DECLARE -> DECLARE . COMA ASSIGN

    SEMICOLON       shift and go to state 33
    COMA            shift and go to state 27


state 21

    (12) ASSIGN -> MAT EQUAL . EA
    (56) EA -> . TA
    (57) EA -> . EA PLUS TA
    (58) EA -> . EA MINUS TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 37
    ID              shift and go to state 40
    OPEN_PARENTH    shift and go to state 36

    FA                             shift and go to state 35
    MAT                            shift and go to state 34
    TA                             shift and go to state 38
    EA                             shift and go to state 39

state 22

    (3) VAR -> TIPO MAT SEMICOLON .

    INT             reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    DOUBLE          reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    CLOSING_BRACES  reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    PRINT           reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    READ            reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    IF              reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    WHILE           reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    DO              reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    FOR             reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    ID              reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    FUNCTION        reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)
    MAIN            reduce using rule 3 (VAR -> TIPO MAT SEMICOLON .)


state 23

    (80) MAT_BRACKET -> OPEN_BRACKET . EA CLOSING_BRACKET
    (56) EA -> . TA
    (57) EA -> . EA PLUS TA
    (58) EA -> . EA MINUS TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 37
    ID              shift and go to state 40
    OPEN_PARENTH    shift and go to state 36

    FA                             shift and go to state 35
    MAT                            shift and go to state 34
    TA                             shift and go to state 38
    EA                             shift and go to state 41

state 24

    (11) ASSIGN -> ID EQUAL . EA
    (56) EA -> . TA
    (57) EA -> . EA PLUS TA
    (58) EA -> . EA MINUS TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 37
    ID              shift and go to state 40
    OPEN_PARENTH    shift and go to state 36

    FA                             shift and go to state 35
    MAT                            shift and go to state 34
    TA                             shift and go to state 38
    EA                             shift and go to state 42

state 25

    (79) MAT -> ID MAT_BRACKET .
    (81) MAT_BRACKET -> MAT_BRACKET . OPEN_BRACKET EA CLOSING_BRACKET

    MULTIPLY        reduce using rule 79 (MAT -> ID MAT_BRACKET .)
    DIVISION        reduce using rule 79 (MAT -> ID MAT_BRACKET .)
    PLUS            reduce using rule 79 (MAT -> ID MAT_BRACKET .)
    MINUS           reduce using rule 79 (MAT -> ID MAT_BRACKET .)
    NOT_EQUAL       reduce using rule 79 (MAT -> ID MAT_BRACKET .)
    LOWER_THAN      reduce using rule 79 (MAT -> ID MAT_BRACKET .)
    BIGGER_THAN     reduce using rule 79 (MAT -> ID MAT_BRACKET .)
    EQUAL_EQUAL     reduce using rule 79 (MAT -> ID MAT_BRACKET .)
    SEMICOLON       reduce using rule 79 (MAT -> ID MAT_BRACKET .)
    COMA            reduce using rule 79 (MAT -> ID MAT_BRACKET .)
    CLOSING_PARENTH reduce using rule 79 (MAT -> ID MAT_BRACKET .)
    CLOSING_BRACKET reduce using rule 79 (MAT -> ID MAT_BRACKET .)
    AND             reduce using rule 79 (MAT -> ID MAT_BRACKET .)
    OR              reduce using rule 79 (MAT -> ID MAT_BRACKET .)
    EQUAL           reduce using rule 79 (MAT -> ID MAT_BRACKET .)
    OPEN_BRACKET    shift and go to state 43


state 26

    (2) VAR -> TIPO DECLARE SEMICOLON .

    INT             reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    DOUBLE          reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    CLOSING_BRACES  reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    PRINT           reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    READ            reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    IF              reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    WHILE           reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    DO              reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    FOR             reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    ID              reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    FUNCTION        reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)
    MAIN            reduce using rule 2 (VAR -> TIPO DECLARE SEMICOLON .)


state 27

    (8) DECLARE -> DECLARE COMA . ID
    (10) DECLARE -> DECLARE COMA . ASSIGN
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (79) MAT -> . ID MAT_BRACKET

    ID              shift and go to state 46

    ASSIGN                         shift and go to state 45
    MAT                            shift and go to state 44

state 28

    (13) FUNC -> FUNCTION AUX_FUNC SET_ID . OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3

    OPEN_PARENTH    shift and go to state 47


state 29

    (16) SET_ID -> ID .

    OPEN_PARENTH    reduce using rule 16 (SET_ID -> ID .)


state 30

    (20) M -> MAIN OPEN_PARENTH . CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES

    CLOSING_PARENTH shift and go to state 48


state 31

    (14) FUNC -> FUNC AUX_FUNC FUNCTION . SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3
    (16) SET_ID -> . ID

    ID              shift and go to state 29

    SET_ID                         shift and go to state 49

state 32

    (5) VAR -> VAR TIPO MAT SEMICOLON .

    INT             reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    DOUBLE          reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    CLOSING_BRACES  reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    PRINT           reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    READ            reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    IF              reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    WHILE           reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    DO              reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    FOR             reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    ID              reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    FUNCTION        reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)
    MAIN            reduce using rule 5 (VAR -> VAR TIPO MAT SEMICOLON .)


state 33

    (4) VAR -> VAR TIPO DECLARE SEMICOLON .

    INT             reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    DOUBLE          reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    CLOSING_BRACES  reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    PRINT           reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    READ            reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    IF              reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    WHILE           reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    DO              reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    FOR             reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    ID              reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    FUNCTION        reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)
    MAIN            reduce using rule 4 (VAR -> VAR TIPO DECLARE SEMICOLON .)


state 34

    (61) FA -> MAT .

    MULTIPLY        reduce using rule 61 (FA -> MAT .)
    DIVISION        reduce using rule 61 (FA -> MAT .)
    PLUS            reduce using rule 61 (FA -> MAT .)
    MINUS           reduce using rule 61 (FA -> MAT .)
    AND             reduce using rule 61 (FA -> MAT .)
    CLOSING_PARENTH reduce using rule 61 (FA -> MAT .)
    OR              reduce using rule 61 (FA -> MAT .)
    NOT_EQUAL       reduce using rule 61 (FA -> MAT .)
    LOWER_THAN      reduce using rule 61 (FA -> MAT .)
    BIGGER_THAN     reduce using rule 61 (FA -> MAT .)
    EQUAL_EQUAL     reduce using rule 61 (FA -> MAT .)
    SEMICOLON       reduce using rule 61 (FA -> MAT .)
    CLOSING_BRACKET reduce using rule 61 (FA -> MAT .)
    COMA            reduce using rule 61 (FA -> MAT .)


state 35

    (63) TA -> FA .

    MULTIPLY        reduce using rule 63 (TA -> FA .)
    DIVISION        reduce using rule 63 (TA -> FA .)
    PLUS            reduce using rule 63 (TA -> FA .)
    MINUS           reduce using rule 63 (TA -> FA .)
    AND             reduce using rule 63 (TA -> FA .)
    CLOSING_PARENTH reduce using rule 63 (TA -> FA .)
    OR              reduce using rule 63 (TA -> FA .)
    NOT_EQUAL       reduce using rule 63 (TA -> FA .)
    LOWER_THAN      reduce using rule 63 (TA -> FA .)
    BIGGER_THAN     reduce using rule 63 (TA -> FA .)
    EQUAL_EQUAL     reduce using rule 63 (TA -> FA .)
    SEMICOLON       reduce using rule 63 (TA -> FA .)
    COMA            reduce using rule 63 (TA -> FA .)
    CLOSING_BRACKET reduce using rule 63 (TA -> FA .)


state 36

    (62) FA -> OPEN_PARENTH . EA CLOSING_PARENTH
    (56) EA -> . TA
    (57) EA -> . EA PLUS TA
    (58) EA -> . EA MINUS TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 37
    ID              shift and go to state 40
    OPEN_PARENTH    shift and go to state 36

    FA                             shift and go to state 35
    MAT                            shift and go to state 34
    TA                             shift and go to state 38
    EA                             shift and go to state 50

state 37

    (59) FA -> CONSTANT .

    MULTIPLY        reduce using rule 59 (FA -> CONSTANT .)
    DIVISION        reduce using rule 59 (FA -> CONSTANT .)
    PLUS            reduce using rule 59 (FA -> CONSTANT .)
    MINUS           reduce using rule 59 (FA -> CONSTANT .)
    AND             reduce using rule 59 (FA -> CONSTANT .)
    CLOSING_PARENTH reduce using rule 59 (FA -> CONSTANT .)
    OR              reduce using rule 59 (FA -> CONSTANT .)
    NOT_EQUAL       reduce using rule 59 (FA -> CONSTANT .)
    LOWER_THAN      reduce using rule 59 (FA -> CONSTANT .)
    BIGGER_THAN     reduce using rule 59 (FA -> CONSTANT .)
    EQUAL_EQUAL     reduce using rule 59 (FA -> CONSTANT .)
    SEMICOLON       reduce using rule 59 (FA -> CONSTANT .)
    CLOSING_BRACKET reduce using rule 59 (FA -> CONSTANT .)
    COMA            reduce using rule 59 (FA -> CONSTANT .)


state 38

    (56) EA -> TA .
    (64) TA -> TA . MULTIPLY FA
    (65) TA -> TA . DIVISION FA

    CLOSING_BRACKET reduce using rule 56 (EA -> TA .)
    PLUS            reduce using rule 56 (EA -> TA .)
    MINUS           reduce using rule 56 (EA -> TA .)
    NOT_EQUAL       reduce using rule 56 (EA -> TA .)
    LOWER_THAN      reduce using rule 56 (EA -> TA .)
    BIGGER_THAN     reduce using rule 56 (EA -> TA .)
    EQUAL_EQUAL     reduce using rule 56 (EA -> TA .)
    CLOSING_PARENTH reduce using rule 56 (EA -> TA .)
    SEMICOLON       reduce using rule 56 (EA -> TA .)
    COMA            reduce using rule 56 (EA -> TA .)
    AND             reduce using rule 56 (EA -> TA .)
    OR              reduce using rule 56 (EA -> TA .)
    MULTIPLY        shift and go to state 51
    DIVISION        shift and go to state 52


state 39

    (12) ASSIGN -> MAT EQUAL EA .
    (57) EA -> EA . PLUS TA
    (58) EA -> EA . MINUS TA

    SEMICOLON       reduce using rule 12 (ASSIGN -> MAT EQUAL EA .)
    CLOSING_PARENTH reduce using rule 12 (ASSIGN -> MAT EQUAL EA .)
    COMA            reduce using rule 12 (ASSIGN -> MAT EQUAL EA .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54


state 40

    (60) FA -> ID .
    (79) MAT -> ID . MAT_BRACKET
    (80) MAT_BRACKET -> . OPEN_BRACKET EA CLOSING_BRACKET
    (81) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET

    MULTIPLY        reduce using rule 60 (FA -> ID .)
    DIVISION        reduce using rule 60 (FA -> ID .)
    PLUS            reduce using rule 60 (FA -> ID .)
    MINUS           reduce using rule 60 (FA -> ID .)
    AND             reduce using rule 60 (FA -> ID .)
    CLOSING_PARENTH reduce using rule 60 (FA -> ID .)
    OR              reduce using rule 60 (FA -> ID .)
    NOT_EQUAL       reduce using rule 60 (FA -> ID .)
    LOWER_THAN      reduce using rule 60 (FA -> ID .)
    BIGGER_THAN     reduce using rule 60 (FA -> ID .)
    EQUAL_EQUAL     reduce using rule 60 (FA -> ID .)
    SEMICOLON       reduce using rule 60 (FA -> ID .)
    CLOSING_BRACKET reduce using rule 60 (FA -> ID .)
    COMA            reduce using rule 60 (FA -> ID .)
    OPEN_BRACKET    shift and go to state 23

    MAT_BRACKET                    shift and go to state 25

state 41

    (80) MAT_BRACKET -> OPEN_BRACKET EA . CLOSING_BRACKET
    (57) EA -> EA . PLUS TA
    (58) EA -> EA . MINUS TA

    CLOSING_BRACKET shift and go to state 55
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54


state 42

    (11) ASSIGN -> ID EQUAL EA .
    (57) EA -> EA . PLUS TA
    (58) EA -> EA . MINUS TA

    SEMICOLON       reduce using rule 11 (ASSIGN -> ID EQUAL EA .)
    CLOSING_PARENTH reduce using rule 11 (ASSIGN -> ID EQUAL EA .)
    COMA            reduce using rule 11 (ASSIGN -> ID EQUAL EA .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54


state 43

    (81) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET . EA CLOSING_BRACKET
    (56) EA -> . TA
    (57) EA -> . EA PLUS TA
    (58) EA -> . EA MINUS TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 37
    ID              shift and go to state 40
    OPEN_PARENTH    shift and go to state 36

    FA                             shift and go to state 35
    MAT                            shift and go to state 34
    TA                             shift and go to state 38
    EA                             shift and go to state 56

state 44

    (12) ASSIGN -> MAT . EQUAL EA

    EQUAL           shift and go to state 21


state 45

    (10) DECLARE -> DECLARE COMA ASSIGN .

    SEMICOLON       reduce using rule 10 (DECLARE -> DECLARE COMA ASSIGN .)
    COMA            reduce using rule 10 (DECLARE -> DECLARE COMA ASSIGN .)


state 46

    (8) DECLARE -> DECLARE COMA ID .
    (11) ASSIGN -> ID . EQUAL EA
    (79) MAT -> ID . MAT_BRACKET
    (80) MAT_BRACKET -> . OPEN_BRACKET EA CLOSING_BRACKET
    (81) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET

    SEMICOLON       reduce using rule 8 (DECLARE -> DECLARE COMA ID .)
    COMA            reduce using rule 8 (DECLARE -> DECLARE COMA ID .)
    EQUAL           shift and go to state 24
    OPEN_BRACKET    shift and go to state 23

    MAT_BRACKET                    shift and go to state 25

state 47

    (13) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH . CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3

    CLOSING_PARENTH shift and go to state 57


state 48

    (20) M -> MAIN OPEN_PARENTH CLOSING_PARENTH . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 58


state 49

    (14) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID . OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3

    OPEN_PARENTH    shift and go to state 59


state 50

    (62) FA -> OPEN_PARENTH EA . CLOSING_PARENTH
    (57) EA -> EA . PLUS TA
    (58) EA -> EA . MINUS TA

    CLOSING_PARENTH shift and go to state 60
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54


state 51

    (64) TA -> TA MULTIPLY . FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 37
    ID              shift and go to state 40
    OPEN_PARENTH    shift and go to state 36

    FA                             shift and go to state 61
    MAT                            shift and go to state 34

state 52

    (65) TA -> TA DIVISION . FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 37
    ID              shift and go to state 40
    OPEN_PARENTH    shift and go to state 36

    FA                             shift and go to state 62
    MAT                            shift and go to state 34

state 53

    (57) EA -> EA PLUS . TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 37
    ID              shift and go to state 40
    OPEN_PARENTH    shift and go to state 36

    FA                             shift and go to state 35
    MAT                            shift and go to state 34
    TA                             shift and go to state 63

state 54

    (58) EA -> EA MINUS . TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 37
    ID              shift and go to state 40
    OPEN_PARENTH    shift and go to state 36

    FA                             shift and go to state 35
    MAT                            shift and go to state 34
    TA                             shift and go to state 64

state 55

    (80) MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .

    OPEN_BRACKET    reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)
    EQUAL           reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)
    MULTIPLY        reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)
    DIVISION        reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)
    PLUS            reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)
    MINUS           reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)
    COMA            reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)
    CLOSING_PARENTH reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)
    CLOSING_BRACKET reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)
    NOT_EQUAL       reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)
    LOWER_THAN      reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)
    BIGGER_THAN     reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)
    EQUAL_EQUAL     reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)
    AND             reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)
    OR              reduce using rule 80 (MAT_BRACKET -> OPEN_BRACKET EA CLOSING_BRACKET .)


state 56

    (81) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA . CLOSING_BRACKET
    (57) EA -> EA . PLUS TA
    (58) EA -> EA . MINUS TA

    CLOSING_BRACKET shift and go to state 65
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54


state 57

    (13) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH . DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3
    (17) DECLARE_FUNC -> . empty
    (46) empty -> .

    OPEN_BRACES     reduce using rule 46 (empty -> .)

    DECLARE_FUNC                   shift and go to state 66
    empty                          shift and go to state 67

state 58

    (20) M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES . S CLOSING_BRACES
    (23) S -> . STATEMENTS
    (24) S -> . S STATEMENTS
    (25) S -> .
    (26) STATEMENTS -> . VAR
    (27) STATEMENTS -> . IDSTAT
    (28) STATEMENTS -> . PRINTSTAT
    (29) STATEMENTS -> . READSTAT
    (30) STATEMENTS -> . IFSTAT
    (31) STATEMENTS -> . WHILESTAT
    (32) STATEMENTS -> . DOSTAT
    (33) STATEMENTS -> . FORSTAT
    (34) STATEMENTS -> . FUNCSTAT
    (35) STATEMENTS -> . INC_STAT
    (36) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (37) IDSTAT -> . ASSIGN SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (39) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (40) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (47) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (50) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (51) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (52) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (53) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (54) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (79) MAT -> . ID MAT_BRACKET

  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for READ resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for IF resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for DO resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for FOR resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for ID resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 6 (VAR -> .)
    PRINT           shift and go to state 76
    READ            shift and go to state 85
    IF              shift and go to state 84
    WHILE           shift and go to state 73
    DO              shift and go to state 78
    FOR             shift and go to state 77
    ID              shift and go to state 79
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4

  ! CLOSING_BRACES  [ reduce using rule 25 (S -> .) ]
  ! PRINT           [ reduce using rule 25 (S -> .) ]
  ! READ            [ reduce using rule 25 (S -> .) ]
  ! IF              [ reduce using rule 25 (S -> .) ]
  ! WHILE           [ reduce using rule 25 (S -> .) ]
  ! DO              [ reduce using rule 25 (S -> .) ]
  ! FOR             [ reduce using rule 25 (S -> .) ]
  ! ID              [ reduce using rule 25 (S -> .) ]
  ! INT             [ reduce using rule 25 (S -> .) ]
  ! DOUBLE          [ reduce using rule 25 (S -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 36 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 36 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    DOSTAT                         shift and go to state 75
    ASSIGN                         shift and go to state 68
    FORSTAT                        shift and go to state 69
    IDSTAT                         shift and go to state 70
    FUNCSTAT                       shift and go to state 71
    STATEMENTS                     shift and go to state 83
    MAT                            shift and go to state 44
    WHILESTAT                      shift and go to state 80
    VAR                            shift and go to state 81
    INC_STAT                       shift and go to state 72
    READSTAT                       shift and go to state 82
    TIPO                           shift and go to state 5
    PRINTSTAT                      shift and go to state 74
    IFSTAT                         shift and go to state 86
    S                              shift and go to state 87

state 59

    (14) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH . CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3

    CLOSING_PARENTH shift and go to state 88


state 60

    (62) FA -> OPEN_PARENTH EA CLOSING_PARENTH .

    MULTIPLY        reduce using rule 62 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    DIVISION        reduce using rule 62 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    PLUS            reduce using rule 62 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    MINUS           reduce using rule 62 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    AND             reduce using rule 62 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    CLOSING_PARENTH reduce using rule 62 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    OR              reduce using rule 62 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    NOT_EQUAL       reduce using rule 62 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    LOWER_THAN      reduce using rule 62 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    BIGGER_THAN     reduce using rule 62 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    EQUAL_EQUAL     reduce using rule 62 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    SEMICOLON       reduce using rule 62 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    CLOSING_BRACKET reduce using rule 62 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)
    COMA            reduce using rule 62 (FA -> OPEN_PARENTH EA CLOSING_PARENTH .)


state 61

    (64) TA -> TA MULTIPLY FA .

    MULTIPLY        reduce using rule 64 (TA -> TA MULTIPLY FA .)
    DIVISION        reduce using rule 64 (TA -> TA MULTIPLY FA .)
    PLUS            reduce using rule 64 (TA -> TA MULTIPLY FA .)
    MINUS           reduce using rule 64 (TA -> TA MULTIPLY FA .)
    AND             reduce using rule 64 (TA -> TA MULTIPLY FA .)
    CLOSING_PARENTH reduce using rule 64 (TA -> TA MULTIPLY FA .)
    OR              reduce using rule 64 (TA -> TA MULTIPLY FA .)
    NOT_EQUAL       reduce using rule 64 (TA -> TA MULTIPLY FA .)
    LOWER_THAN      reduce using rule 64 (TA -> TA MULTIPLY FA .)
    BIGGER_THAN     reduce using rule 64 (TA -> TA MULTIPLY FA .)
    EQUAL_EQUAL     reduce using rule 64 (TA -> TA MULTIPLY FA .)
    SEMICOLON       reduce using rule 64 (TA -> TA MULTIPLY FA .)
    COMA            reduce using rule 64 (TA -> TA MULTIPLY FA .)
    CLOSING_BRACKET reduce using rule 64 (TA -> TA MULTIPLY FA .)


state 62

    (65) TA -> TA DIVISION FA .

    MULTIPLY        reduce using rule 65 (TA -> TA DIVISION FA .)
    DIVISION        reduce using rule 65 (TA -> TA DIVISION FA .)
    PLUS            reduce using rule 65 (TA -> TA DIVISION FA .)
    MINUS           reduce using rule 65 (TA -> TA DIVISION FA .)
    AND             reduce using rule 65 (TA -> TA DIVISION FA .)
    CLOSING_PARENTH reduce using rule 65 (TA -> TA DIVISION FA .)
    OR              reduce using rule 65 (TA -> TA DIVISION FA .)
    NOT_EQUAL       reduce using rule 65 (TA -> TA DIVISION FA .)
    LOWER_THAN      reduce using rule 65 (TA -> TA DIVISION FA .)
    BIGGER_THAN     reduce using rule 65 (TA -> TA DIVISION FA .)
    EQUAL_EQUAL     reduce using rule 65 (TA -> TA DIVISION FA .)
    SEMICOLON       reduce using rule 65 (TA -> TA DIVISION FA .)
    COMA            reduce using rule 65 (TA -> TA DIVISION FA .)
    CLOSING_BRACKET reduce using rule 65 (TA -> TA DIVISION FA .)


state 63

    (57) EA -> EA PLUS TA .
    (64) TA -> TA . MULTIPLY FA
    (65) TA -> TA . DIVISION FA

    CLOSING_BRACKET reduce using rule 57 (EA -> EA PLUS TA .)
    PLUS            reduce using rule 57 (EA -> EA PLUS TA .)
    MINUS           reduce using rule 57 (EA -> EA PLUS TA .)
    NOT_EQUAL       reduce using rule 57 (EA -> EA PLUS TA .)
    LOWER_THAN      reduce using rule 57 (EA -> EA PLUS TA .)
    BIGGER_THAN     reduce using rule 57 (EA -> EA PLUS TA .)
    EQUAL_EQUAL     reduce using rule 57 (EA -> EA PLUS TA .)
    CLOSING_PARENTH reduce using rule 57 (EA -> EA PLUS TA .)
    SEMICOLON       reduce using rule 57 (EA -> EA PLUS TA .)
    COMA            reduce using rule 57 (EA -> EA PLUS TA .)
    AND             reduce using rule 57 (EA -> EA PLUS TA .)
    OR              reduce using rule 57 (EA -> EA PLUS TA .)
    MULTIPLY        shift and go to state 51
    DIVISION        shift and go to state 52


state 64

    (58) EA -> EA MINUS TA .
    (64) TA -> TA . MULTIPLY FA
    (65) TA -> TA . DIVISION FA

    CLOSING_BRACKET reduce using rule 58 (EA -> EA MINUS TA .)
    PLUS            reduce using rule 58 (EA -> EA MINUS TA .)
    MINUS           reduce using rule 58 (EA -> EA MINUS TA .)
    NOT_EQUAL       reduce using rule 58 (EA -> EA MINUS TA .)
    LOWER_THAN      reduce using rule 58 (EA -> EA MINUS TA .)
    BIGGER_THAN     reduce using rule 58 (EA -> EA MINUS TA .)
    EQUAL_EQUAL     reduce using rule 58 (EA -> EA MINUS TA .)
    CLOSING_PARENTH reduce using rule 58 (EA -> EA MINUS TA .)
    SEMICOLON       reduce using rule 58 (EA -> EA MINUS TA .)
    COMA            reduce using rule 58 (EA -> EA MINUS TA .)
    AND             reduce using rule 58 (EA -> EA MINUS TA .)
    OR              reduce using rule 58 (EA -> EA MINUS TA .)
    MULTIPLY        shift and go to state 51
    DIVISION        shift and go to state 52


state 65

    (81) MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .

    OPEN_BRACKET    reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)
    EQUAL           reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)
    MULTIPLY        reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)
    DIVISION        reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)
    PLUS            reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)
    MINUS           reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)
    COMA            reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)
    CLOSING_PARENTH reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)
    CLOSING_BRACKET reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)
    NOT_EQUAL       reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)
    LOWER_THAN      reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)
    BIGGER_THAN     reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)
    EQUAL_EQUAL     reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)
    AND             reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)
    OR              reduce using rule 81 (MAT_BRACKET -> MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET .)


state 66

    (13) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC . OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3

    OPEN_BRACES     shift and go to state 89


state 67

    (17) DECLARE_FUNC -> empty .

    OPEN_BRACES     reduce using rule 17 (DECLARE_FUNC -> empty .)
    PRINT           reduce using rule 17 (DECLARE_FUNC -> empty .)
    READ            reduce using rule 17 (DECLARE_FUNC -> empty .)
    IF              reduce using rule 17 (DECLARE_FUNC -> empty .)
    WHILE           reduce using rule 17 (DECLARE_FUNC -> empty .)
    DO              reduce using rule 17 (DECLARE_FUNC -> empty .)
    FOR             reduce using rule 17 (DECLARE_FUNC -> empty .)
    ID              reduce using rule 17 (DECLARE_FUNC -> empty .)
    INT             reduce using rule 17 (DECLARE_FUNC -> empty .)
    DOUBLE          reduce using rule 17 (DECLARE_FUNC -> empty .)
    CLOSING_BRACES  reduce using rule 17 (DECLARE_FUNC -> empty .)


state 68

    (37) IDSTAT -> ASSIGN . SEMICOLON

    SEMICOLON       shift and go to state 90


state 69

    (33) STATEMENTS -> FORSTAT .

    CLOSING_BRACES  reduce using rule 33 (STATEMENTS -> FORSTAT .)
    PRINT           reduce using rule 33 (STATEMENTS -> FORSTAT .)
    READ            reduce using rule 33 (STATEMENTS -> FORSTAT .)
    IF              reduce using rule 33 (STATEMENTS -> FORSTAT .)
    WHILE           reduce using rule 33 (STATEMENTS -> FORSTAT .)
    DO              reduce using rule 33 (STATEMENTS -> FORSTAT .)
    FOR             reduce using rule 33 (STATEMENTS -> FORSTAT .)
    ID              reduce using rule 33 (STATEMENTS -> FORSTAT .)
    INT             reduce using rule 33 (STATEMENTS -> FORSTAT .)
    DOUBLE          reduce using rule 33 (STATEMENTS -> FORSTAT .)


state 70

    (27) STATEMENTS -> IDSTAT .

    CLOSING_BRACES  reduce using rule 27 (STATEMENTS -> IDSTAT .)
    PRINT           reduce using rule 27 (STATEMENTS -> IDSTAT .)
    READ            reduce using rule 27 (STATEMENTS -> IDSTAT .)
    IF              reduce using rule 27 (STATEMENTS -> IDSTAT .)
    WHILE           reduce using rule 27 (STATEMENTS -> IDSTAT .)
    DO              reduce using rule 27 (STATEMENTS -> IDSTAT .)
    FOR             reduce using rule 27 (STATEMENTS -> IDSTAT .)
    ID              reduce using rule 27 (STATEMENTS -> IDSTAT .)
    INT             reduce using rule 27 (STATEMENTS -> IDSTAT .)
    DOUBLE          reduce using rule 27 (STATEMENTS -> IDSTAT .)


state 71

    (34) STATEMENTS -> FUNCSTAT .

    CLOSING_BRACES  reduce using rule 34 (STATEMENTS -> FUNCSTAT .)
    PRINT           reduce using rule 34 (STATEMENTS -> FUNCSTAT .)
    READ            reduce using rule 34 (STATEMENTS -> FUNCSTAT .)
    IF              reduce using rule 34 (STATEMENTS -> FUNCSTAT .)
    WHILE           reduce using rule 34 (STATEMENTS -> FUNCSTAT .)
    DO              reduce using rule 34 (STATEMENTS -> FUNCSTAT .)
    FOR             reduce using rule 34 (STATEMENTS -> FUNCSTAT .)
    ID              reduce using rule 34 (STATEMENTS -> FUNCSTAT .)
    INT             reduce using rule 34 (STATEMENTS -> FUNCSTAT .)
    DOUBLE          reduce using rule 34 (STATEMENTS -> FUNCSTAT .)


state 72

    (35) STATEMENTS -> INC_STAT .

    CLOSING_BRACES  reduce using rule 35 (STATEMENTS -> INC_STAT .)
    PRINT           reduce using rule 35 (STATEMENTS -> INC_STAT .)
    READ            reduce using rule 35 (STATEMENTS -> INC_STAT .)
    IF              reduce using rule 35 (STATEMENTS -> INC_STAT .)
    WHILE           reduce using rule 35 (STATEMENTS -> INC_STAT .)
    DO              reduce using rule 35 (STATEMENTS -> INC_STAT .)
    FOR             reduce using rule 35 (STATEMENTS -> INC_STAT .)
    ID              reduce using rule 35 (STATEMENTS -> INC_STAT .)
    INT             reduce using rule 35 (STATEMENTS -> INC_STAT .)
    DOUBLE          reduce using rule 35 (STATEMENTS -> INC_STAT .)


state 73

    (47) WHILESTAT -> WHILE . WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (48) WHILE_AUX_1 -> . empty
    (46) empty -> .

    OPEN_PARENTH    reduce using rule 46 (empty -> .)

    WHILE_AUX_1                    shift and go to state 91
    empty                          shift and go to state 92

state 74

    (28) STATEMENTS -> PRINTSTAT .

    CLOSING_BRACES  reduce using rule 28 (STATEMENTS -> PRINTSTAT .)
    PRINT           reduce using rule 28 (STATEMENTS -> PRINTSTAT .)
    READ            reduce using rule 28 (STATEMENTS -> PRINTSTAT .)
    IF              reduce using rule 28 (STATEMENTS -> PRINTSTAT .)
    WHILE           reduce using rule 28 (STATEMENTS -> PRINTSTAT .)
    DO              reduce using rule 28 (STATEMENTS -> PRINTSTAT .)
    FOR             reduce using rule 28 (STATEMENTS -> PRINTSTAT .)
    ID              reduce using rule 28 (STATEMENTS -> PRINTSTAT .)
    INT             reduce using rule 28 (STATEMENTS -> PRINTSTAT .)
    DOUBLE          reduce using rule 28 (STATEMENTS -> PRINTSTAT .)


state 75

    (32) STATEMENTS -> DOSTAT .

    CLOSING_BRACES  reduce using rule 32 (STATEMENTS -> DOSTAT .)
    PRINT           reduce using rule 32 (STATEMENTS -> DOSTAT .)
    READ            reduce using rule 32 (STATEMENTS -> DOSTAT .)
    IF              reduce using rule 32 (STATEMENTS -> DOSTAT .)
    WHILE           reduce using rule 32 (STATEMENTS -> DOSTAT .)
    DO              reduce using rule 32 (STATEMENTS -> DOSTAT .)
    FOR             reduce using rule 32 (STATEMENTS -> DOSTAT .)
    ID              reduce using rule 32 (STATEMENTS -> DOSTAT .)
    INT             reduce using rule 32 (STATEMENTS -> DOSTAT .)
    DOUBLE          reduce using rule 32 (STATEMENTS -> DOSTAT .)


state 76

    (38) PRINTSTAT -> PRINT . OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (39) PRINTSTAT -> PRINT . OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON

    OPEN_PARENTH    shift and go to state 93


state 77

    (51) FORSTAT -> FOR . OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S

    OPEN_PARENTH    shift and go to state 94


state 78

    (50) DOSTAT -> DO . WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (48) WHILE_AUX_1 -> . empty
    (46) empty -> .

    OPEN_BRACES     reduce using rule 46 (empty -> .)

    empty                          shift and go to state 92
    WHILE_AUX_1                    shift and go to state 95

state 79

    (52) FUNCSTAT -> ID . OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (53) INC_STAT -> ID . PLUSPLUS SEMICOLON
    (54) INC_STAT -> ID . MINUSMINUS SEMICOLON
    (11) ASSIGN -> ID . EQUAL EA
    (79) MAT -> ID . MAT_BRACKET
    (80) MAT_BRACKET -> . OPEN_BRACKET EA CLOSING_BRACKET
    (81) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET

    OPEN_PARENTH    shift and go to state 98
    PLUSPLUS        shift and go to state 97
    MINUSMINUS      shift and go to state 96
    EQUAL           shift and go to state 24
    OPEN_BRACKET    shift and go to state 23

    MAT_BRACKET                    shift and go to state 25

state 80

    (31) STATEMENTS -> WHILESTAT .

    CLOSING_BRACES  reduce using rule 31 (STATEMENTS -> WHILESTAT .)
    PRINT           reduce using rule 31 (STATEMENTS -> WHILESTAT .)
    READ            reduce using rule 31 (STATEMENTS -> WHILESTAT .)
    IF              reduce using rule 31 (STATEMENTS -> WHILESTAT .)
    WHILE           reduce using rule 31 (STATEMENTS -> WHILESTAT .)
    DO              reduce using rule 31 (STATEMENTS -> WHILESTAT .)
    FOR             reduce using rule 31 (STATEMENTS -> WHILESTAT .)
    ID              reduce using rule 31 (STATEMENTS -> WHILESTAT .)
    INT             reduce using rule 31 (STATEMENTS -> WHILESTAT .)
    DOUBLE          reduce using rule 31 (STATEMENTS -> WHILESTAT .)


state 81

    (26) STATEMENTS -> VAR .
    (4) VAR -> VAR . TIPO DECLARE SEMICOLON
    (5) VAR -> VAR . TIPO MAT SEMICOLON
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 26 (STATEMENTS -> VAR .)
    PRINT           reduce using rule 26 (STATEMENTS -> VAR .)
    READ            reduce using rule 26 (STATEMENTS -> VAR .)
    IF              reduce using rule 26 (STATEMENTS -> VAR .)
    WHILE           reduce using rule 26 (STATEMENTS -> VAR .)
    DO              reduce using rule 26 (STATEMENTS -> VAR .)
    FOR             reduce using rule 26 (STATEMENTS -> VAR .)
    ID              reduce using rule 26 (STATEMENTS -> VAR .)
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4

  ! INT             [ reduce using rule 26 (STATEMENTS -> VAR .) ]
  ! DOUBLE          [ reduce using rule 26 (STATEMENTS -> VAR .) ]

    TIPO                           shift and go to state 8

state 82

    (29) STATEMENTS -> READSTAT .

    CLOSING_BRACES  reduce using rule 29 (STATEMENTS -> READSTAT .)
    PRINT           reduce using rule 29 (STATEMENTS -> READSTAT .)
    READ            reduce using rule 29 (STATEMENTS -> READSTAT .)
    IF              reduce using rule 29 (STATEMENTS -> READSTAT .)
    WHILE           reduce using rule 29 (STATEMENTS -> READSTAT .)
    DO              reduce using rule 29 (STATEMENTS -> READSTAT .)
    FOR             reduce using rule 29 (STATEMENTS -> READSTAT .)
    ID              reduce using rule 29 (STATEMENTS -> READSTAT .)
    INT             reduce using rule 29 (STATEMENTS -> READSTAT .)
    DOUBLE          reduce using rule 29 (STATEMENTS -> READSTAT .)


state 83

    (23) S -> STATEMENTS .

    CLOSING_BRACES  reduce using rule 23 (S -> STATEMENTS .)
    PRINT           reduce using rule 23 (S -> STATEMENTS .)
    READ            reduce using rule 23 (S -> STATEMENTS .)
    IF              reduce using rule 23 (S -> STATEMENTS .)
    WHILE           reduce using rule 23 (S -> STATEMENTS .)
    DO              reduce using rule 23 (S -> STATEMENTS .)
    FOR             reduce using rule 23 (S -> STATEMENTS .)
    ID              reduce using rule 23 (S -> STATEMENTS .)
    INT             reduce using rule 23 (S -> STATEMENTS .)
    DOUBLE          reduce using rule 23 (S -> STATEMENTS .)


state 84

    (41) IFSTAT -> IF . OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> IF . OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3

    OPEN_PARENTH    shift and go to state 99


state 85

    (40) READSTAT -> READ . OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON

    OPEN_PARENTH    shift and go to state 100


state 86

    (30) STATEMENTS -> IFSTAT .

    CLOSING_BRACES  reduce using rule 30 (STATEMENTS -> IFSTAT .)
    PRINT           reduce using rule 30 (STATEMENTS -> IFSTAT .)
    READ            reduce using rule 30 (STATEMENTS -> IFSTAT .)
    IF              reduce using rule 30 (STATEMENTS -> IFSTAT .)
    WHILE           reduce using rule 30 (STATEMENTS -> IFSTAT .)
    DO              reduce using rule 30 (STATEMENTS -> IFSTAT .)
    FOR             reduce using rule 30 (STATEMENTS -> IFSTAT .)
    ID              reduce using rule 30 (STATEMENTS -> IFSTAT .)
    INT             reduce using rule 30 (STATEMENTS -> IFSTAT .)
    DOUBLE          reduce using rule 30 (STATEMENTS -> IFSTAT .)


state 87

    (20) M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S . CLOSING_BRACES
    (24) S -> S . STATEMENTS
    (26) STATEMENTS -> . VAR
    (27) STATEMENTS -> . IDSTAT
    (28) STATEMENTS -> . PRINTSTAT
    (29) STATEMENTS -> . READSTAT
    (30) STATEMENTS -> . IFSTAT
    (31) STATEMENTS -> . WHILESTAT
    (32) STATEMENTS -> . DOSTAT
    (33) STATEMENTS -> . FORSTAT
    (34) STATEMENTS -> . FUNCSTAT
    (35) STATEMENTS -> . INC_STAT
    (36) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (37) IDSTAT -> . ASSIGN SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (39) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (40) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (47) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (50) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (51) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (52) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (53) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (54) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (79) MAT -> . ID MAT_BRACKET

  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  shift and go to state 101
    PRINT           shift and go to state 76
    READ            shift and go to state 85
    IF              shift and go to state 84
    WHILE           shift and go to state 73
    DO              shift and go to state 78
    FOR             shift and go to state 77
    ID              shift and go to state 79
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4

  ! CLOSING_BRACES  [ reduce using rule 36 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 36 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    DOSTAT                         shift and go to state 75
    ASSIGN                         shift and go to state 68
    FORSTAT                        shift and go to state 69
    IDSTAT                         shift and go to state 70
    FUNCSTAT                       shift and go to state 71
    STATEMENTS                     shift and go to state 102
    MAT                            shift and go to state 44
    WHILESTAT                      shift and go to state 80
    VAR                            shift and go to state 81
    INC_STAT                       shift and go to state 72
    READSTAT                       shift and go to state 82
    TIPO                           shift and go to state 5
    PRINTSTAT                      shift and go to state 74
    IFSTAT                         shift and go to state 86

state 88

    (14) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH . OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3

    OPEN_BRACES     shift and go to state 103


state 89

    (13) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES . S CLOSING_BRACES RETURN IF_AUX3
    (23) S -> . STATEMENTS
    (24) S -> . S STATEMENTS
    (25) S -> .
    (26) STATEMENTS -> . VAR
    (27) STATEMENTS -> . IDSTAT
    (28) STATEMENTS -> . PRINTSTAT
    (29) STATEMENTS -> . READSTAT
    (30) STATEMENTS -> . IFSTAT
    (31) STATEMENTS -> . WHILESTAT
    (32) STATEMENTS -> . DOSTAT
    (33) STATEMENTS -> . FORSTAT
    (34) STATEMENTS -> . FUNCSTAT
    (35) STATEMENTS -> . INC_STAT
    (36) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (37) IDSTAT -> . ASSIGN SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (39) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (40) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (47) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (50) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (51) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (52) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (53) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (54) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (79) MAT -> . ID MAT_BRACKET

  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for READ resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for IF resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for DO resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for FOR resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for ID resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 6 (VAR -> .)
    PRINT           shift and go to state 76
    READ            shift and go to state 85
    IF              shift and go to state 84
    WHILE           shift and go to state 73
    DO              shift and go to state 78
    FOR             shift and go to state 77
    ID              shift and go to state 79
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4

  ! CLOSING_BRACES  [ reduce using rule 25 (S -> .) ]
  ! PRINT           [ reduce using rule 25 (S -> .) ]
  ! READ            [ reduce using rule 25 (S -> .) ]
  ! IF              [ reduce using rule 25 (S -> .) ]
  ! WHILE           [ reduce using rule 25 (S -> .) ]
  ! DO              [ reduce using rule 25 (S -> .) ]
  ! FOR             [ reduce using rule 25 (S -> .) ]
  ! ID              [ reduce using rule 25 (S -> .) ]
  ! INT             [ reduce using rule 25 (S -> .) ]
  ! DOUBLE          [ reduce using rule 25 (S -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 36 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 36 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    DOSTAT                         shift and go to state 75
    ASSIGN                         shift and go to state 68
    FORSTAT                        shift and go to state 69
    IDSTAT                         shift and go to state 70
    FUNCSTAT                       shift and go to state 71
    STATEMENTS                     shift and go to state 83
    MAT                            shift and go to state 44
    WHILESTAT                      shift and go to state 80
    VAR                            shift and go to state 81
    INC_STAT                       shift and go to state 72
    READSTAT                       shift and go to state 82
    TIPO                           shift and go to state 5
    PRINTSTAT                      shift and go to state 74
    IFSTAT                         shift and go to state 86
    S                              shift and go to state 104

state 90

    (37) IDSTAT -> ASSIGN SEMICOLON .

    CLOSING_BRACES  reduce using rule 37 (IDSTAT -> ASSIGN SEMICOLON .)
    PRINT           reduce using rule 37 (IDSTAT -> ASSIGN SEMICOLON .)
    READ            reduce using rule 37 (IDSTAT -> ASSIGN SEMICOLON .)
    IF              reduce using rule 37 (IDSTAT -> ASSIGN SEMICOLON .)
    WHILE           reduce using rule 37 (IDSTAT -> ASSIGN SEMICOLON .)
    DO              reduce using rule 37 (IDSTAT -> ASSIGN SEMICOLON .)
    FOR             reduce using rule 37 (IDSTAT -> ASSIGN SEMICOLON .)
    ID              reduce using rule 37 (IDSTAT -> ASSIGN SEMICOLON .)
    INT             reduce using rule 37 (IDSTAT -> ASSIGN SEMICOLON .)
    DOUBLE          reduce using rule 37 (IDSTAT -> ASSIGN SEMICOLON .)


state 91

    (47) WHILESTAT -> WHILE WHILE_AUX_1 . OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S

    OPEN_PARENTH    shift and go to state 105


state 92

    (48) WHILE_AUX_1 -> empty .

    OPEN_PARENTH    reduce using rule 48 (WHILE_AUX_1 -> empty .)
    NOT             reduce using rule 48 (WHILE_AUX_1 -> empty .)
    CONSTANT        reduce using rule 48 (WHILE_AUX_1 -> empty .)
    ID              reduce using rule 48 (WHILE_AUX_1 -> empty .)
    OPEN_BRACES     reduce using rule 48 (WHILE_AUX_1 -> empty .)


state 93

    (38) PRINTSTAT -> PRINT OPEN_PARENTH . EA CLOSING_PARENTH SEMICOLON
    (39) PRINTSTAT -> PRINT OPEN_PARENTH . STRING CLOSING_PARENTH SEMICOLON
    (56) EA -> . TA
    (57) EA -> . EA PLUS TA
    (58) EA -> . EA MINUS TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    STRING          shift and go to state 106
    CONSTANT        shift and go to state 37
    ID              shift and go to state 40
    OPEN_PARENTH    shift and go to state 36

    FA                             shift and go to state 35
    MAT                            shift and go to state 34
    TA                             shift and go to state 38
    EA                             shift and go to state 107

state 94

    (51) FORSTAT -> FOR OPEN_PARENTH . ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (79) MAT -> . ID MAT_BRACKET

    ID              shift and go to state 109

    MAT                            shift and go to state 44
    ASSIGN                         shift and go to state 108

state 95

    (50) DOSTAT -> DO WHILE_AUX_1 . IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (55) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 111

    IN_S                           shift and go to state 110

state 96

    (54) INC_STAT -> ID MINUSMINUS . SEMICOLON

    SEMICOLON       shift and go to state 112


state 97

    (53) INC_STAT -> ID PLUSPLUS . SEMICOLON

    SEMICOLON       shift and go to state 113


state 98

    (52) FUNCSTAT -> ID OPEN_PARENTH . CLOSING_PARENTH SEMICOLON

    CLOSING_PARENTH shift and go to state 114


state 99

    (41) IFSTAT -> IF OPEN_PARENTH . EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> IF OPEN_PARENTH . EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (66) EL -> . TL
    (67) EL -> . EL OR TL
    (68) TL -> . FL
    (69) TL -> . TL AND FL
    (70) FL -> . NL OPERATORS NL
    (71) FL -> . EA OPERATORS EA
    (72) FL -> . NL
    (73) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (74) NL -> . NOT EL
    (56) EA -> . TA
    (57) EA -> . EA PLUS TA
    (58) EA -> . EA MINUS TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 115
    NOT             shift and go to state 118
    CONSTANT        shift and go to state 37
    ID              shift and go to state 40

    MAT                            shift and go to state 34
    TA                             shift and go to state 38
    FA                             shift and go to state 35
    TL                             shift and go to state 119
    FL                             shift and go to state 120
    NL                             shift and go to state 117
    EA                             shift and go to state 121
    EL                             shift and go to state 116

state 100

    (40) READSTAT -> READ OPEN_PARENTH . EA CLOSING_PARENTH SEMICOLON
    (56) EA -> . TA
    (57) EA -> . EA PLUS TA
    (58) EA -> . EA MINUS TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 37
    ID              shift and go to state 40
    OPEN_PARENTH    shift and go to state 36

    FA                             shift and go to state 35
    MAT                            shift and go to state 34
    TA                             shift and go to state 38
    EA                             shift and go to state 122

state 101

    (20) M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES .

    $end            reduce using rule 20 (M -> MAIN OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES S CLOSING_BRACES .)


state 102

    (24) S -> S STATEMENTS .

    CLOSING_BRACES  reduce using rule 24 (S -> S STATEMENTS .)
    PRINT           reduce using rule 24 (S -> S STATEMENTS .)
    READ            reduce using rule 24 (S -> S STATEMENTS .)
    IF              reduce using rule 24 (S -> S STATEMENTS .)
    WHILE           reduce using rule 24 (S -> S STATEMENTS .)
    DO              reduce using rule 24 (S -> S STATEMENTS .)
    FOR             reduce using rule 24 (S -> S STATEMENTS .)
    ID              reduce using rule 24 (S -> S STATEMENTS .)
    INT             reduce using rule 24 (S -> S STATEMENTS .)
    DOUBLE          reduce using rule 24 (S -> S STATEMENTS .)


state 103

    (14) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES . DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3
    (17) DECLARE_FUNC -> . empty
    (46) empty -> .

    PRINT           reduce using rule 46 (empty -> .)
    READ            reduce using rule 46 (empty -> .)
    IF              reduce using rule 46 (empty -> .)
    WHILE           reduce using rule 46 (empty -> .)
    DO              reduce using rule 46 (empty -> .)
    FOR             reduce using rule 46 (empty -> .)
    ID              reduce using rule 46 (empty -> .)
    INT             reduce using rule 46 (empty -> .)
    DOUBLE          reduce using rule 46 (empty -> .)
    CLOSING_BRACES  reduce using rule 46 (empty -> .)

    DECLARE_FUNC                   shift and go to state 123
    empty                          shift and go to state 67

state 104

    (13) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S . CLOSING_BRACES RETURN IF_AUX3
    (24) S -> S . STATEMENTS
    (26) STATEMENTS -> . VAR
    (27) STATEMENTS -> . IDSTAT
    (28) STATEMENTS -> . PRINTSTAT
    (29) STATEMENTS -> . READSTAT
    (30) STATEMENTS -> . IFSTAT
    (31) STATEMENTS -> . WHILESTAT
    (32) STATEMENTS -> . DOSTAT
    (33) STATEMENTS -> . FORSTAT
    (34) STATEMENTS -> . FUNCSTAT
    (35) STATEMENTS -> . INC_STAT
    (36) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (37) IDSTAT -> . ASSIGN SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (39) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (40) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (47) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (50) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (51) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (52) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (53) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (54) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (79) MAT -> . ID MAT_BRACKET

  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  shift and go to state 124
    PRINT           shift and go to state 76
    READ            shift and go to state 85
    IF              shift and go to state 84
    WHILE           shift and go to state 73
    DO              shift and go to state 78
    FOR             shift and go to state 77
    ID              shift and go to state 79
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4

  ! CLOSING_BRACES  [ reduce using rule 36 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 36 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    DOSTAT                         shift and go to state 75
    ASSIGN                         shift and go to state 68
    FORSTAT                        shift and go to state 69
    IDSTAT                         shift and go to state 70
    FUNCSTAT                       shift and go to state 71
    STATEMENTS                     shift and go to state 102
    MAT                            shift and go to state 44
    WHILESTAT                      shift and go to state 80
    VAR                            shift and go to state 81
    INC_STAT                       shift and go to state 72
    READSTAT                       shift and go to state 82
    TIPO                           shift and go to state 5
    PRINTSTAT                      shift and go to state 74
    IFSTAT                         shift and go to state 86

state 105

    (47) WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH . EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (66) EL -> . TL
    (67) EL -> . EL OR TL
    (68) TL -> . FL
    (69) TL -> . TL AND FL
    (70) FL -> . NL OPERATORS NL
    (71) FL -> . EA OPERATORS EA
    (72) FL -> . NL
    (73) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (74) NL -> . NOT EL
    (56) EA -> . TA
    (57) EA -> . EA PLUS TA
    (58) EA -> . EA MINUS TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 115
    NOT             shift and go to state 118
    CONSTANT        shift and go to state 37
    ID              shift and go to state 40

    MAT                            shift and go to state 34
    TA                             shift and go to state 38
    FA                             shift and go to state 35
    TL                             shift and go to state 119
    FL                             shift and go to state 120
    EL                             shift and go to state 125
    EA                             shift and go to state 121
    NL                             shift and go to state 117

state 106

    (39) PRINTSTAT -> PRINT OPEN_PARENTH STRING . CLOSING_PARENTH SEMICOLON

    CLOSING_PARENTH shift and go to state 126


state 107

    (38) PRINTSTAT -> PRINT OPEN_PARENTH EA . CLOSING_PARENTH SEMICOLON
    (57) EA -> EA . PLUS TA
    (58) EA -> EA . MINUS TA

    CLOSING_PARENTH shift and go to state 127
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54


state 108

    (51) FORSTAT -> FOR OPEN_PARENTH ASSIGN . SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S

    SEMICOLON       shift and go to state 128


state 109

    (11) ASSIGN -> ID . EQUAL EA
    (79) MAT -> ID . MAT_BRACKET
    (80) MAT_BRACKET -> . OPEN_BRACKET EA CLOSING_BRACKET
    (81) MAT_BRACKET -> . MAT_BRACKET OPEN_BRACKET EA CLOSING_BRACKET

    EQUAL           shift and go to state 24
    OPEN_BRACKET    shift and go to state 23

    MAT_BRACKET                    shift and go to state 25

state 110

    (50) DOSTAT -> DO WHILE_AUX_1 IN_S . WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON

    WHILE           shift and go to state 129


state 111

    (55) IN_S -> OPEN_BRACES . S CLOSING_BRACES
    (23) S -> . STATEMENTS
    (24) S -> . S STATEMENTS
    (25) S -> .
    (26) STATEMENTS -> . VAR
    (27) STATEMENTS -> . IDSTAT
    (28) STATEMENTS -> . PRINTSTAT
    (29) STATEMENTS -> . READSTAT
    (30) STATEMENTS -> . IFSTAT
    (31) STATEMENTS -> . WHILESTAT
    (32) STATEMENTS -> . DOSTAT
    (33) STATEMENTS -> . FORSTAT
    (34) STATEMENTS -> . FUNCSTAT
    (35) STATEMENTS -> . INC_STAT
    (36) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (37) IDSTAT -> . ASSIGN SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (39) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (40) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (47) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (50) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (51) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (52) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (53) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (54) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (79) MAT -> . ID MAT_BRACKET

  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for READ resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for IF resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for DO resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for FOR resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for ID resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 6 (VAR -> .)
    PRINT           shift and go to state 76
    READ            shift and go to state 85
    IF              shift and go to state 84
    WHILE           shift and go to state 73
    DO              shift and go to state 78
    FOR             shift and go to state 77
    ID              shift and go to state 79
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4

  ! CLOSING_BRACES  [ reduce using rule 25 (S -> .) ]
  ! PRINT           [ reduce using rule 25 (S -> .) ]
  ! READ            [ reduce using rule 25 (S -> .) ]
  ! IF              [ reduce using rule 25 (S -> .) ]
  ! WHILE           [ reduce using rule 25 (S -> .) ]
  ! DO              [ reduce using rule 25 (S -> .) ]
  ! FOR             [ reduce using rule 25 (S -> .) ]
  ! ID              [ reduce using rule 25 (S -> .) ]
  ! INT             [ reduce using rule 25 (S -> .) ]
  ! DOUBLE          [ reduce using rule 25 (S -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 36 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 36 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    DOSTAT                         shift and go to state 75
    ASSIGN                         shift and go to state 68
    FORSTAT                        shift and go to state 69
    IDSTAT                         shift and go to state 70
    FUNCSTAT                       shift and go to state 71
    STATEMENTS                     shift and go to state 83
    MAT                            shift and go to state 44
    WHILESTAT                      shift and go to state 80
    VAR                            shift and go to state 81
    INC_STAT                       shift and go to state 72
    READSTAT                       shift and go to state 82
    TIPO                           shift and go to state 5
    PRINTSTAT                      shift and go to state 74
    IFSTAT                         shift and go to state 86
    S                              shift and go to state 130

state 112

    (54) INC_STAT -> ID MINUSMINUS SEMICOLON .

    CLOSING_BRACES  reduce using rule 54 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    PRINT           reduce using rule 54 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    READ            reduce using rule 54 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    IF              reduce using rule 54 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    WHILE           reduce using rule 54 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    DO              reduce using rule 54 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    FOR             reduce using rule 54 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    ID              reduce using rule 54 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    INT             reduce using rule 54 (INC_STAT -> ID MINUSMINUS SEMICOLON .)
    DOUBLE          reduce using rule 54 (INC_STAT -> ID MINUSMINUS SEMICOLON .)


state 113

    (53) INC_STAT -> ID PLUSPLUS SEMICOLON .

    CLOSING_BRACES  reduce using rule 53 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    PRINT           reduce using rule 53 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    READ            reduce using rule 53 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    IF              reduce using rule 53 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    WHILE           reduce using rule 53 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    DO              reduce using rule 53 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    FOR             reduce using rule 53 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    ID              reduce using rule 53 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    INT             reduce using rule 53 (INC_STAT -> ID PLUSPLUS SEMICOLON .)
    DOUBLE          reduce using rule 53 (INC_STAT -> ID PLUSPLUS SEMICOLON .)


state 114

    (52) FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 131


state 115

    (73) FL -> OPEN_PARENTH . EL CLOSING_PARENTH
    (62) FA -> OPEN_PARENTH . EA CLOSING_PARENTH
    (66) EL -> . TL
    (67) EL -> . EL OR TL
    (56) EA -> . TA
    (57) EA -> . EA PLUS TA
    (58) EA -> . EA MINUS TA
    (68) TL -> . FL
    (69) TL -> . TL AND FL
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (70) FL -> . NL OPERATORS NL
    (71) FL -> . EA OPERATORS EA
    (72) FL -> . NL
    (73) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (74) NL -> . NOT EL
    (79) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 115
    CONSTANT        shift and go to state 37
    ID              shift and go to state 40
    NOT             shift and go to state 118

    MAT                            shift and go to state 34
    FL                             shift and go to state 120
    EL                             shift and go to state 132
    NL                             shift and go to state 117
    TA                             shift and go to state 38
    EA                             shift and go to state 133
    FA                             shift and go to state 35
    TL                             shift and go to state 119

state 116

    (41) IFSTAT -> IF OPEN_PARENTH EL . CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> IF OPEN_PARENTH EL . CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (67) EL -> EL . OR TL

    CLOSING_PARENTH shift and go to state 135
    OR              shift and go to state 134


state 117

    (70) FL -> NL . OPERATORS NL
    (72) FL -> NL .
    (75) OPERATORS -> . NOT_EQUAL
    (76) OPERATORS -> . LOWER_THAN
    (77) OPERATORS -> . BIGGER_THAN
    (78) OPERATORS -> . EQUAL_EQUAL

  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for LOWER_THAN resolved as shift
  ! shift/reduce conflict for BIGGER_THAN resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
    AND             reduce using rule 72 (FL -> NL .)
    SEMICOLON       reduce using rule 72 (FL -> NL .)
    OR              reduce using rule 72 (FL -> NL .)
    CLOSING_PARENTH reduce using rule 72 (FL -> NL .)
    NOT_EQUAL       shift and go to state 140
    LOWER_THAN      shift and go to state 136
    BIGGER_THAN     shift and go to state 139
    EQUAL_EQUAL     shift and go to state 138

  ! NOT_EQUAL       [ reduce using rule 72 (FL -> NL .) ]
  ! LOWER_THAN      [ reduce using rule 72 (FL -> NL .) ]
  ! BIGGER_THAN     [ reduce using rule 72 (FL -> NL .) ]
  ! EQUAL_EQUAL     [ reduce using rule 72 (FL -> NL .) ]

    OPERATORS                      shift and go to state 137

state 118

    (74) NL -> NOT . EL
    (66) EL -> . TL
    (67) EL -> . EL OR TL
    (68) TL -> . FL
    (69) TL -> . TL AND FL
    (70) FL -> . NL OPERATORS NL
    (71) FL -> . EA OPERATORS EA
    (72) FL -> . NL
    (73) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (74) NL -> . NOT EL
    (56) EA -> . TA
    (57) EA -> . EA PLUS TA
    (58) EA -> . EA MINUS TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 115
    NOT             shift and go to state 118
    CONSTANT        shift and go to state 37
    ID              shift and go to state 40

    MAT                            shift and go to state 34
    FL                             shift and go to state 120
    EL                             shift and go to state 141
    NL                             shift and go to state 117
    EA                             shift and go to state 121
    FA                             shift and go to state 35
    TL                             shift and go to state 119
    TA                             shift and go to state 38

state 119

    (66) EL -> TL .
    (69) TL -> TL . AND FL

  ! shift/reduce conflict for AND resolved as shift
    CLOSING_PARENTH reduce using rule 66 (EL -> TL .)
    OR              reduce using rule 66 (EL -> TL .)
    SEMICOLON       reduce using rule 66 (EL -> TL .)
    NOT_EQUAL       reduce using rule 66 (EL -> TL .)
    LOWER_THAN      reduce using rule 66 (EL -> TL .)
    BIGGER_THAN     reduce using rule 66 (EL -> TL .)
    EQUAL_EQUAL     reduce using rule 66 (EL -> TL .)
    AND             shift and go to state 142

  ! AND             [ reduce using rule 66 (EL -> TL .) ]


state 120

    (68) TL -> FL .

    AND             reduce using rule 68 (TL -> FL .)
    SEMICOLON       reduce using rule 68 (TL -> FL .)
    OR              reduce using rule 68 (TL -> FL .)
    NOT_EQUAL       reduce using rule 68 (TL -> FL .)
    LOWER_THAN      reduce using rule 68 (TL -> FL .)
    BIGGER_THAN     reduce using rule 68 (TL -> FL .)
    EQUAL_EQUAL     reduce using rule 68 (TL -> FL .)
    CLOSING_PARENTH reduce using rule 68 (TL -> FL .)


state 121

    (71) FL -> EA . OPERATORS EA
    (57) EA -> EA . PLUS TA
    (58) EA -> EA . MINUS TA
    (75) OPERATORS -> . NOT_EQUAL
    (76) OPERATORS -> . LOWER_THAN
    (77) OPERATORS -> . BIGGER_THAN
    (78) OPERATORS -> . EQUAL_EQUAL

    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT_EQUAL       shift and go to state 140
    LOWER_THAN      shift and go to state 136
    BIGGER_THAN     shift and go to state 139
    EQUAL_EQUAL     shift and go to state 138

    OPERATORS                      shift and go to state 143

state 122

    (40) READSTAT -> READ OPEN_PARENTH EA . CLOSING_PARENTH SEMICOLON
    (57) EA -> EA . PLUS TA
    (58) EA -> EA . MINUS TA

    CLOSING_PARENTH shift and go to state 144
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54


state 123

    (14) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC . S CLOSING_BRACES RETURN IF_AUX3
    (23) S -> . STATEMENTS
    (24) S -> . S STATEMENTS
    (25) S -> .
    (26) STATEMENTS -> . VAR
    (27) STATEMENTS -> . IDSTAT
    (28) STATEMENTS -> . PRINTSTAT
    (29) STATEMENTS -> . READSTAT
    (30) STATEMENTS -> . IFSTAT
    (31) STATEMENTS -> . WHILESTAT
    (32) STATEMENTS -> . DOSTAT
    (33) STATEMENTS -> . FORSTAT
    (34) STATEMENTS -> . FUNCSTAT
    (35) STATEMENTS -> . INC_STAT
    (36) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (37) IDSTAT -> . ASSIGN SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (39) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (40) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (47) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (50) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (51) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (52) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (53) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (54) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (79) MAT -> . ID MAT_BRACKET

  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for READ resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for IF resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for DO resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for FOR resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for ID resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 25 (S -> .)
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for CLOSING_BRACES resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  reduce using rule 6 (VAR -> .)
    PRINT           shift and go to state 76
    READ            shift and go to state 85
    IF              shift and go to state 84
    WHILE           shift and go to state 73
    DO              shift and go to state 78
    FOR             shift and go to state 77
    ID              shift and go to state 79
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4

  ! CLOSING_BRACES  [ reduce using rule 25 (S -> .) ]
  ! PRINT           [ reduce using rule 25 (S -> .) ]
  ! READ            [ reduce using rule 25 (S -> .) ]
  ! IF              [ reduce using rule 25 (S -> .) ]
  ! WHILE           [ reduce using rule 25 (S -> .) ]
  ! DO              [ reduce using rule 25 (S -> .) ]
  ! FOR             [ reduce using rule 25 (S -> .) ]
  ! ID              [ reduce using rule 25 (S -> .) ]
  ! INT             [ reduce using rule 25 (S -> .) ]
  ! DOUBLE          [ reduce using rule 25 (S -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 36 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 36 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    DOSTAT                         shift and go to state 75
    S                              shift and go to state 145
    ASSIGN                         shift and go to state 68
    FORSTAT                        shift and go to state 69
    FUNCSTAT                       shift and go to state 71
    STATEMENTS                     shift and go to state 83
    MAT                            shift and go to state 44
    WHILESTAT                      shift and go to state 80
    VAR                            shift and go to state 81
    INC_STAT                       shift and go to state 72
    READSTAT                       shift and go to state 82
    TIPO                           shift and go to state 5
    PRINTSTAT                      shift and go to state 74
    IFSTAT                         shift and go to state 86
    IDSTAT                         shift and go to state 70

state 124

    (13) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES . RETURN IF_AUX3
    (18) RETURN -> . empty
    (46) empty -> .

    MAIN            reduce using rule 46 (empty -> .)
    FUNCTION        reduce using rule 46 (empty -> .)

    RETURN                         shift and go to state 146
    empty                          shift and go to state 147

state 125

    (47) WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL . CLOSING_PARENTH WHILE_AUX_2 IN_S
    (67) EL -> EL . OR TL

    CLOSING_PARENTH shift and go to state 148
    OR              shift and go to state 134


state 126

    (39) PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 149


state 127

    (38) PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 150


state 128

    (51) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON . WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (48) WHILE_AUX_1 -> . empty
    (46) empty -> .

    OPEN_PARENTH    reduce using rule 46 (empty -> .)
    NOT             reduce using rule 46 (empty -> .)
    CONSTANT        reduce using rule 46 (empty -> .)
    ID              reduce using rule 46 (empty -> .)

    WHILE_AUX_1                    shift and go to state 151
    empty                          shift and go to state 92

state 129

    (50) DOSTAT -> DO WHILE_AUX_1 IN_S WHILE . OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON

    OPEN_PARENTH    shift and go to state 152


state 130

    (55) IN_S -> OPEN_BRACES S . CLOSING_BRACES
    (24) S -> S . STATEMENTS
    (26) STATEMENTS -> . VAR
    (27) STATEMENTS -> . IDSTAT
    (28) STATEMENTS -> . PRINTSTAT
    (29) STATEMENTS -> . READSTAT
    (30) STATEMENTS -> . IFSTAT
    (31) STATEMENTS -> . WHILESTAT
    (32) STATEMENTS -> . DOSTAT
    (33) STATEMENTS -> . FORSTAT
    (34) STATEMENTS -> . FUNCSTAT
    (35) STATEMENTS -> . INC_STAT
    (36) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (37) IDSTAT -> . ASSIGN SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (39) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (40) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (47) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (50) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (51) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (52) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (53) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (54) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (79) MAT -> . ID MAT_BRACKET

  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  shift and go to state 153
    PRINT           shift and go to state 76
    READ            shift and go to state 85
    IF              shift and go to state 84
    WHILE           shift and go to state 73
    DO              shift and go to state 78
    FOR             shift and go to state 77
    ID              shift and go to state 79
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4

  ! CLOSING_BRACES  [ reduce using rule 36 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 36 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    DOSTAT                         shift and go to state 75
    ASSIGN                         shift and go to state 68
    FORSTAT                        shift and go to state 69
    IDSTAT                         shift and go to state 70
    FUNCSTAT                       shift and go to state 71
    STATEMENTS                     shift and go to state 102
    MAT                            shift and go to state 44
    WHILESTAT                      shift and go to state 80
    VAR                            shift and go to state 81
    INC_STAT                       shift and go to state 72
    READSTAT                       shift and go to state 82
    TIPO                           shift and go to state 5
    PRINTSTAT                      shift and go to state 74
    IFSTAT                         shift and go to state 86

state 131

    (52) FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 52 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 52 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 52 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 52 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 52 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 52 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 52 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 52 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 52 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 52 (FUNCSTAT -> ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON .)


state 132

    (73) FL -> OPEN_PARENTH EL . CLOSING_PARENTH
    (67) EL -> EL . OR TL

    CLOSING_PARENTH shift and go to state 154
    OR              shift and go to state 134


state 133

    (62) FA -> OPEN_PARENTH EA . CLOSING_PARENTH
    (57) EA -> EA . PLUS TA
    (58) EA -> EA . MINUS TA
    (71) FL -> EA . OPERATORS EA
    (75) OPERATORS -> . NOT_EQUAL
    (76) OPERATORS -> . LOWER_THAN
    (77) OPERATORS -> . BIGGER_THAN
    (78) OPERATORS -> . EQUAL_EQUAL

    CLOSING_PARENTH shift and go to state 60
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    NOT_EQUAL       shift and go to state 140
    LOWER_THAN      shift and go to state 136
    BIGGER_THAN     shift and go to state 139
    EQUAL_EQUAL     shift and go to state 138

    OPERATORS                      shift and go to state 143

state 134

    (67) EL -> EL OR . TL
    (68) TL -> . FL
    (69) TL -> . TL AND FL
    (70) FL -> . NL OPERATORS NL
    (71) FL -> . EA OPERATORS EA
    (72) FL -> . NL
    (73) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (74) NL -> . NOT EL
    (56) EA -> . TA
    (57) EA -> . EA PLUS TA
    (58) EA -> . EA MINUS TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 115
    NOT             shift and go to state 118
    CONSTANT        shift and go to state 37
    ID              shift and go to state 40

    MAT                            shift and go to state 34
    FL                             shift and go to state 120
    NL                             shift and go to state 117
    EA                             shift and go to state 121
    FA                             shift and go to state 35
    TL                             shift and go to state 155
    TA                             shift and go to state 38

state 135

    (41) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH . IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH . IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (43) IF_AUX1 -> . empty
    (46) empty -> .

    OPEN_BRACES     reduce using rule 46 (empty -> .)

    empty                          shift and go to state 156
    IF_AUX1                        shift and go to state 157

state 136

    (76) OPERATORS -> LOWER_THAN .

    CONSTANT        reduce using rule 76 (OPERATORS -> LOWER_THAN .)
    ID              reduce using rule 76 (OPERATORS -> LOWER_THAN .)
    OPEN_PARENTH    reduce using rule 76 (OPERATORS -> LOWER_THAN .)
    NOT             reduce using rule 76 (OPERATORS -> LOWER_THAN .)


state 137

    (70) FL -> NL OPERATORS . NL
    (74) NL -> . NOT EL

    NOT             shift and go to state 118

    NL                             shift and go to state 158

state 138

    (78) OPERATORS -> EQUAL_EQUAL .

    CONSTANT        reduce using rule 78 (OPERATORS -> EQUAL_EQUAL .)
    ID              reduce using rule 78 (OPERATORS -> EQUAL_EQUAL .)
    OPEN_PARENTH    reduce using rule 78 (OPERATORS -> EQUAL_EQUAL .)
    NOT             reduce using rule 78 (OPERATORS -> EQUAL_EQUAL .)


state 139

    (77) OPERATORS -> BIGGER_THAN .

    CONSTANT        reduce using rule 77 (OPERATORS -> BIGGER_THAN .)
    ID              reduce using rule 77 (OPERATORS -> BIGGER_THAN .)
    OPEN_PARENTH    reduce using rule 77 (OPERATORS -> BIGGER_THAN .)
    NOT             reduce using rule 77 (OPERATORS -> BIGGER_THAN .)


state 140

    (75) OPERATORS -> NOT_EQUAL .

    CONSTANT        reduce using rule 75 (OPERATORS -> NOT_EQUAL .)
    ID              reduce using rule 75 (OPERATORS -> NOT_EQUAL .)
    OPEN_PARENTH    reduce using rule 75 (OPERATORS -> NOT_EQUAL .)
    NOT             reduce using rule 75 (OPERATORS -> NOT_EQUAL .)


state 141

    (74) NL -> NOT EL .
    (67) EL -> EL . OR TL

  ! shift/reduce conflict for OR resolved as shift
    AND             reduce using rule 74 (NL -> NOT EL .)
    NOT_EQUAL       reduce using rule 74 (NL -> NOT EL .)
    LOWER_THAN      reduce using rule 74 (NL -> NOT EL .)
    BIGGER_THAN     reduce using rule 74 (NL -> NOT EL .)
    EQUAL_EQUAL     reduce using rule 74 (NL -> NOT EL .)
    CLOSING_PARENTH reduce using rule 74 (NL -> NOT EL .)
    SEMICOLON       reduce using rule 74 (NL -> NOT EL .)
    OR              shift and go to state 134

  ! OR              [ reduce using rule 74 (NL -> NOT EL .) ]


state 142

    (69) TL -> TL AND . FL
    (70) FL -> . NL OPERATORS NL
    (71) FL -> . EA OPERATORS EA
    (72) FL -> . NL
    (73) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (74) NL -> . NOT EL
    (56) EA -> . TA
    (57) EA -> . EA PLUS TA
    (58) EA -> . EA MINUS TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 115
    NOT             shift and go to state 118
    CONSTANT        shift and go to state 37
    ID              shift and go to state 40

    MAT                            shift and go to state 34
    FL                             shift and go to state 159
    NL                             shift and go to state 117
    EA                             shift and go to state 121
    FA                             shift and go to state 35
    TA                             shift and go to state 38

state 143

    (71) FL -> EA OPERATORS . EA
    (56) EA -> . TA
    (57) EA -> . EA PLUS TA
    (58) EA -> . EA MINUS TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    CONSTANT        shift and go to state 37
    ID              shift and go to state 40
    OPEN_PARENTH    shift and go to state 36

    MAT                            shift and go to state 34
    TA                             shift and go to state 38
    EA                             shift and go to state 160
    FA                             shift and go to state 35

state 144

    (40) READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 161


state 145

    (14) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S . CLOSING_BRACES RETURN IF_AUX3
    (24) S -> S . STATEMENTS
    (26) STATEMENTS -> . VAR
    (27) STATEMENTS -> . IDSTAT
    (28) STATEMENTS -> . PRINTSTAT
    (29) STATEMENTS -> . READSTAT
    (30) STATEMENTS -> . IFSTAT
    (31) STATEMENTS -> . WHILESTAT
    (32) STATEMENTS -> . DOSTAT
    (33) STATEMENTS -> . FORSTAT
    (34) STATEMENTS -> . FUNCSTAT
    (35) STATEMENTS -> . INC_STAT
    (36) STATEMENTS -> .
    (2) VAR -> . TIPO DECLARE SEMICOLON
    (3) VAR -> . TIPO MAT SEMICOLON
    (4) VAR -> . VAR TIPO DECLARE SEMICOLON
    (5) VAR -> . VAR TIPO MAT SEMICOLON
    (6) VAR -> .
    (37) IDSTAT -> . ASSIGN SEMICOLON
    (38) PRINTSTAT -> . PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (39) PRINTSTAT -> . PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON
    (40) READSTAT -> . READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON
    (41) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3
    (42) IFSTAT -> . IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (47) WHILESTAT -> . WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S
    (50) DOSTAT -> . DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON
    (51) FORSTAT -> . FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (52) FUNCSTAT -> . ID OPEN_PARENTH CLOSING_PARENTH SEMICOLON
    (53) INC_STAT -> . ID PLUSPLUS SEMICOLON
    (54) INC_STAT -> . ID MINUSMINUS SEMICOLON
    (21) TIPO -> . INT
    (22) TIPO -> . DOUBLE
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (79) MAT -> . ID MAT_BRACKET

  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for CLOSING_BRACES resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for READ resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for IF resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for DO resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for FOR resolved using rule 6 (VAR -> .)
  ! reduce/reduce conflict for ID resolved using rule 6 (VAR -> .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CLOSING_BRACES  shift and go to state 162
    PRINT           shift and go to state 76
    READ            shift and go to state 85
    IF              shift and go to state 84
    WHILE           shift and go to state 73
    DO              shift and go to state 78
    FOR             shift and go to state 77
    ID              shift and go to state 79
    INT             shift and go to state 3
    DOUBLE          shift and go to state 4

  ! CLOSING_BRACES  [ reduce using rule 36 (STATEMENTS -> .) ]
  ! PRINT           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! READ            [ reduce using rule 36 (STATEMENTS -> .) ]
  ! IF              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! WHILE           [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DO              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! FOR             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! ID              [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 36 (STATEMENTS -> .) ]
  ! DOUBLE          [ reduce using rule 36 (STATEMENTS -> .) ]
  ! INT             [ reduce using rule 6 (VAR -> .) ]
  ! DOUBLE          [ reduce using rule 6 (VAR -> .) ]
  ! CLOSING_BRACES  [ reduce using rule 6 (VAR -> .) ]
  ! PRINT           [ reduce using rule 6 (VAR -> .) ]
  ! READ            [ reduce using rule 6 (VAR -> .) ]
  ! IF              [ reduce using rule 6 (VAR -> .) ]
  ! WHILE           [ reduce using rule 6 (VAR -> .) ]
  ! DO              [ reduce using rule 6 (VAR -> .) ]
  ! FOR             [ reduce using rule 6 (VAR -> .) ]
  ! ID              [ reduce using rule 6 (VAR -> .) ]

    DOSTAT                         shift and go to state 75
    ASSIGN                         shift and go to state 68
    FORSTAT                        shift and go to state 69
    FUNCSTAT                       shift and go to state 71
    STATEMENTS                     shift and go to state 102
    MAT                            shift and go to state 44
    WHILESTAT                      shift and go to state 80
    VAR                            shift and go to state 81
    INC_STAT                       shift and go to state 72
    READSTAT                       shift and go to state 82
    TIPO                           shift and go to state 5
    PRINTSTAT                      shift and go to state 74
    IFSTAT                         shift and go to state 86
    IDSTAT                         shift and go to state 70

state 146

    (13) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN . IF_AUX3
    (45) IF_AUX3 -> . empty
    (46) empty -> .

    MAIN            reduce using rule 46 (empty -> .)
    FUNCTION        reduce using rule 46 (empty -> .)

    empty                          shift and go to state 164
    IF_AUX3                        shift and go to state 163

state 147

    (18) RETURN -> empty .

    MAIN            reduce using rule 18 (RETURN -> empty .)
    FUNCTION        reduce using rule 18 (RETURN -> empty .)


state 148

    (47) WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH . WHILE_AUX_2 IN_S
    (49) WHILE_AUX_2 -> . empty
    (46) empty -> .

    OPEN_BRACES     reduce using rule 46 (empty -> .)

    WHILE_AUX_2                    shift and go to state 165
    empty                          shift and go to state 166

state 149

    (39) PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 39 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 39 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 39 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 39 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 39 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 39 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 39 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 39 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 39 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 39 (PRINTSTAT -> PRINT OPEN_PARENTH STRING CLOSING_PARENTH SEMICOLON .)


state 150

    (38) PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 38 (PRINTSTAT -> PRINT OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)


state 151

    (51) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 . EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (66) EL -> . TL
    (67) EL -> . EL OR TL
    (68) TL -> . FL
    (69) TL -> . TL AND FL
    (70) FL -> . NL OPERATORS NL
    (71) FL -> . EA OPERATORS EA
    (72) FL -> . NL
    (73) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (74) NL -> . NOT EL
    (56) EA -> . TA
    (57) EA -> . EA PLUS TA
    (58) EA -> . EA MINUS TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 115
    NOT             shift and go to state 118
    CONSTANT        shift and go to state 37
    ID              shift and go to state 40

    MAT                            shift and go to state 34
    TA                             shift and go to state 38
    TL                             shift and go to state 119
    FA                             shift and go to state 35
    FL                             shift and go to state 120
    EL                             shift and go to state 167
    EA                             shift and go to state 121
    NL                             shift and go to state 117

state 152

    (50) DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH . EL CLOSING_PARENTH SEMICOLON
    (66) EL -> . TL
    (67) EL -> . EL OR TL
    (68) TL -> . FL
    (69) TL -> . TL AND FL
    (70) FL -> . NL OPERATORS NL
    (71) FL -> . EA OPERATORS EA
    (72) FL -> . NL
    (73) FL -> . OPEN_PARENTH EL CLOSING_PARENTH
    (74) NL -> . NOT EL
    (56) EA -> . TA
    (57) EA -> . EA PLUS TA
    (58) EA -> . EA MINUS TA
    (63) TA -> . FA
    (64) TA -> . TA MULTIPLY FA
    (65) TA -> . TA DIVISION FA
    (59) FA -> . CONSTANT
    (60) FA -> . ID
    (61) FA -> . MAT
    (62) FA -> . OPEN_PARENTH EA CLOSING_PARENTH
    (79) MAT -> . ID MAT_BRACKET

    OPEN_PARENTH    shift and go to state 115
    NOT             shift and go to state 118
    CONSTANT        shift and go to state 37
    ID              shift and go to state 40

    MAT                            shift and go to state 34
    TA                             shift and go to state 38
    FA                             shift and go to state 35
    TL                             shift and go to state 119
    FL                             shift and go to state 120
    EL                             shift and go to state 168
    EA                             shift and go to state 121
    NL                             shift and go to state 117

state 153

    (55) IN_S -> OPEN_BRACES S CLOSING_BRACES .

    CLOSING_BRACES  reduce using rule 55 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    PRINT           reduce using rule 55 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    READ            reduce using rule 55 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    IF              reduce using rule 55 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    WHILE           reduce using rule 55 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    DO              reduce using rule 55 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    FOR             reduce using rule 55 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    ID              reduce using rule 55 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    INT             reduce using rule 55 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    DOUBLE          reduce using rule 55 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)
    ELSE            reduce using rule 55 (IN_S -> OPEN_BRACES S CLOSING_BRACES .)


state 154

    (73) FL -> OPEN_PARENTH EL CLOSING_PARENTH .

    AND             reduce using rule 73 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    SEMICOLON       reduce using rule 73 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    OR              reduce using rule 73 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    CLOSING_PARENTH reduce using rule 73 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    NOT_EQUAL       reduce using rule 73 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    LOWER_THAN      reduce using rule 73 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    BIGGER_THAN     reduce using rule 73 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)
    EQUAL_EQUAL     reduce using rule 73 (FL -> OPEN_PARENTH EL CLOSING_PARENTH .)


state 155

    (67) EL -> EL OR TL .
    (69) TL -> TL . AND FL

  ! shift/reduce conflict for AND resolved as shift
    CLOSING_PARENTH reduce using rule 67 (EL -> EL OR TL .)
    OR              reduce using rule 67 (EL -> EL OR TL .)
    SEMICOLON       reduce using rule 67 (EL -> EL OR TL .)
    NOT_EQUAL       reduce using rule 67 (EL -> EL OR TL .)
    LOWER_THAN      reduce using rule 67 (EL -> EL OR TL .)
    BIGGER_THAN     reduce using rule 67 (EL -> EL OR TL .)
    EQUAL_EQUAL     reduce using rule 67 (EL -> EL OR TL .)
    AND             shift and go to state 142

  ! AND             [ reduce using rule 67 (EL -> EL OR TL .) ]


state 156

    (43) IF_AUX1 -> empty .

    OPEN_BRACES     reduce using rule 43 (IF_AUX1 -> empty .)


state 157

    (41) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 . IN_S IF_AUX3
    (42) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 . IN_S ELSE IF_AUX2 IN_S IF_AUX3
    (55) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 111

    IN_S                           shift and go to state 169

state 158

    (70) FL -> NL OPERATORS NL .

    AND             reduce using rule 70 (FL -> NL OPERATORS NL .)
    SEMICOLON       reduce using rule 70 (FL -> NL OPERATORS NL .)
    OR              reduce using rule 70 (FL -> NL OPERATORS NL .)
    CLOSING_PARENTH reduce using rule 70 (FL -> NL OPERATORS NL .)
    NOT_EQUAL       reduce using rule 70 (FL -> NL OPERATORS NL .)
    LOWER_THAN      reduce using rule 70 (FL -> NL OPERATORS NL .)
    BIGGER_THAN     reduce using rule 70 (FL -> NL OPERATORS NL .)
    EQUAL_EQUAL     reduce using rule 70 (FL -> NL OPERATORS NL .)


state 159

    (69) TL -> TL AND FL .

    AND             reduce using rule 69 (TL -> TL AND FL .)
    SEMICOLON       reduce using rule 69 (TL -> TL AND FL .)
    OR              reduce using rule 69 (TL -> TL AND FL .)
    NOT_EQUAL       reduce using rule 69 (TL -> TL AND FL .)
    LOWER_THAN      reduce using rule 69 (TL -> TL AND FL .)
    BIGGER_THAN     reduce using rule 69 (TL -> TL AND FL .)
    EQUAL_EQUAL     reduce using rule 69 (TL -> TL AND FL .)
    CLOSING_PARENTH reduce using rule 69 (TL -> TL AND FL .)


state 160

    (71) FL -> EA OPERATORS EA .
    (57) EA -> EA . PLUS TA
    (58) EA -> EA . MINUS TA

    AND             reduce using rule 71 (FL -> EA OPERATORS EA .)
    SEMICOLON       reduce using rule 71 (FL -> EA OPERATORS EA .)
    OR              reduce using rule 71 (FL -> EA OPERATORS EA .)
    CLOSING_PARENTH reduce using rule 71 (FL -> EA OPERATORS EA .)
    NOT_EQUAL       reduce using rule 71 (FL -> EA OPERATORS EA .)
    LOWER_THAN      reduce using rule 71 (FL -> EA OPERATORS EA .)
    BIGGER_THAN     reduce using rule 71 (FL -> EA OPERATORS EA .)
    EQUAL_EQUAL     reduce using rule 71 (FL -> EA OPERATORS EA .)
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54


state 161

    (40) READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 40 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 40 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 40 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 40 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 40 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 40 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 40 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 40 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 40 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 40 (READSTAT -> READ OPEN_PARENTH EA CLOSING_PARENTH SEMICOLON .)


state 162

    (14) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES . RETURN IF_AUX3
    (18) RETURN -> . empty
    (46) empty -> .

    MAIN            reduce using rule 46 (empty -> .)
    FUNCTION        reduce using rule 46 (empty -> .)

    RETURN                         shift and go to state 170
    empty                          shift and go to state 147

state 163

    (13) FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3 .

    MAIN            reduce using rule 13 (FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3 .)
    FUNCTION        reduce using rule 13 (FUNC -> FUNCTION AUX_FUNC SET_ID OPEN_PARENTH CLOSING_PARENTH DECLARE_FUNC OPEN_BRACES S CLOSING_BRACES RETURN IF_AUX3 .)


state 164

    (45) IF_AUX3 -> empty .

    CLOSING_BRACES  reduce using rule 45 (IF_AUX3 -> empty .)
    PRINT           reduce using rule 45 (IF_AUX3 -> empty .)
    READ            reduce using rule 45 (IF_AUX3 -> empty .)
    IF              reduce using rule 45 (IF_AUX3 -> empty .)
    WHILE           reduce using rule 45 (IF_AUX3 -> empty .)
    DO              reduce using rule 45 (IF_AUX3 -> empty .)
    FOR             reduce using rule 45 (IF_AUX3 -> empty .)
    ID              reduce using rule 45 (IF_AUX3 -> empty .)
    INT             reduce using rule 45 (IF_AUX3 -> empty .)
    DOUBLE          reduce using rule 45 (IF_AUX3 -> empty .)
    MAIN            reduce using rule 45 (IF_AUX3 -> empty .)
    FUNCTION        reduce using rule 45 (IF_AUX3 -> empty .)


state 165

    (47) WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 . IN_S
    (55) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 111

    IN_S                           shift and go to state 171

state 166

    (49) WHILE_AUX_2 -> empty .

    ID              reduce using rule 49 (WHILE_AUX_2 -> empty .)
    OPEN_BRACES     reduce using rule 49 (WHILE_AUX_2 -> empty .)


state 167

    (51) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL . SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (67) EL -> EL . OR TL

    SEMICOLON       shift and go to state 172
    OR              shift and go to state 134


state 168

    (50) DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL . CLOSING_PARENTH SEMICOLON
    (67) EL -> EL . OR TL

    CLOSING_PARENTH shift and go to state 173
    OR              shift and go to state 134


state 169

    (41) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S . IF_AUX3
    (42) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S . ELSE IF_AUX2 IN_S IF_AUX3
    (45) IF_AUX3 -> . empty
    (46) empty -> .

    ELSE            shift and go to state 174
    CLOSING_BRACES  reduce using rule 46 (empty -> .)
    PRINT           reduce using rule 46 (empty -> .)
    READ            reduce using rule 46 (empty -> .)
    IF              reduce using rule 46 (empty -> .)
    WHILE           reduce using rule 46 (empty -> .)
    DO              reduce using rule 46 (empty -> .)
    FOR             reduce using rule 46 (empty -> .)
    ID              reduce using rule 46 (empty -> .)
    INT             reduce using rule 46 (empty -> .)
    DOUBLE          reduce using rule 46 (empty -> .)

    empty                          shift and go to state 164
    IF_AUX3                        shift and go to state 175

state 170

    (14) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN . IF_AUX3
    (45) IF_AUX3 -> . empty
    (46) empty -> .

    MAIN            reduce using rule 46 (empty -> .)
    FUNCTION        reduce using rule 46 (empty -> .)

    empty                          shift and go to state 164
    IF_AUX3                        shift and go to state 176

state 171

    (47) WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .

    CLOSING_BRACES  reduce using rule 47 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    PRINT           reduce using rule 47 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    READ            reduce using rule 47 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    IF              reduce using rule 47 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    WHILE           reduce using rule 47 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    DO              reduce using rule 47 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    FOR             reduce using rule 47 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    ID              reduce using rule 47 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    INT             reduce using rule 47 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)
    DOUBLE          reduce using rule 47 (WHILESTAT -> WHILE WHILE_AUX_1 OPEN_PARENTH EL CLOSING_PARENTH WHILE_AUX_2 IN_S .)


state 172

    (51) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON . WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S
    (49) WHILE_AUX_2 -> . empty
    (46) empty -> .

    ID              reduce using rule 46 (empty -> .)

    empty                          shift and go to state 166
    WHILE_AUX_2                    shift and go to state 177

state 173

    (50) DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH . SEMICOLON

    SEMICOLON       shift and go to state 178


state 174

    (42) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE . IF_AUX2 IN_S IF_AUX3
    (44) IF_AUX2 -> . empty
    (46) empty -> .

    OPEN_BRACES     reduce using rule 46 (empty -> .)

    IF_AUX2                        shift and go to state 179
    empty                          shift and go to state 180

state 175

    (41) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .

    CLOSING_BRACES  reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    PRINT           reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    READ            reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    IF              reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    WHILE           reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    DO              reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    FOR             reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    ID              reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    INT             reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)
    DOUBLE          reduce using rule 41 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S IF_AUX3 .)


state 176

    (14) FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3 .

    MAIN            reduce using rule 14 (FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3 .)
    FUNCTION        reduce using rule 14 (FUNC -> FUNC AUX_FUNC FUNCTION SET_ID OPEN_PARENTH CLOSING_PARENTH OPEN_BRACES DECLARE_FUNC S CLOSING_BRACES RETURN IF_AUX3 .)


state 177

    (51) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 . ASSIGN CLOSING_PARENTH IN_S
    (11) ASSIGN -> . ID EQUAL EA
    (12) ASSIGN -> . MAT EQUAL EA
    (79) MAT -> . ID MAT_BRACKET

    ID              shift and go to state 109

    MAT                            shift and go to state 44
    ASSIGN                         shift and go to state 181

state 178

    (50) DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .

    CLOSING_BRACES  reduce using rule 50 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    PRINT           reduce using rule 50 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    READ            reduce using rule 50 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    IF              reduce using rule 50 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    WHILE           reduce using rule 50 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    DO              reduce using rule 50 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    FOR             reduce using rule 50 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    ID              reduce using rule 50 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    INT             reduce using rule 50 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)
    DOUBLE          reduce using rule 50 (DOSTAT -> DO WHILE_AUX_1 IN_S WHILE OPEN_PARENTH EL CLOSING_PARENTH SEMICOLON .)


state 179

    (42) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 . IN_S IF_AUX3
    (55) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 111

    IN_S                           shift and go to state 182

state 180

    (44) IF_AUX2 -> empty .

    OPEN_BRACES     reduce using rule 44 (IF_AUX2 -> empty .)


state 181

    (51) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN . CLOSING_PARENTH IN_S

    CLOSING_PARENTH shift and go to state 183


state 182

    (42) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S . IF_AUX3
    (45) IF_AUX3 -> . empty
    (46) empty -> .

    CLOSING_BRACES  reduce using rule 46 (empty -> .)
    PRINT           reduce using rule 46 (empty -> .)
    READ            reduce using rule 46 (empty -> .)
    IF              reduce using rule 46 (empty -> .)
    WHILE           reduce using rule 46 (empty -> .)
    DO              reduce using rule 46 (empty -> .)
    FOR             reduce using rule 46 (empty -> .)
    ID              reduce using rule 46 (empty -> .)
    INT             reduce using rule 46 (empty -> .)
    DOUBLE          reduce using rule 46 (empty -> .)

    empty                          shift and go to state 164
    IF_AUX3                        shift and go to state 184

state 183

    (51) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH . IN_S
    (55) IN_S -> . OPEN_BRACES S CLOSING_BRACES

    OPEN_BRACES     shift and go to state 111

    IN_S                           shift and go to state 185

state 184

    (42) IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .

    CLOSING_BRACES  reduce using rule 42 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    PRINT           reduce using rule 42 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    READ            reduce using rule 42 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    IF              reduce using rule 42 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    WHILE           reduce using rule 42 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    DO              reduce using rule 42 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    FOR             reduce using rule 42 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    ID              reduce using rule 42 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    INT             reduce using rule 42 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)
    DOUBLE          reduce using rule 42 (IFSTAT -> IF OPEN_PARENTH EL CLOSING_PARENTH IF_AUX1 IN_S ELSE IF_AUX2 IN_S IF_AUX3 .)


state 185

    (51) FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .

    CLOSING_BRACES  reduce using rule 51 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    PRINT           reduce using rule 51 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    READ            reduce using rule 51 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    IF              reduce using rule 51 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    WHILE           reduce using rule 51 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    DO              reduce using rule 51 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    FOR             reduce using rule 51 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    ID              reduce using rule 51 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    INT             reduce using rule 51 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)
    DOUBLE          reduce using rule 51 (FORSTAT -> FOR OPEN_PARENTH ASSIGN SEMICOLON WHILE_AUX_1 EL SEMICOLON WHILE_AUX_2 ASSIGN CLOSING_PARENTH IN_S .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 1 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 58 resolved as shift
WARNING: shift/reduce conflict for READ in state 58 resolved as shift
WARNING: shift/reduce conflict for IF in state 58 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 58 resolved as shift
WARNING: shift/reduce conflict for DO in state 58 resolved as shift
WARNING: shift/reduce conflict for FOR in state 58 resolved as shift
WARNING: shift/reduce conflict for ID in state 58 resolved as shift
WARNING: shift/reduce conflict for INT in state 58 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 58 resolved as shift
WARNING: shift/reduce conflict for INT in state 81 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 81 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 87 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 87 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 87 resolved as shift
WARNING: shift/reduce conflict for READ in state 87 resolved as shift
WARNING: shift/reduce conflict for IF in state 87 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 87 resolved as shift
WARNING: shift/reduce conflict for DO in state 87 resolved as shift
WARNING: shift/reduce conflict for FOR in state 87 resolved as shift
WARNING: shift/reduce conflict for ID in state 87 resolved as shift
WARNING: shift/reduce conflict for INT in state 87 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 87 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 89 resolved as shift
WARNING: shift/reduce conflict for READ in state 89 resolved as shift
WARNING: shift/reduce conflict for IF in state 89 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 89 resolved as shift
WARNING: shift/reduce conflict for DO in state 89 resolved as shift
WARNING: shift/reduce conflict for FOR in state 89 resolved as shift
WARNING: shift/reduce conflict for ID in state 89 resolved as shift
WARNING: shift/reduce conflict for INT in state 89 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 89 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 104 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 104 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 104 resolved as shift
WARNING: shift/reduce conflict for READ in state 104 resolved as shift
WARNING: shift/reduce conflict for IF in state 104 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 104 resolved as shift
WARNING: shift/reduce conflict for DO in state 104 resolved as shift
WARNING: shift/reduce conflict for FOR in state 104 resolved as shift
WARNING: shift/reduce conflict for ID in state 104 resolved as shift
WARNING: shift/reduce conflict for INT in state 104 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 104 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 111 resolved as shift
WARNING: shift/reduce conflict for READ in state 111 resolved as shift
WARNING: shift/reduce conflict for IF in state 111 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 111 resolved as shift
WARNING: shift/reduce conflict for DO in state 111 resolved as shift
WARNING: shift/reduce conflict for FOR in state 111 resolved as shift
WARNING: shift/reduce conflict for ID in state 111 resolved as shift
WARNING: shift/reduce conflict for INT in state 111 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 111 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 117 resolved as shift
WARNING: shift/reduce conflict for LOWER_THAN in state 117 resolved as shift
WARNING: shift/reduce conflict for BIGGER_THAN in state 117 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 117 resolved as shift
WARNING: shift/reduce conflict for AND in state 119 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 123 resolved as shift
WARNING: shift/reduce conflict for READ in state 123 resolved as shift
WARNING: shift/reduce conflict for IF in state 123 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 123 resolved as shift
WARNING: shift/reduce conflict for DO in state 123 resolved as shift
WARNING: shift/reduce conflict for FOR in state 123 resolved as shift
WARNING: shift/reduce conflict for ID in state 123 resolved as shift
WARNING: shift/reduce conflict for INT in state 123 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 123 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 130 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 130 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 130 resolved as shift
WARNING: shift/reduce conflict for READ in state 130 resolved as shift
WARNING: shift/reduce conflict for IF in state 130 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 130 resolved as shift
WARNING: shift/reduce conflict for DO in state 130 resolved as shift
WARNING: shift/reduce conflict for FOR in state 130 resolved as shift
WARNING: shift/reduce conflict for ID in state 130 resolved as shift
WARNING: shift/reduce conflict for INT in state 130 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 130 resolved as shift
WARNING: shift/reduce conflict for OR in state 141 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 145 resolved as shift
WARNING: shift/reduce conflict for CLOSING_BRACES in state 145 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 145 resolved as shift
WARNING: shift/reduce conflict for READ in state 145 resolved as shift
WARNING: shift/reduce conflict for IF in state 145 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 145 resolved as shift
WARNING: shift/reduce conflict for DO in state 145 resolved as shift
WARNING: shift/reduce conflict for FOR in state 145 resolved as shift
WARNING: shift/reduce conflict for ID in state 145 resolved as shift
WARNING: shift/reduce conflict for INT in state 145 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 145 resolved as shift
WARNING: shift/reduce conflict for AND in state 155 resolved as shift
WARNING: reduce/reduce conflict in state 58 resolved using rule (S -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 58
WARNING: reduce/reduce conflict in state 58 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (S -> <empty>) in state 58
WARNING: reduce/reduce conflict in state 87 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 87
WARNING: reduce/reduce conflict in state 89 resolved using rule (S -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 89
WARNING: reduce/reduce conflict in state 89 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (S -> <empty>) in state 89
WARNING: reduce/reduce conflict in state 104 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 104
WARNING: reduce/reduce conflict in state 111 resolved using rule (S -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 111
WARNING: reduce/reduce conflict in state 111 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (S -> <empty>) in state 111
WARNING: reduce/reduce conflict in state 123 resolved using rule (S -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 123
WARNING: reduce/reduce conflict in state 123 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (S -> <empty>) in state 123
WARNING: reduce/reduce conflict in state 130 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 130
WARNING: reduce/reduce conflict in state 145 resolved using rule (VAR -> <empty>)
WARNING: rejected rule (STATEMENTS -> <empty>) in state 145
WARNING: Rule (STATEMENTS -> <empty>) is never reduced
WARNING: Rule (S -> <empty>) is never reduced
